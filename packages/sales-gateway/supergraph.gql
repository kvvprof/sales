schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type ActualPayments
  @join__type(graph: SALES_MAIN)
{
  actualPayments: [BasicActualPayment!]!
  totalCount: NonNegativeInt!
}

type Agencies
  @join__type(graph: SALES_MAIN)
{
  agencies: [BasicAgency!]!
  totalCount: NonNegativeInt!
}

type Agency
  @join__type(graph: SALES_MAIN)
{
  agency: BasicAgency!
  agencyContracts: [BasicAgencyContract!]
}

type AgencyContract
  @join__type(graph: SALES_MAIN)
{
  entity: BasicEntity!
  object: BasicObject!
  agency: BasicAgency!
  responsibleUser: BasicUser
  agencyContractProperties: BasicAgencyContract!
  agencyContractSignatory: BasicAgencyContractSignatory
  realEstateAgencyContractProperties: BasicRealEstateAgencyContractProperties
  mipAgencyContractProperties: BasicMipAgencyContractProperties
}

type AgencyContractClientContract
  @join__type(graph: SALES_MAIN)
{
  agency: BasicAgency!
  agencyContract: BasicAgencyContract!
  realEstateAgencyContractProperties: BasicRealEstateAgencyContractProperties
  mipAgencyContractProperties: BasicMipAgencyContractProperties
}

input AgencyContractCommissionInput
  @join__type(graph: SALES_MAIN)
{
  percent: NonNegativeDecimal!
  threshold: NonNegativeDecimal!
  maxDays: NonNegativeInt!
}

enum AgencyContractType
  @join__type(graph: SALES_MAIN)
{
  REAL_ESTATE_AGENCY_CONTRACT @join__enumValue(graph: SALES_MAIN)
  MIP_AGENCY_CONTRACT @join__enumValue(graph: SALES_MAIN)
}

type AgencyContractWithRealEstateAgencyProperties
  @join__type(graph: SALES_MAIN)
{
  agencyContract: BasicAgencyContract!
  realEstateAgencyContractProperties: BasicRealEstateAgencyContractProperties
}

input BaseOptionsInput
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_PRICING)
{
  limit: NonNegativeInt
  offset: NonNegativeInt
  prefix: NonEmptyString
}

type BasicActualPayment
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  payment: Decimal!
  date: Date!
  clientContractId: PositiveInt!
}

type BasicAgency
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  commonDbContractorsId: PositiveInt!
  name: NonEmptyString!
  inn: NonEmptyString
}

type BasicAgencyContract
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  number: NonEmptyString!
  date: Date!
  agencyContractType: AgencyContractType!
  link: NonEmptyString
}

type BasicAgencyContractCommission
  @join__type(graph: SALES_MAIN)
{
  percent: NonNegativeDecimal!
  threshold: NonNegativeDecimal!
  maxDays: NonNegativeInt!
}

type BasicAgencyContractSignatory
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString!
  basedOn: NonEmptyString
  title: NonEmptyString
}

type BasicBank
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  name: NonEmptyString!
  isVisible: Boolean!
}

type BasicClient
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString!
  inn: NonEmptyString
  phone: NonEmptyString
  email: NonEmptyString
  address: NonEmptyString
  clientCategory: ClientCategory!
}

type BasicClientContract
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  number: NonEmptyString!
  date: Date!
  registrationDate: Date
  price: PositiveDecimal!
  clientContractType: ClientContractType!
  isRealEstateAgencyActDisabled: Boolean
  comment: String
  link: String
}

type BasicClientContractToClient
  @join__type(graph: SALES_MAIN)
{
  client: BasicClient!
  isMain: Boolean!
  share: NonNegativeInt!
}

type BasicClientEntityProperties
  @join__type(graph: SALES_MAIN)
{
  kpp: NonEmptyString
}

type BasicClientIndividualMinorProperties
  @join__type(graph: SALES_MAIN)
{
  dob: Date
  snils: NonEmptyString
  birthCertificate: NonEmptyString
  clientPassport: BasicClientPassport
  representatives: [BasicClient!]
}

type BasicClientIndividualProperties
  @join__type(graph: SALES_MAIN)
{
  dob: Date
  snils: NonEmptyString
  clientPassport: BasicClientPassport
}

type BasicClientPassport
  @join__type(graph: SALES_MAIN)
{
  number: NonEmptyString
  issued: NonEmptyString
  code: NonEmptyString
  placeOfBirth: NonEmptyString
  registrationAddress: NonEmptyString
}

type BasicCommonAccount
  @join__type(graph: SALES_COMMON)
{
  id: PositiveInt!
  number: String
  bank: BasicCommonBank
}

type BasicCommonBank
  @join__type(graph: SALES_COMMON)
{
  id: PositiveInt!
  name: String!
  city: String
  bik: String
  correspondentNumber: String
}

type BasicCommonContractor
  @join__type(graph: SALES_COMMON)
{
  id: PositiveInt!
  name: String!
  shortName: String
  inn: String
  kpp: String
  ogrn: String
  legalAddress: String
  actualAddress: String
  contacts: String
  reconciliationLink: String
  isActive: Boolean
  propogatedAt: DateTime
  phone: String
}

type BasicCommonEntity
  @join__type(graph: SALES_COMMON)
{
  id: PositiveInt!
  strId: String!
  name: String!
  shortName: String!
  displayName: String!
  inn: String!
  kpp: String!
  ogrn: String!
  dbName: String!
}

type BasicDduClientContractProperties
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  isEscrowDiscount: Boolean
  escrowAccountOpeningDate: Date
  escrowPeriod: Date
  escrowAccountNumber: NonEmptyString
  dduLink: NonEmptyString
  returnAccount: NonEmptyString
}

type BasicDkpClientContractProperties
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  dkpLink: NonEmptyString
}

type BasicEntity
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  commonDbEntitiesId: PositiveInt!
  name: NonEmptyString!
  website: NonEmptyString
}

type BasicEscrowAccountHistory
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  status: EscrowAccountStatus!
  number: String!
  openingDate: Date!
  depositedAmount: Decimal!
  incomingBalance: Decimal!
  dateOfTransaction: Date!
  transactionAmount: Decimal!
  outgoingBalance: Decimal!
  expirationDate: Date!
  depositor: String!
  depositorInn: String
  dduNumber: String!
  dduDate: Date!
  loanAgreementNumber: String
  loanAgreementDate: Date
  closingDate: Date
  builderInn: String!
}

type BasicMipAgencyContractProperties
  @join__type(graph: SALES_MAIN)
{
  agencyContractCommission: BasicAgencyContractCommission!
}

type BasicObject
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  commonDbObjectsId: PositiveInt!
  name: NonEmptyString!
}

input BasicOptionsInput
  @join__type(graph: SALES_MAIN)
{
  limit: NonNegativeInt
  offset: NonNegativeInt
  prefix: NonEmptyString
}

type BasicPricingObject
  @join__type(graph: SALES_PRICING)
{
  id: PositiveInt!
  name: NonEmptyString!
}

type BasicPricingProduct
  @join__type(graph: SALES_PRICING)
{
  id: PositiveInt!
  number: NonEmptyString!
  area: NonNegativeDecimal!
  price: NonNegativeDecimal!
  oneGtId: PositiveInt
}

type BasicPricingProductCategory
  @join__type(graph: SALES_PRICING)
{
  id: PositiveInt!
  name: NonEmptyString!
}

type BasicPricingProductType
  @join__type(graph: SALES_PRICING)
{
  id: PositiveInt!
  name: NonEmptyString!
}

type BasicProduct
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  pricingProductsId: PositiveInt!
  number: NonEmptyString!
  productCategory: ProductCategory!
}

type BasicRealEstateAgencyAct
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  number: NonEmptyString!
  date: Date!
  amount: NonNegativeDecimal!
  link: NonEmptyString
  retention: NonNegativeDecimal
  note: NonEmptyString
}

type BasicRealEstateAgencyContractProperties
  @join__type(graph: SALES_MAIN)
{
  agencyContractCommission: BasicAgencyContractCommission!
}

type BasicRealEstateAgent
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString!
  phone: NonEmptyString
  oneGtId: PositiveInt
}

type BasicRepresentative
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString!
  attorneyNumber: NonEmptyString
  attorneyDate: Date
  authorizedBy: NonEmptyString
  authorizedRole: NonEmptyString
}

type BasicScheduledPayment
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  payment: PositiveDecimal!
  date: Date!
  scheduledPaymentType: ScheduledPaymentType!
}

type BasicSubsidy
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  name: NonEmptyString!
  isVisible: Boolean!
}

type BasicTransferAct
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  number: NonEmptyString!
  date: Date!
  link: NonEmptyString
}

type BasicUser
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString!
  email: NonEmptyString!
  phone: NonEmptyString
  isManager: Boolean!
  userRole: UserRole!
  isStaff: Boolean!
}

type CandidateType
  @join__type(graph: SALES_MAIN)
{
  clientContractId: PositiveInt!
  clientContractNumber: NonEmptyString!
  clientContractType: ClientContractType!
  clientContractPrice: PositiveDecimal!
  agencyContractId: PositiveInt!
  agencyContractNumber: NonEmptyString!
  agencyContractPercent: NonNegativeDecimal!
  agencyContractThreshold: NonNegativeDecimal!
  agencyContractMaxDays: NonNegativeInt!
  agencyId: PositiveInt!
  agencyName: NonEmptyString!
  transactionAmount: NonNegativeDecimal!
  paymentPercentage: NonNegativeDecimal!
  payAmount: NonNegativeDecimal!
  mostRecentTransactionDate: Date
  daysElapsed: NonNegativeInt!
}

type Client
  @join__type(graph: SALES_MAIN)
{
  clientProperties: BasicClient!
  clientIndividualProperties: BasicClientIndividualProperties
  clientIndividualMinorProperties: BasicClientIndividualMinorProperties
  clientEntityProperties: BasicClientEntityProperties
  representatives: [BasicRepresentative!]
}

enum ClientCategory
  @join__type(graph: SALES_MAIN)
{
  INDIVIDUAL @join__enumValue(graph: SALES_MAIN)
  INDIVIDUAL_MINOR @join__enumValue(graph: SALES_MAIN)
  ENTITY @join__enumValue(graph: SALES_MAIN)
}

type ClientContract
  @join__type(graph: SALES_MAIN)
{
  clientContractProperties: BasicClientContract!
  dduClientContractProperties: BasicDduClientContractProperties
  dkpClientContractProperties: BasicDkpClientContractProperties
  clients: [BasicClientContractToClient!]!
  object: BasicObject!
  product: Product!
  manager: BasicUser
  realEstateAgent: BasicRealEstateAgent
  agencyContracts: [AgencyContractClientContract]
  bank: BasicBank
  subsidy: BasicSubsidy
}

type ClientContracts
  @join__type(graph: SALES_MAIN)
{
  clientContracts: [ClientContract!]!
  totalCount: NonNegativeInt!
}

type ClientContractsWithTransactionAmount
  @join__type(graph: SALES_MAIN)
{
  clientContract: ClientContract!
  transactionAmount: PositiveDecimal!
}

input ClientContractToClientInput
  @join__type(graph: SALES_MAIN)
{
  clientId: PositiveInt!
  isMain: Boolean!
  share: NonNegativeInt!
}

enum ClientContractType
  @join__type(graph: SALES_MAIN)
{
  DDU @join__enumValue(graph: SALES_MAIN)
  DKP @join__enumValue(graph: SALES_MAIN)
}

type ClientContractWithObject
  @join__type(graph: SALES_MAIN)
{
  clientContract: BasicClientContract!
  object: BasicObject!
}

input ClientEntityPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  kpp: NonEmptyString
}

input ClientIndividualMinorPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  dob: Date
  snils: NonEmptyString
  birthCertificate: NonEmptyString
  clientPassport: ClientPassportPropertiesInput
  representativeIds: [PositiveInt!]
}

input ClientIndividualPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  dob: Date
  snils: NonEmptyString
  clientPassport: ClientPassportPropertiesInput
}

input ClientPassportPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  number: NonEmptyString
  issued: NonEmptyString
  code: NonEmptyString
  placeOfBirth: NonEmptyString
  registrationAddress: NonEmptyString
}

type Clients
  @join__type(graph: SALES_MAIN)
{
  clients: [Client!]!
  totalCount: NonNegativeInt!
}

type CommonContractor
  @join__type(graph: SALES_COMMON)
{
  contractor: BasicCommonContractor!
  accounts: [BasicCommonAccount!]
}

type CommonContractors
  @join__type(graph: SALES_COMMON)
{
  contractors: [CommonContractor!]!
  totalCount: PositiveInt!
}

type CommonEntities
  @join__type(graph: SALES_COMMON)
{
  entities: [BasicCommonEntity!]!
  totalCount: PositiveInt!
}

input CreateActualPaymentInput
  @join__type(graph: SALES_MAIN)
{
  clientContractId: PositiveInt!
  payment: Decimal!
  date: Date!
}

input CreateAgencyContractInput
  @join__type(graph: SALES_MAIN)
{
  agencyContractProperties: CreateAgencyContractPropertiesInput!
  realEstateAgencyContractProperties: RealEstateAgencyContractPropertiesInput
  mipAgencyContractProperties: MipAgencyContractPropertiesInput
}

input CreateAgencyContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  date: Date!
  agencyId: PositiveInt!
  objectId: PositiveInt!
  entityId: PositiveInt!
  responsibleUserId: PositiveInt!
  agencyContractType: AgencyContractType!
  agencyContractSignatoryId: PositiveInt
}

input CreateAgencyContractSignatoryInput
  @join__type(graph: SALES_MAIN)
{
  agencyId: PositiveInt!
  fullName: NonEmptyString!
  basedOn: NonEmptyString
  title: NonEmptyString
}

input CreateAgencyInput
  @join__type(graph: SALES_MAIN)
{
  name: NonEmptyString!
  commonDbContractorsId: PositiveInt!
  inn: NonEmptyString
}

input CreateAssignmentInput
  @join__type(graph: SALES_MAIN)
{
  clientContractId: PositiveInt!
  clientIdsFrom: [PositiveInt!]!
  clientIdsTo: [PositiveInt!]!
}

input CreateBankInput
  @join__type(graph: SALES_MAIN)
{
  name: NonEmptyString!
  isVisible: Boolean!
}

input CreateClientContractInput
  @join__type(graph: SALES_MAIN)
{
  clientContractProperties: CreateClientContractPropertiesInput!
  dduClientContractProperties: DduClientContractPropertiesInput
  dkpClientContractProperties: DkpClientContractPropertiesInput
}

input CreateClientContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  number: NonEmptyString!
  date: Date!
  price: PositiveDecimal!
  registrationDate: Date
  clientContractType: ClientContractType!
  productId: PositiveInt!
  managerId: PositiveInt
  realEstateAgentId: PositiveInt
  bankId: PositiveInt
  subsidyId: PositiveInt
  clients: [ClientContractToClientInput!]!
  agencyContractIds: [PositiveInt!]
  comment: String
}

input CreateClientInput
  @join__type(graph: SALES_MAIN)
{
  clientProperties: CreateClientPropertiesInput!
  clientIndividualProperties: ClientIndividualPropertiesInput
  clientIndividualMinorProperties: ClientIndividualMinorPropertiesInput
  clientEntityProperties: ClientEntityPropertiesInput
}

input CreateClientPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  fullName: NonEmptyString!
  inn: NonEmptyString
  phone: NonEmptyString
  address: NonEmptyString
  email: NonEmptyString
  clientCategory: ClientCategory!
}

input CreateProductInput
  @join__type(graph: SALES_MAIN)
{
  pricingProductsId: PositiveInt!
  number: NonEmptyString!
  objectId: PositiveInt!
  productCategory: ProductCategory!
}

input CreateRealEstateAgencyActInput
  @join__type(graph: SALES_MAIN)
{
  date: Date!
  retention: NonNegativeDecimal
  note: NonEmptyString
  clientContractId: PositiveInt!
}

input CreateRealEstateAgentInput
  @join__type(graph: SALES_MAIN)
{
  fullName: NonEmptyString!
  phone: NonEmptyString
  oneGtId: PositiveInt
  agencyIds: [PositiveInt!]!
}

input CreateRepresentativeInput
  @join__type(graph: SALES_MAIN)
{
  clientId: PositiveInt!
  fullName: NonEmptyString!
  attorneyNumber: NonEmptyString
  attorneyDate: Date
  authorizedBy: NonEmptyString
  authorizedRole: NonEmptyString
}

input CreateScheduledPaymentInput
  @join__type(graph: SALES_MAIN)
{
  clientContractId: PositiveInt!
  payment: PositiveDecimal!
  date: Date!
  scheduledPaymentType: ScheduledPaymentType!
}

input CreateSubsidyInput
  @join__type(graph: SALES_MAIN)
{
  name: NonEmptyString!
  isVisible: Boolean!
}

input CreateTransferActInput
  @join__type(graph: SALES_MAIN)
{
  date: Date!
  clientContractId: PositiveInt!
  representativeIds: [PositiveInt!]
}

input CreateUserInput
  @join__type(graph: SALES_MAIN)
{
  fullName: NonEmptyString!
  email: NonEmptyString!
  phone: NonEmptyString
  isManager: Boolean!
  isStaff: Boolean!
  userRole: UserRole!
}

scalar Date
  @join__type(graph: SALES_MAIN)

scalar DateTime
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

input DduClientContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  dduLink: NonEmptyString
  returnAccount: NonEmptyString
  escrowAccountOpeningDate: Date
  escrowPeriod: Date
  escrowAccountNumber: NonEmptyString
  isEscrowDiscount: Boolean
}

scalar Decimal
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

input DeleteActualPaymentInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input DeleteBankInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input DeleteScheduledPaymentInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input DeleteSubsidyInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input DeleteUserInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input DkpClientContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  dkpLink: NonEmptyString
}

type Entity
  @join__type(graph: SALES_MAIN)
{
  entity: BasicEntity!
  objects: [BasicObject!]!
}

input EscrowAccountHistoryInput
  @join__type(graph: SALES_MAIN)
{
  status: EscrowAccountStatus!
  number: String!
  openingDate: Date!
  depositedAmount: Decimal!
  incomingBalance: Decimal!
  dateOfTransaction: Date!
  transactionAmount: Decimal!
  outgoingBalance: Decimal!
  expirationDate: Date!
  depositor: String!
  depositorInn: String
  dduNumber: String!
  dduDate: Date!
  loanAgreementNumber: String
  loanAgreementDate: Date
  closingDate: Date
  builderInn: String!
}

type EscrowAccountsHistory
  @join__type(graph: SALES_MAIN)
{
  escrowAccountsHistory: [BasicEscrowAccountHistory!]!
  totalCount: NonNegativeInt!
}

enum EscrowAccountStatus
  @join__type(graph: SALES_MAIN)
{
  OPENED @join__enumValue(graph: SALES_MAIN)
  CLOSED @join__enumValue(graph: SALES_MAIN)
}

input GetActualPaymentsInput
  @join__type(graph: SALES_MAIN)
{
  clientContractId: PositiveInt!
  options: BasicOptionsInput
}

input GetAgenciesInput
  @join__type(graph: SALES_MAIN)
{
  options: BasicOptionsInput
}

input GetAgencyContractInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetAgencyContractSignatoriesInput
  @join__type(graph: SALES_MAIN)
{
  agencyId: PositiveInt!
}

input GetAgencyContractsInput
  @join__type(graph: SALES_MAIN)
{
  agencyId: PositiveInt!
  objectId: PositiveInt
}

input GetAgencyInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetClientContractInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetClientContractsByIdsInput
  @join__type(graph: SALES_MAIN)
{
  ids: [PositiveInt!]!
}

input GetClientContractsInput
  @join__type(graph: SALES_MAIN)
{
  objectId: PositiveInt
  options: BasicOptionsInput
}

input GetClientInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetClientsInput
  @join__type(graph: SALES_MAIN)
{
  options: BasicOptionsInput
}

input GetCommonContractorInput
  @join__type(graph: SALES_COMMON)
{
  id: PositiveInt!
}

input GetCommonContractorsInput
  @join__type(graph: SALES_COMMON)
{
  options: BaseOptionsInput
}

input GetCommonEntitiesInput
  @join__type(graph: SALES_COMMON)
{
  options: BaseOptionsInput
}

input GetCommonEntityInput
  @join__type(graph: SALES_COMMON)
{
  id: PositiveInt!
}

input GetEscrowAccountsHistoryByDduNumberInput
  @join__type(graph: SALES_MAIN)
{
  dduNumber: NonEmptyString!
}

input GetEscrowAccountsHistoryInput
  @join__type(graph: SALES_MAIN)
{
  options: BasicOptionsInput
}

input GetObjectInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetPricingProductInput
  @join__type(graph: SALES_PRICING)
{
  id: PositiveInt!
}

input GetPricingProductsInput
  @join__type(graph: SALES_PRICING)
{
  objectId: PositiveInt!
  options: BaseOptionsInput
}

input GetRealEstateAgencyActInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetRealEstateAgencyActsInput
  @join__type(graph: SALES_MAIN)
{
  options: BasicOptionsInput
}

input GetRealEstateAgentInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetRealEstateAgentsInput
  @join__type(graph: SALES_MAIN)
{
  options: BasicOptionsInput
}

input GetRepresentativesByClientIdsInput
  @join__type(graph: SALES_MAIN)
{
  clientIds: [PositiveInt!]!
}

input GetScheduledPaymentsInput
  @join__type(graph: SALES_MAIN)
{
  clientContractId: PositiveInt!
  options: BasicOptionsInput
}

input GetTransferActInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
}

input GetTransferActsInput
  @join__type(graph: SALES_MAIN)
{
  options: BasicOptionsInput
}

type IsDeleted
  @join__type(graph: SALES_MAIN)
{
  isDeleted: Boolean!
}

scalar join__FieldSet

enum join__Graph {
  SALES_COMMON @join__graph(name: "sales-common", url: "http://localhost:9002")
  SALES_MAIN @join__graph(name: "sales-main", url: "http://localhost:9001")
  SALES_PRICING @join__graph(name: "sales-pricing", url: "http://localhost:9003")
}

scalar JSON
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

input MipAgencyContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  agencyContractCommission: AgencyContractCommissionInput!
}

type Mutation
  @join__type(graph: SALES_MAIN)
{
  createClient(input: CreateClientInput!): BasicClient!
  createRepresentative(input: CreateRepresentativeInput!): BasicRepresentative!
  updateClient(input: UpdateClientInput!): BasicClient!
  createProduct(input: CreateProductInput!): Product!
  createClientContract(input: CreateClientContractInput!): BasicClientContract!
  updateClientContract(input: UpdateClientContractInput!): BasicClientContract!
  createAgency(input: CreateAgencyInput!): BasicAgency!
  createAgencyContractSignatory(input: CreateAgencyContractSignatoryInput!): BasicAgencyContractSignatory!
  createAgencyContract(input: CreateAgencyContractInput!): BasicAgencyContract!
  updateAgencyContract(input: UpdateAgencyContractInput!): BasicAgencyContract!
  createUser(input: CreateUserInput!): BasicUser!
  createStaff(input: CreateUserInput!): BasicUser!
  updateUser(input: UpdateUserInput!): BasicUser!
  deleteUser(input: DeleteUserInput!): Boolean!
  createRealEstateAgent(input: CreateRealEstateAgentInput!): BasicRealEstateAgent!
  updateRealEstateAgent(input: UpdateRealEstateAgentInput!): BasicRealEstateAgent!
  createBank(input: CreateBankInput!): BasicBank!
  updateBank(input: UpdateBankInput!): BasicBank!
  deleteBank(input: DeleteBankInput!): Boolean!
  createScheduledPayment(input: CreateScheduledPaymentInput!): BasicScheduledPayment!
  createScheduledPayments(input: [CreateScheduledPaymentInput!]!): Boolean!
  deleteScheduledPayment(input: DeleteScheduledPaymentInput!): IsDeleted!
  createActualPayment(input: CreateActualPaymentInput!): BasicActualPayment!
  createActualPayments(input: [CreateActualPaymentInput!]!): Boolean!
  deleteActualPayment(input: DeleteActualPaymentInput!): IsDeleted!
  createEscrowAccountsHistory(input: [EscrowAccountHistoryInput!]!): Boolean!
  createRealEstateAgencyAct(input: CreateRealEstateAgencyActInput!): BasicRealEstateAgencyAct!
  updateRealEstateAgencyAct(input: UpdateRealEstateAgencyActInput!): BasicRealEstateAgencyAct!
  createSubsidy(input: CreateSubsidyInput!): BasicSubsidy!
  updateSubsidy(input: UpdateSubsidyInput!): BasicSubsidy!
  deleteSubsidy(input: DeleteSubsidyInput!): Boolean!
  createAssignment(input: CreateAssignmentInput!): Boolean!
  createTransferAct(input: CreateTransferActInput!): BasicTransferAct!
  updateTransferAct(input: UpdateTransferActInput!): BasicTransferAct!
  updateRepresentative(input: UpdateRepresentativeInput!): BasicRepresentative!
}

scalar NonEmptyString
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

scalar NonNegativeDecimal
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

scalar NonNegativeInt
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

scalar PositiveDecimal
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

scalar PositiveInt
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)

type PricingProduct
  @join__type(graph: SALES_PRICING)
{
  product: BasicPricingProduct!
  object: BasicPricingObject!
  category: BasicPricingProductCategory!
  productType: BasicPricingProductType
}

type PricingProducts
  @join__type(graph: SALES_PRICING)
{
  products: [PricingProduct!]!
  totalCount: PositiveInt!
}

type Product
  @join__type(graph: SALES_MAIN)
{
  product: BasicProduct!
  object: BasicObject!
}

enum ProductCategory
  @join__type(graph: SALES_MAIN)
{
  FLAT @join__enumValue(graph: SALES_MAIN)
  OFFICE @join__enumValue(graph: SALES_MAIN)
  APARTMENT @join__enumValue(graph: SALES_MAIN)
  STORAGE_ROOM @join__enumValue(graph: SALES_MAIN)
  PARKING_SPACE @join__enumValue(graph: SALES_MAIN)
}

type Query
  @join__type(graph: SALES_COMMON)
  @join__type(graph: SALES_MAIN)
  @join__type(graph: SALES_PRICING)
{
  getCommonContractor(input: GetCommonContractorInput!): CommonContractor! @join__field(graph: SALES_COMMON)
  getCommonContractors(input: GetCommonContractorsInput): CommonContractors! @join__field(graph: SALES_COMMON)
  getCommonEntity(input: GetCommonEntityInput!): BasicCommonEntity! @join__field(graph: SALES_COMMON)
  getCommonEntities(input: GetCommonEntitiesInput): CommonEntities! @join__field(graph: SALES_COMMON)
  getClient(input: GetClientInput!): Client! @join__field(graph: SALES_MAIN)
  getClients(input: GetClientsInput): Clients! @join__field(graph: SALES_MAIN)
  getObject(input: GetObjectInput!): BasicObject! @join__field(graph: SALES_MAIN)
  getObjects: [BasicObject!]! @join__field(graph: SALES_MAIN)
  getClientContract(input: GetClientContractInput!): ClientContract! @join__field(graph: SALES_MAIN)
  getClientContracts(input: GetClientContractsInput): ClientContracts! @join__field(graph: SALES_MAIN)
  getClientContractsWithoutTransferAct(input: GetClientContractsInput): ClientContracts! @join__field(graph: SALES_MAIN)
  getClientContractsByIds(input: GetClientContractsByIdsInput!): ClientContracts! @join__field(graph: SALES_MAIN)
  getAgency(input: GetAgencyInput!): Agency! @join__field(graph: SALES_MAIN)
  getAgencies(input: GetAgenciesInput): Agencies! @join__field(graph: SALES_MAIN)
  getAgencyContractSignatories(input: GetAgencyContractSignatoriesInput!): [BasicAgencyContractSignatory!]! @join__field(graph: SALES_MAIN)
  getAgencyContract(input: GetAgencyContractInput!): AgencyContract! @join__field(graph: SALES_MAIN)
  getAgencyContracts(input: GetAgencyContractsInput!): [AgencyContract!]! @join__field(graph: SALES_MAIN)
  getUsers: [BasicUser!]! @join__field(graph: SALES_MAIN)
  getRealEstateAgent(input: GetRealEstateAgentInput!): RealEstateAgent! @join__field(graph: SALES_MAIN)
  getRealEstateAgents(input: GetRealEstateAgentsInput): RealEstateAgents! @join__field(graph: SALES_MAIN)
  getBanks: [BasicBank!]! @join__field(graph: SALES_MAIN)
  getScheduledPayments(input: GetScheduledPaymentsInput!): ScheduledPayments! @join__field(graph: SALES_MAIN)
  getActualPayments(input: GetActualPaymentsInput!): ActualPayments! @join__field(graph: SALES_MAIN)
  getEntities: [Entity!]! @join__field(graph: SALES_MAIN)
  getEscrowAccountsHistory(input: GetEscrowAccountsHistoryInput): EscrowAccountsHistory! @join__field(graph: SALES_MAIN)
  getEscrowAccountsHistoryByDduNumber(input: GetEscrowAccountsHistoryByDduNumberInput!): [BasicEscrowAccountHistory!]! @join__field(graph: SALES_MAIN)
  getRealEstateAgencyAct(input: GetRealEstateAgencyActInput!): RealEstateAgencyAct! @join__field(graph: SALES_MAIN)
  getRealEstateAgencyActs(input: GetRealEstateAgencyActsInput): RealEstateAgencyActs! @join__field(graph: SALES_MAIN)
  getSubsidies: [BasicSubsidy!]! @join__field(graph: SALES_MAIN)
  getRealEstateAgencyActCandidates: [CandidateType!]! @join__field(graph: SALES_MAIN)
  getTransferAct(input: GetTransferActInput!): TransferAct! @join__field(graph: SALES_MAIN)
  getTransferActs(input: GetTransferActsInput!): TransferActs! @join__field(graph: SALES_MAIN)
  getRepresentativesByClientIds(input: GetRepresentativesByClientIdsInput!): [Representative!]! @join__field(graph: SALES_MAIN)
  getPricingProduct(input: GetPricingProductInput!): PricingProduct! @join__field(graph: SALES_PRICING)
  getPricingProducts(input: GetPricingProductsInput!): PricingProducts! @join__field(graph: SALES_PRICING)
}

type RealEstateAgencyAct
  @join__type(graph: SALES_MAIN)
{
  realEstateAgencyAct: BasicRealEstateAgencyAct!
  agency: BasicAgency!
  clientContract: ClientContractWithObject!
  agencyContract: AgencyContractWithRealEstateAgencyProperties!
}

type RealEstateAgencyActs
  @join__type(graph: SALES_MAIN)
{
  realEstateAgencyActs: [RealEstateAgencyAct!]!
  totalCount: NonNegativeInt!
}

input RealEstateAgencyContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  agencyContractCommission: AgencyContractCommissionInput!
}

type RealEstateAgent
  @join__type(graph: SALES_MAIN)
{
  realEstateAgent: BasicRealEstateAgent!
  agencies: [BasicAgency!]!
}

type RealEstateAgents
  @join__type(graph: SALES_MAIN)
{
  realEstateAgents: [RealEstateAgent!]!
  totalCount: NonNegativeInt!
}

type Representative
  @join__type(graph: SALES_MAIN)
{
  representative: BasicRepresentative!
  client: BasicClient!
}

type ScheduledPayments
  @join__type(graph: SALES_MAIN)
{
  scheduledPayments: [BasicScheduledPayment!]!
  totalCount: NonNegativeInt!
}

enum ScheduledPaymentType
  @join__type(graph: SALES_MAIN)
{
  OWN @join__enumValue(graph: SALES_MAIN)
  MORTGAGE @join__enumValue(graph: SALES_MAIN)
  EXCHANGE @join__enumValue(graph: SALES_MAIN)
  MATERNITY_CAPITAL @join__enumValue(graph: SALES_MAIN)
}

type TransferAct
  @join__type(graph: SALES_MAIN)
{
  transferAct: BasicTransferAct!
  clientContract: BasicClientContract!
  object: BasicObject!
  product: BasicProduct!
  representatives: [Representative!]
  clients: [BasicClient!]
}

type TransferActs
  @join__type(graph: SALES_MAIN)
{
  transferActs: [TransferAct!]!
  totalCount: NonNegativeInt!
}

input UpdateAgencyContractInput
  @join__type(graph: SALES_MAIN)
{
  agencyContractProperties: UpdateAgencyContractPropertiesInput!
  realEstateAgencyContractProperties: RealEstateAgencyContractPropertiesInput
  mipAgencyContractProperties: MipAgencyContractPropertiesInput
}

input UpdateAgencyContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  number: NonEmptyString
  date: Date
  agencyId: PositiveInt
  objectId: PositiveInt
  entityId: PositiveInt
  responsibleUserId: PositiveInt
  agencyContractSignatoryId: PositiveInt
}

input UpdateBankInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  name: NonEmptyString
  isVisible: Boolean
}

input UpdateClientContractInput
  @join__type(graph: SALES_MAIN)
{
  clientContractProperties: UpdateClientContractPropertiesInput!
  dduClientContractProperties: DduClientContractPropertiesInput
  dkpClientContractProperties: DkpClientContractPropertiesInput
}

input UpdateClientContractPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  number: NonEmptyString
  date: Date
  price: PositiveDecimal
  registrationDate: Date
  productId: PositiveInt
  managerId: PositiveInt
  realEstateAgentId: PositiveInt
  bankId: PositiveInt
  subsidyId: PositiveInt
  clients: [ClientContractToClientInput!]
  agencyContractIds: [PositiveInt!]
  isRealEstateAgencyActDisabled: Boolean
  comment: String
}

input UpdateClientInput
  @join__type(graph: SALES_MAIN)
{
  clientProperties: UpdateClientPropertiesInput!
  clientIndividualProperties: ClientIndividualPropertiesInput
  clientIndividualMinorProperties: ClientIndividualMinorPropertiesInput
  clientEntityProperties: ClientEntityPropertiesInput
}

input UpdateClientPropertiesInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString
  inn: NonEmptyString
  phone: NonEmptyString
  address: NonEmptyString
  email: NonEmptyString
}

input UpdateRealEstateAgencyActInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  date: Date
  retention: NonNegativeDecimal
  note: NonEmptyString
}

input UpdateRealEstateAgentInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString
  phone: NonEmptyString
  oneGtId: PositiveInt
  agencyIds: [PositiveInt!]
}

input UpdateRepresentativeInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString
  attorneyNumber: NonEmptyString
  attorneyDate: Date
  authorizedBy: NonEmptyString
  authorizedRole: NonEmptyString
}

input UpdateSubsidyInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  name: NonEmptyString
  isVisible: Boolean
}

input UpdateTransferActInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  date: Date
  representativeIds: [PositiveInt!]
}

input UpdateUserInput
  @join__type(graph: SALES_MAIN)
{
  id: PositiveInt!
  fullName: NonEmptyString
  email: NonEmptyString
  phone: NonEmptyString
  isManager: Boolean
  isStaff: Boolean
  userRole: UserRole
}

enum UserRole
  @join__type(graph: SALES_MAIN)
{
  ADMINISTRATOR @join__enumValue(graph: SALES_MAIN)
  DIRECTOR @join__enumValue(graph: SALES_MAIN)
  SALES_EMPLOYEE @join__enumValue(graph: SALES_MAIN)
}