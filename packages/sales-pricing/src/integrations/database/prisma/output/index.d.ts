
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model floor_pricing_rules
 * 
 */
export type floor_pricing_rules = $Result.DefaultSelection<Prisma.$floor_pricing_rulesPayload>
/**
 * Model floors
 * 
 */
export type floors = $Result.DefaultSelection<Prisma.$floorsPayload>
/**
 * Model integration_sources
 * 
 */
export type integration_sources = $Result.DefaultSelection<Prisma.$integration_sourcesPayload>
/**
 * Model integrations
 * 
 */
export type integrations = $Result.DefaultSelection<Prisma.$integrationsPayload>
/**
 * Model objects
 * 
 */
export type objects = $Result.DefaultSelection<Prisma.$objectsPayload>
/**
 * Model product_categories
 * 
 */
export type product_categories = $Result.DefaultSelection<Prisma.$product_categoriesPayload>
/**
 * Model product_files
 * 
 */
export type product_files = $Result.DefaultSelection<Prisma.$product_filesPayload>
/**
 * Model product_meter_numbers
 * 
 */
export type product_meter_numbers = $Result.DefaultSelection<Prisma.$product_meter_numbersPayload>
/**
 * Model product_price_history
 * 
 */
export type product_price_history = $Result.DefaultSelection<Prisma.$product_price_historyPayload>
/**
 * Model product_pricing_rules
 * 
 */
export type product_pricing_rules = $Result.DefaultSelection<Prisma.$product_pricing_rulesPayload>
/**
 * Model product_types
 * 
 */
export type product_types = $Result.DefaultSelection<Prisma.$product_typesPayload>
/**
 * Model products
 * 
 */
export type products = $Result.DefaultSelection<Prisma.$productsPayload>
/**
 * Model projects
 * 
 */
export type projects = $Result.DefaultSelection<Prisma.$projectsPayload>
/**
 * Model r_product_tags
 * 
 */
export type r_product_tags = $Result.DefaultSelection<Prisma.$r_product_tagsPayload>
/**
 * Model r_tags_categories
 * 
 */
export type r_tags_categories = $Result.DefaultSelection<Prisma.$r_tags_categoriesPayload>
/**
 * Model r_tags_objects
 * 
 */
export type r_tags_objects = $Result.DefaultSelection<Prisma.$r_tags_objectsPayload>
/**
 * Model r_tags_product_types
 * 
 */
export type r_tags_product_types = $Result.DefaultSelection<Prisma.$r_tags_product_typesPayload>
/**
 * Model r_tags_products
 * 
 */
export type r_tags_products = $Result.DefaultSelection<Prisma.$r_tags_productsPayload>
/**
 * Model r_tags_projects
 * 
 */
export type r_tags_projects = $Result.DefaultSelection<Prisma.$r_tags_projectsPayload>
/**
 * Model sections
 * 
 */
export type sections = $Result.DefaultSelection<Prisma.$sectionsPayload>
/**
 * Model tags
 * 
 */
export type tags = $Result.DefaultSelection<Prisma.$tagsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const product_files_type: {
  EXPLICATION: 'EXPLICATION'
};

export type product_files_type = (typeof product_files_type)[keyof typeof product_files_type]

}

export type product_files_type = $Enums.product_files_type

export const product_files_type: typeof $Enums.product_files_type

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Floor_pricing_rules
 * const floor_pricing_rules = await prisma.floor_pricing_rules.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Floor_pricing_rules
   * const floor_pricing_rules = await prisma.floor_pricing_rules.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.floor_pricing_rules`: Exposes CRUD operations for the **floor_pricing_rules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Floor_pricing_rules
    * const floor_pricing_rules = await prisma.floor_pricing_rules.findMany()
    * ```
    */
  get floor_pricing_rules(): Prisma.floor_pricing_rulesDelegate<ExtArgs>;

  /**
   * `prisma.floors`: Exposes CRUD operations for the **floors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Floors
    * const floors = await prisma.floors.findMany()
    * ```
    */
  get floors(): Prisma.floorsDelegate<ExtArgs>;

  /**
   * `prisma.integration_sources`: Exposes CRUD operations for the **integration_sources** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integration_sources
    * const integration_sources = await prisma.integration_sources.findMany()
    * ```
    */
  get integration_sources(): Prisma.integration_sourcesDelegate<ExtArgs>;

  /**
   * `prisma.integrations`: Exposes CRUD operations for the **integrations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integrations
    * const integrations = await prisma.integrations.findMany()
    * ```
    */
  get integrations(): Prisma.integrationsDelegate<ExtArgs>;

  /**
   * `prisma.objects`: Exposes CRUD operations for the **objects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Objects
    * const objects = await prisma.objects.findMany()
    * ```
    */
  get objects(): Prisma.objectsDelegate<ExtArgs>;

  /**
   * `prisma.product_categories`: Exposes CRUD operations for the **product_categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_categories
    * const product_categories = await prisma.product_categories.findMany()
    * ```
    */
  get product_categories(): Prisma.product_categoriesDelegate<ExtArgs>;

  /**
   * `prisma.product_files`: Exposes CRUD operations for the **product_files** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_files
    * const product_files = await prisma.product_files.findMany()
    * ```
    */
  get product_files(): Prisma.product_filesDelegate<ExtArgs>;

  /**
   * `prisma.product_meter_numbers`: Exposes CRUD operations for the **product_meter_numbers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_meter_numbers
    * const product_meter_numbers = await prisma.product_meter_numbers.findMany()
    * ```
    */
  get product_meter_numbers(): Prisma.product_meter_numbersDelegate<ExtArgs>;

  /**
   * `prisma.product_price_history`: Exposes CRUD operations for the **product_price_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_price_histories
    * const product_price_histories = await prisma.product_price_history.findMany()
    * ```
    */
  get product_price_history(): Prisma.product_price_historyDelegate<ExtArgs>;

  /**
   * `prisma.product_pricing_rules`: Exposes CRUD operations for the **product_pricing_rules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_pricing_rules
    * const product_pricing_rules = await prisma.product_pricing_rules.findMany()
    * ```
    */
  get product_pricing_rules(): Prisma.product_pricing_rulesDelegate<ExtArgs>;

  /**
   * `prisma.product_types`: Exposes CRUD operations for the **product_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_types
    * const product_types = await prisma.product_types.findMany()
    * ```
    */
  get product_types(): Prisma.product_typesDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs>;

  /**
   * `prisma.projects`: Exposes CRUD operations for the **projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.projects.findMany()
    * ```
    */
  get projects(): Prisma.projectsDelegate<ExtArgs>;

  /**
   * `prisma.r_product_tags`: Exposes CRUD operations for the **r_product_tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more R_product_tags
    * const r_product_tags = await prisma.r_product_tags.findMany()
    * ```
    */
  get r_product_tags(): Prisma.r_product_tagsDelegate<ExtArgs>;

  /**
   * `prisma.r_tags_categories`: Exposes CRUD operations for the **r_tags_categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more R_tags_categories
    * const r_tags_categories = await prisma.r_tags_categories.findMany()
    * ```
    */
  get r_tags_categories(): Prisma.r_tags_categoriesDelegate<ExtArgs>;

  /**
   * `prisma.r_tags_objects`: Exposes CRUD operations for the **r_tags_objects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more R_tags_objects
    * const r_tags_objects = await prisma.r_tags_objects.findMany()
    * ```
    */
  get r_tags_objects(): Prisma.r_tags_objectsDelegate<ExtArgs>;

  /**
   * `prisma.r_tags_product_types`: Exposes CRUD operations for the **r_tags_product_types** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more R_tags_product_types
    * const r_tags_product_types = await prisma.r_tags_product_types.findMany()
    * ```
    */
  get r_tags_product_types(): Prisma.r_tags_product_typesDelegate<ExtArgs>;

  /**
   * `prisma.r_tags_products`: Exposes CRUD operations for the **r_tags_products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more R_tags_products
    * const r_tags_products = await prisma.r_tags_products.findMany()
    * ```
    */
  get r_tags_products(): Prisma.r_tags_productsDelegate<ExtArgs>;

  /**
   * `prisma.r_tags_projects`: Exposes CRUD operations for the **r_tags_projects** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more R_tags_projects
    * const r_tags_projects = await prisma.r_tags_projects.findMany()
    * ```
    */
  get r_tags_projects(): Prisma.r_tags_projectsDelegate<ExtArgs>;

  /**
   * `prisma.sections`: Exposes CRUD operations for the **sections** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sections
    * const sections = await prisma.sections.findMany()
    * ```
    */
  get sections(): Prisma.sectionsDelegate<ExtArgs>;

  /**
   * `prisma.tags`: Exposes CRUD operations for the **tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tags.findMany()
    * ```
    */
  get tags(): Prisma.tagsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.1
   * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    floor_pricing_rules: 'floor_pricing_rules',
    floors: 'floors',
    integration_sources: 'integration_sources',
    integrations: 'integrations',
    objects: 'objects',
    product_categories: 'product_categories',
    product_files: 'product_files',
    product_meter_numbers: 'product_meter_numbers',
    product_price_history: 'product_price_history',
    product_pricing_rules: 'product_pricing_rules',
    product_types: 'product_types',
    products: 'products',
    projects: 'projects',
    r_product_tags: 'r_product_tags',
    r_tags_categories: 'r_tags_categories',
    r_tags_objects: 'r_tags_objects',
    r_tags_product_types: 'r_tags_product_types',
    r_tags_products: 'r_tags_products',
    r_tags_projects: 'r_tags_projects',
    sections: 'sections',
    tags: 'tags'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'floor_pricing_rules' | 'floors' | 'integration_sources' | 'integrations' | 'objects' | 'product_categories' | 'product_files' | 'product_meter_numbers' | 'product_price_history' | 'product_pricing_rules' | 'product_types' | 'products' | 'projects' | 'r_product_tags' | 'r_tags_categories' | 'r_tags_objects' | 'r_tags_product_types' | 'r_tags_products' | 'r_tags_projects' | 'sections' | 'tags'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      floor_pricing_rules: {
        payload: Prisma.$floor_pricing_rulesPayload<ExtArgs>
        fields: Prisma.floor_pricing_rulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.floor_pricing_rulesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.floor_pricing_rulesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload>
          }
          findFirst: {
            args: Prisma.floor_pricing_rulesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.floor_pricing_rulesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload>
          }
          findMany: {
            args: Prisma.floor_pricing_rulesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload>[]
          }
          create: {
            args: Prisma.floor_pricing_rulesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload>
          }
          createMany: {
            args: Prisma.floor_pricing_rulesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.floor_pricing_rulesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload>
          }
          update: {
            args: Prisma.floor_pricing_rulesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload>
          }
          deleteMany: {
            args: Prisma.floor_pricing_rulesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.floor_pricing_rulesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.floor_pricing_rulesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floor_pricing_rulesPayload>
          }
          aggregate: {
            args: Prisma.Floor_pricing_rulesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFloor_pricing_rules>
          }
          groupBy: {
            args: Prisma.floor_pricing_rulesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Floor_pricing_rulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.floor_pricing_rulesCountArgs<ExtArgs>,
            result: $Utils.Optional<Floor_pricing_rulesCountAggregateOutputType> | number
          }
        }
      }
      floors: {
        payload: Prisma.$floorsPayload<ExtArgs>
        fields: Prisma.floorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.floorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.floorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload>
          }
          findFirst: {
            args: Prisma.floorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.floorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload>
          }
          findMany: {
            args: Prisma.floorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload>[]
          }
          create: {
            args: Prisma.floorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload>
          }
          createMany: {
            args: Prisma.floorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.floorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload>
          }
          update: {
            args: Prisma.floorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload>
          }
          deleteMany: {
            args: Prisma.floorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.floorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.floorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$floorsPayload>
          }
          aggregate: {
            args: Prisma.FloorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFloors>
          }
          groupBy: {
            args: Prisma.floorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FloorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.floorsCountArgs<ExtArgs>,
            result: $Utils.Optional<FloorsCountAggregateOutputType> | number
          }
        }
      }
      integration_sources: {
        payload: Prisma.$integration_sourcesPayload<ExtArgs>
        fields: Prisma.integration_sourcesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.integration_sourcesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.integration_sourcesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload>
          }
          findFirst: {
            args: Prisma.integration_sourcesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.integration_sourcesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload>
          }
          findMany: {
            args: Prisma.integration_sourcesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload>[]
          }
          create: {
            args: Prisma.integration_sourcesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload>
          }
          createMany: {
            args: Prisma.integration_sourcesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.integration_sourcesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload>
          }
          update: {
            args: Prisma.integration_sourcesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload>
          }
          deleteMany: {
            args: Prisma.integration_sourcesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.integration_sourcesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.integration_sourcesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integration_sourcesPayload>
          }
          aggregate: {
            args: Prisma.Integration_sourcesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIntegration_sources>
          }
          groupBy: {
            args: Prisma.integration_sourcesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Integration_sourcesGroupByOutputType>[]
          }
          count: {
            args: Prisma.integration_sourcesCountArgs<ExtArgs>,
            result: $Utils.Optional<Integration_sourcesCountAggregateOutputType> | number
          }
        }
      }
      integrations: {
        payload: Prisma.$integrationsPayload<ExtArgs>
        fields: Prisma.integrationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.integrationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.integrationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload>
          }
          findFirst: {
            args: Prisma.integrationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.integrationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload>
          }
          findMany: {
            args: Prisma.integrationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload>[]
          }
          create: {
            args: Prisma.integrationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload>
          }
          createMany: {
            args: Prisma.integrationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.integrationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload>
          }
          update: {
            args: Prisma.integrationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload>
          }
          deleteMany: {
            args: Prisma.integrationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.integrationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.integrationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$integrationsPayload>
          }
          aggregate: {
            args: Prisma.IntegrationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIntegrations>
          }
          groupBy: {
            args: Prisma.integrationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<IntegrationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.integrationsCountArgs<ExtArgs>,
            result: $Utils.Optional<IntegrationsCountAggregateOutputType> | number
          }
        }
      }
      objects: {
        payload: Prisma.$objectsPayload<ExtArgs>
        fields: Prisma.objectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.objectsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.objectsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload>
          }
          findFirst: {
            args: Prisma.objectsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.objectsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload>
          }
          findMany: {
            args: Prisma.objectsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload>[]
          }
          create: {
            args: Prisma.objectsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload>
          }
          createMany: {
            args: Prisma.objectsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.objectsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload>
          }
          update: {
            args: Prisma.objectsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload>
          }
          deleteMany: {
            args: Prisma.objectsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.objectsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.objectsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$objectsPayload>
          }
          aggregate: {
            args: Prisma.ObjectsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateObjects>
          }
          groupBy: {
            args: Prisma.objectsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ObjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.objectsCountArgs<ExtArgs>,
            result: $Utils.Optional<ObjectsCountAggregateOutputType> | number
          }
        }
      }
      product_categories: {
        payload: Prisma.$product_categoriesPayload<ExtArgs>
        fields: Prisma.product_categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload>
          }
          findFirst: {
            args: Prisma.product_categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload>
          }
          findMany: {
            args: Prisma.product_categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload>[]
          }
          create: {
            args: Prisma.product_categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload>
          }
          createMany: {
            args: Prisma.product_categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.product_categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload>
          }
          update: {
            args: Prisma.product_categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload>
          }
          deleteMany: {
            args: Prisma.product_categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.product_categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.product_categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_categoriesPayload>
          }
          aggregate: {
            args: Prisma.Product_categoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_categories>
          }
          groupBy: {
            args: Prisma.product_categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_categoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_categoriesCountAggregateOutputType> | number
          }
        }
      }
      product_files: {
        payload: Prisma.$product_filesPayload<ExtArgs>
        fields: Prisma.product_filesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_filesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_filesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload>
          }
          findFirst: {
            args: Prisma.product_filesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_filesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload>
          }
          findMany: {
            args: Prisma.product_filesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload>[]
          }
          create: {
            args: Prisma.product_filesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload>
          }
          createMany: {
            args: Prisma.product_filesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.product_filesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload>
          }
          update: {
            args: Prisma.product_filesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload>
          }
          deleteMany: {
            args: Prisma.product_filesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.product_filesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.product_filesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_filesPayload>
          }
          aggregate: {
            args: Prisma.Product_filesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_files>
          }
          groupBy: {
            args: Prisma.product_filesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_filesGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_filesCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_filesCountAggregateOutputType> | number
          }
        }
      }
      product_meter_numbers: {
        payload: Prisma.$product_meter_numbersPayload<ExtArgs>
        fields: Prisma.product_meter_numbersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_meter_numbersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_meter_numbersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload>
          }
          findFirst: {
            args: Prisma.product_meter_numbersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_meter_numbersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload>
          }
          findMany: {
            args: Prisma.product_meter_numbersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload>[]
          }
          create: {
            args: Prisma.product_meter_numbersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload>
          }
          createMany: {
            args: Prisma.product_meter_numbersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.product_meter_numbersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload>
          }
          update: {
            args: Prisma.product_meter_numbersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload>
          }
          deleteMany: {
            args: Prisma.product_meter_numbersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.product_meter_numbersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.product_meter_numbersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_meter_numbersPayload>
          }
          aggregate: {
            args: Prisma.Product_meter_numbersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_meter_numbers>
          }
          groupBy: {
            args: Prisma.product_meter_numbersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_meter_numbersGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_meter_numbersCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_meter_numbersCountAggregateOutputType> | number
          }
        }
      }
      product_price_history: {
        payload: Prisma.$product_price_historyPayload<ExtArgs>
        fields: Prisma.product_price_historyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_price_historyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_price_historyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload>
          }
          findFirst: {
            args: Prisma.product_price_historyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_price_historyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload>
          }
          findMany: {
            args: Prisma.product_price_historyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload>[]
          }
          create: {
            args: Prisma.product_price_historyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload>
          }
          createMany: {
            args: Prisma.product_price_historyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.product_price_historyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload>
          }
          update: {
            args: Prisma.product_price_historyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload>
          }
          deleteMany: {
            args: Prisma.product_price_historyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.product_price_historyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.product_price_historyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_price_historyPayload>
          }
          aggregate: {
            args: Prisma.Product_price_historyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_price_history>
          }
          groupBy: {
            args: Prisma.product_price_historyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_price_historyGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_price_historyCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_price_historyCountAggregateOutputType> | number
          }
        }
      }
      product_pricing_rules: {
        payload: Prisma.$product_pricing_rulesPayload<ExtArgs>
        fields: Prisma.product_pricing_rulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_pricing_rulesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_pricing_rulesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload>
          }
          findFirst: {
            args: Prisma.product_pricing_rulesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_pricing_rulesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload>
          }
          findMany: {
            args: Prisma.product_pricing_rulesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload>[]
          }
          create: {
            args: Prisma.product_pricing_rulesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload>
          }
          createMany: {
            args: Prisma.product_pricing_rulesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.product_pricing_rulesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload>
          }
          update: {
            args: Prisma.product_pricing_rulesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload>
          }
          deleteMany: {
            args: Prisma.product_pricing_rulesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.product_pricing_rulesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.product_pricing_rulesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_pricing_rulesPayload>
          }
          aggregate: {
            args: Prisma.Product_pricing_rulesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_pricing_rules>
          }
          groupBy: {
            args: Prisma.product_pricing_rulesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_pricing_rulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_pricing_rulesCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_pricing_rulesCountAggregateOutputType> | number
          }
        }
      }
      product_types: {
        payload: Prisma.$product_typesPayload<ExtArgs>
        fields: Prisma.product_typesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.product_typesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.product_typesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          findFirst: {
            args: Prisma.product_typesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.product_typesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          findMany: {
            args: Prisma.product_typesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>[]
          }
          create: {
            args: Prisma.product_typesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          createMany: {
            args: Prisma.product_typesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.product_typesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          update: {
            args: Prisma.product_typesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          deleteMany: {
            args: Prisma.product_typesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.product_typesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.product_typesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$product_typesPayload>
          }
          aggregate: {
            args: Prisma.Product_typesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct_types>
          }
          groupBy: {
            args: Prisma.product_typesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Product_typesGroupByOutputType>[]
          }
          count: {
            args: Prisma.product_typesCountArgs<ExtArgs>,
            result: $Utils.Optional<Product_typesCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: Prisma.$productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      projects: {
        payload: Prisma.$projectsPayload<ExtArgs>
        fields: Prisma.projectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.projectsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.projectsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          findFirst: {
            args: Prisma.projectsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.projectsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          findMany: {
            args: Prisma.projectsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>[]
          }
          create: {
            args: Prisma.projectsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          createMany: {
            args: Prisma.projectsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.projectsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          update: {
            args: Prisma.projectsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          deleteMany: {
            args: Prisma.projectsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.projectsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.projectsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$projectsPayload>
          }
          aggregate: {
            args: Prisma.ProjectsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProjects>
          }
          groupBy: {
            args: Prisma.projectsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.projectsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectsCountAggregateOutputType> | number
          }
        }
      }
      r_product_tags: {
        payload: Prisma.$r_product_tagsPayload<ExtArgs>
        fields: Prisma.r_product_tagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.r_product_tagsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.r_product_tagsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload>
          }
          findFirst: {
            args: Prisma.r_product_tagsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.r_product_tagsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload>
          }
          findMany: {
            args: Prisma.r_product_tagsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload>[]
          }
          create: {
            args: Prisma.r_product_tagsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload>
          }
          createMany: {
            args: Prisma.r_product_tagsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.r_product_tagsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload>
          }
          update: {
            args: Prisma.r_product_tagsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload>
          }
          deleteMany: {
            args: Prisma.r_product_tagsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.r_product_tagsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.r_product_tagsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_product_tagsPayload>
          }
          aggregate: {
            args: Prisma.R_product_tagsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateR_product_tags>
          }
          groupBy: {
            args: Prisma.r_product_tagsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<R_product_tagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.r_product_tagsCountArgs<ExtArgs>,
            result: $Utils.Optional<R_product_tagsCountAggregateOutputType> | number
          }
        }
      }
      r_tags_categories: {
        payload: Prisma.$r_tags_categoriesPayload<ExtArgs>
        fields: Prisma.r_tags_categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.r_tags_categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.r_tags_categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload>
          }
          findFirst: {
            args: Prisma.r_tags_categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.r_tags_categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload>
          }
          findMany: {
            args: Prisma.r_tags_categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload>[]
          }
          create: {
            args: Prisma.r_tags_categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload>
          }
          createMany: {
            args: Prisma.r_tags_categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.r_tags_categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload>
          }
          update: {
            args: Prisma.r_tags_categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload>
          }
          deleteMany: {
            args: Prisma.r_tags_categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.r_tags_categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.r_tags_categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_categoriesPayload>
          }
          aggregate: {
            args: Prisma.R_tags_categoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateR_tags_categories>
          }
          groupBy: {
            args: Prisma.r_tags_categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_categoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.r_tags_categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_categoriesCountAggregateOutputType> | number
          }
        }
      }
      r_tags_objects: {
        payload: Prisma.$r_tags_objectsPayload<ExtArgs>
        fields: Prisma.r_tags_objectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.r_tags_objectsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.r_tags_objectsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload>
          }
          findFirst: {
            args: Prisma.r_tags_objectsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.r_tags_objectsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload>
          }
          findMany: {
            args: Prisma.r_tags_objectsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload>[]
          }
          create: {
            args: Prisma.r_tags_objectsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload>
          }
          createMany: {
            args: Prisma.r_tags_objectsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.r_tags_objectsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload>
          }
          update: {
            args: Prisma.r_tags_objectsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload>
          }
          deleteMany: {
            args: Prisma.r_tags_objectsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.r_tags_objectsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.r_tags_objectsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_objectsPayload>
          }
          aggregate: {
            args: Prisma.R_tags_objectsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateR_tags_objects>
          }
          groupBy: {
            args: Prisma.r_tags_objectsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_objectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.r_tags_objectsCountArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_objectsCountAggregateOutputType> | number
          }
        }
      }
      r_tags_product_types: {
        payload: Prisma.$r_tags_product_typesPayload<ExtArgs>
        fields: Prisma.r_tags_product_typesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.r_tags_product_typesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.r_tags_product_typesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload>
          }
          findFirst: {
            args: Prisma.r_tags_product_typesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.r_tags_product_typesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload>
          }
          findMany: {
            args: Prisma.r_tags_product_typesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload>[]
          }
          create: {
            args: Prisma.r_tags_product_typesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload>
          }
          createMany: {
            args: Prisma.r_tags_product_typesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.r_tags_product_typesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload>
          }
          update: {
            args: Prisma.r_tags_product_typesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload>
          }
          deleteMany: {
            args: Prisma.r_tags_product_typesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.r_tags_product_typesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.r_tags_product_typesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_product_typesPayload>
          }
          aggregate: {
            args: Prisma.R_tags_product_typesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateR_tags_product_types>
          }
          groupBy: {
            args: Prisma.r_tags_product_typesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_product_typesGroupByOutputType>[]
          }
          count: {
            args: Prisma.r_tags_product_typesCountArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_product_typesCountAggregateOutputType> | number
          }
        }
      }
      r_tags_products: {
        payload: Prisma.$r_tags_productsPayload<ExtArgs>
        fields: Prisma.r_tags_productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.r_tags_productsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.r_tags_productsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload>
          }
          findFirst: {
            args: Prisma.r_tags_productsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.r_tags_productsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload>
          }
          findMany: {
            args: Prisma.r_tags_productsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload>[]
          }
          create: {
            args: Prisma.r_tags_productsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload>
          }
          createMany: {
            args: Prisma.r_tags_productsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.r_tags_productsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload>
          }
          update: {
            args: Prisma.r_tags_productsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload>
          }
          deleteMany: {
            args: Prisma.r_tags_productsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.r_tags_productsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.r_tags_productsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_productsPayload>
          }
          aggregate: {
            args: Prisma.R_tags_productsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateR_tags_products>
          }
          groupBy: {
            args: Prisma.r_tags_productsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_productsGroupByOutputType>[]
          }
          count: {
            args: Prisma.r_tags_productsCountArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_productsCountAggregateOutputType> | number
          }
        }
      }
      r_tags_projects: {
        payload: Prisma.$r_tags_projectsPayload<ExtArgs>
        fields: Prisma.r_tags_projectsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.r_tags_projectsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.r_tags_projectsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload>
          }
          findFirst: {
            args: Prisma.r_tags_projectsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.r_tags_projectsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload>
          }
          findMany: {
            args: Prisma.r_tags_projectsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload>[]
          }
          create: {
            args: Prisma.r_tags_projectsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload>
          }
          createMany: {
            args: Prisma.r_tags_projectsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.r_tags_projectsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload>
          }
          update: {
            args: Prisma.r_tags_projectsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload>
          }
          deleteMany: {
            args: Prisma.r_tags_projectsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.r_tags_projectsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.r_tags_projectsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$r_tags_projectsPayload>
          }
          aggregate: {
            args: Prisma.R_tags_projectsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateR_tags_projects>
          }
          groupBy: {
            args: Prisma.r_tags_projectsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_projectsGroupByOutputType>[]
          }
          count: {
            args: Prisma.r_tags_projectsCountArgs<ExtArgs>,
            result: $Utils.Optional<R_tags_projectsCountAggregateOutputType> | number
          }
        }
      }
      sections: {
        payload: Prisma.$sectionsPayload<ExtArgs>
        fields: Prisma.sectionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sectionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sectionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload>
          }
          findFirst: {
            args: Prisma.sectionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sectionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload>
          }
          findMany: {
            args: Prisma.sectionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload>[]
          }
          create: {
            args: Prisma.sectionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload>
          }
          createMany: {
            args: Prisma.sectionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sectionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload>
          }
          update: {
            args: Prisma.sectionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload>
          }
          deleteMany: {
            args: Prisma.sectionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sectionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sectionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sectionsPayload>
          }
          aggregate: {
            args: Prisma.SectionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSections>
          }
          groupBy: {
            args: Prisma.sectionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SectionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.sectionsCountArgs<ExtArgs>,
            result: $Utils.Optional<SectionsCountAggregateOutputType> | number
          }
        }
      }
      tags: {
        payload: Prisma.$tagsPayload<ExtArgs>
        fields: Prisma.tagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tagsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tagsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          findFirst: {
            args: Prisma.tagsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tagsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          findMany: {
            args: Prisma.tagsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>[]
          }
          create: {
            args: Prisma.tagsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          createMany: {
            args: Prisma.tagsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tagsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          update: {
            args: Prisma.tagsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          deleteMany: {
            args: Prisma.tagsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tagsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tagsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$tagsPayload>
          }
          aggregate: {
            args: Prisma.TagsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTags>
          }
          groupBy: {
            args: Prisma.tagsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.tagsCountArgs<ExtArgs>,
            result: $Utils.Optional<TagsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FloorsCountOutputType
   */

  export type FloorsCountOutputType = {
    floor_pricing_rules: number
    products: number
  }

  export type FloorsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    floor_pricing_rules?: boolean | FloorsCountOutputTypeCountFloor_pricing_rulesArgs
    products?: boolean | FloorsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * FloorsCountOutputType without action
   */
  export type FloorsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FloorsCountOutputType
     */
    select?: FloorsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FloorsCountOutputType without action
   */
  export type FloorsCountOutputTypeCountFloor_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: floor_pricing_rulesWhereInput
  }

  /**
   * FloorsCountOutputType without action
   */
  export type FloorsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * Count Type Integration_sourcesCountOutputType
   */

  export type Integration_sourcesCountOutputType = {
    integrations: number
  }

  export type Integration_sourcesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrations?: boolean | Integration_sourcesCountOutputTypeCountIntegrationsArgs
  }

  // Custom InputTypes
  /**
   * Integration_sourcesCountOutputType without action
   */
  export type Integration_sourcesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration_sourcesCountOutputType
     */
    select?: Integration_sourcesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Integration_sourcesCountOutputType without action
   */
  export type Integration_sourcesCountOutputTypeCountIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: integrationsWhereInput
  }


  /**
   * Count Type ObjectsCountOutputType
   */

  export type ObjectsCountOutputType = {
    product_types: number
    products: number
    r_tags_objects: number
    sections: number
  }

  export type ObjectsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_types?: boolean | ObjectsCountOutputTypeCountProduct_typesArgs
    products?: boolean | ObjectsCountOutputTypeCountProductsArgs
    r_tags_objects?: boolean | ObjectsCountOutputTypeCountR_tags_objectsArgs
    sections?: boolean | ObjectsCountOutputTypeCountSectionsArgs
  }

  // Custom InputTypes
  /**
   * ObjectsCountOutputType without action
   */
  export type ObjectsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectsCountOutputType
     */
    select?: ObjectsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ObjectsCountOutputType without action
   */
  export type ObjectsCountOutputTypeCountProduct_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_typesWhereInput
  }

  /**
   * ObjectsCountOutputType without action
   */
  export type ObjectsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }

  /**
   * ObjectsCountOutputType without action
   */
  export type ObjectsCountOutputTypeCountR_tags_objectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_objectsWhereInput
  }

  /**
   * ObjectsCountOutputType without action
   */
  export type ObjectsCountOutputTypeCountSectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sectionsWhereInput
  }


  /**
   * Count Type Product_categoriesCountOutputType
   */

  export type Product_categoriesCountOutputType = {
    products: number
    r_tags_categories: number
  }

  export type Product_categoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Product_categoriesCountOutputTypeCountProductsArgs
    r_tags_categories?: boolean | Product_categoriesCountOutputTypeCountR_tags_categoriesArgs
  }

  // Custom InputTypes
  /**
   * Product_categoriesCountOutputType without action
   */
  export type Product_categoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_categoriesCountOutputType
     */
    select?: Product_categoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Product_categoriesCountOutputType without action
   */
  export type Product_categoriesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }

  /**
   * Product_categoriesCountOutputType without action
   */
  export type Product_categoriesCountOutputTypeCountR_tags_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_categoriesWhereInput
  }


  /**
   * Count Type Product_typesCountOutputType
   */

  export type Product_typesCountOutputType = {
    floor_pricing_rules: number
    product_pricing_rules: number
    products: number
    r_tags_product_types: number
  }

  export type Product_typesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    floor_pricing_rules?: boolean | Product_typesCountOutputTypeCountFloor_pricing_rulesArgs
    product_pricing_rules?: boolean | Product_typesCountOutputTypeCountProduct_pricing_rulesArgs
    products?: boolean | Product_typesCountOutputTypeCountProductsArgs
    r_tags_product_types?: boolean | Product_typesCountOutputTypeCountR_tags_product_typesArgs
  }

  // Custom InputTypes
  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product_typesCountOutputType
     */
    select?: Product_typesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeCountFloor_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: floor_pricing_rulesWhereInput
  }

  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeCountProduct_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_pricing_rulesWhereInput
  }

  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }

  /**
   * Product_typesCountOutputType without action
   */
  export type Product_typesCountOutputTypeCountR_tags_product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_product_typesWhereInput
  }


  /**
   * Count Type ProductsCountOutputType
   */

  export type ProductsCountOutputType = {
    integrations: number
    product_files: number
    product_price_history: number
    r_product_tags: number
    r_tags_products: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrations?: boolean | ProductsCountOutputTypeCountIntegrationsArgs
    product_files?: boolean | ProductsCountOutputTypeCountProduct_filesArgs
    product_price_history?: boolean | ProductsCountOutputTypeCountProduct_price_historyArgs
    r_product_tags?: boolean | ProductsCountOutputTypeCountR_product_tagsArgs
    r_tags_products?: boolean | ProductsCountOutputTypeCountR_tags_productsArgs
  }

  // Custom InputTypes
  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: integrationsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountProduct_filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_filesWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountProduct_price_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_price_historyWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountR_product_tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_product_tagsWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountR_tags_productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_productsWhereInput
  }


  /**
   * Count Type ProjectsCountOutputType
   */

  export type ProjectsCountOutputType = {
    r_tags_projects: number
  }

  export type ProjectsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    r_tags_projects?: boolean | ProjectsCountOutputTypeCountR_tags_projectsArgs
  }

  // Custom InputTypes
  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectsCountOutputType
     */
    select?: ProjectsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectsCountOutputType without action
   */
  export type ProjectsCountOutputTypeCountR_tags_projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_projectsWhereInput
  }


  /**
   * Count Type SectionsCountOutputType
   */

  export type SectionsCountOutputType = {
    floors: number
  }

  export type SectionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    floors?: boolean | SectionsCountOutputTypeCountFloorsArgs
  }

  // Custom InputTypes
  /**
   * SectionsCountOutputType without action
   */
  export type SectionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SectionsCountOutputType
     */
    select?: SectionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SectionsCountOutputType without action
   */
  export type SectionsCountOutputTypeCountFloorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: floorsWhereInput
  }


  /**
   * Count Type TagsCountOutputType
   */

  export type TagsCountOutputType = {
    r_product_tags: number
    r_tags_categories: number
    r_tags_objects: number
    r_tags_product_types: number
    r_tags_products: number
    r_tags_projects: number
  }

  export type TagsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    r_product_tags?: boolean | TagsCountOutputTypeCountR_product_tagsArgs
    r_tags_categories?: boolean | TagsCountOutputTypeCountR_tags_categoriesArgs
    r_tags_objects?: boolean | TagsCountOutputTypeCountR_tags_objectsArgs
    r_tags_product_types?: boolean | TagsCountOutputTypeCountR_tags_product_typesArgs
    r_tags_products?: boolean | TagsCountOutputTypeCountR_tags_productsArgs
    r_tags_projects?: boolean | TagsCountOutputTypeCountR_tags_projectsArgs
  }

  // Custom InputTypes
  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsCountOutputType
     */
    select?: TagsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountR_product_tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_product_tagsWhereInput
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountR_tags_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_categoriesWhereInput
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountR_tags_objectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_objectsWhereInput
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountR_tags_product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_product_typesWhereInput
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountR_tags_productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_productsWhereInput
  }

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountR_tags_projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_projectsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model floor_pricing_rules
   */

  export type AggregateFloor_pricing_rules = {
    _count: Floor_pricing_rulesCountAggregateOutputType | null
    _avg: Floor_pricing_rulesAvgAggregateOutputType | null
    _sum: Floor_pricing_rulesSumAggregateOutputType | null
    _min: Floor_pricing_rulesMinAggregateOutputType | null
    _max: Floor_pricing_rulesMaxAggregateOutputType | null
  }

  export type Floor_pricing_rulesAvgAggregateOutputType = {
    id: number | null
    floor_id: number | null
    product_type_id: number | null
    price_per_square_meter: Decimal | null
  }

  export type Floor_pricing_rulesSumAggregateOutputType = {
    id: number | null
    floor_id: number | null
    product_type_id: number | null
    price_per_square_meter: Decimal | null
  }

  export type Floor_pricing_rulesMinAggregateOutputType = {
    id: number | null
    floor_id: number | null
    product_type_id: number | null
    price_per_square_meter: Decimal | null
  }

  export type Floor_pricing_rulesMaxAggregateOutputType = {
    id: number | null
    floor_id: number | null
    product_type_id: number | null
    price_per_square_meter: Decimal | null
  }

  export type Floor_pricing_rulesCountAggregateOutputType = {
    id: number
    floor_id: number
    product_type_id: number
    price_per_square_meter: number
    _all: number
  }


  export type Floor_pricing_rulesAvgAggregateInputType = {
    id?: true
    floor_id?: true
    product_type_id?: true
    price_per_square_meter?: true
  }

  export type Floor_pricing_rulesSumAggregateInputType = {
    id?: true
    floor_id?: true
    product_type_id?: true
    price_per_square_meter?: true
  }

  export type Floor_pricing_rulesMinAggregateInputType = {
    id?: true
    floor_id?: true
    product_type_id?: true
    price_per_square_meter?: true
  }

  export type Floor_pricing_rulesMaxAggregateInputType = {
    id?: true
    floor_id?: true
    product_type_id?: true
    price_per_square_meter?: true
  }

  export type Floor_pricing_rulesCountAggregateInputType = {
    id?: true
    floor_id?: true
    product_type_id?: true
    price_per_square_meter?: true
    _all?: true
  }

  export type Floor_pricing_rulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which floor_pricing_rules to aggregate.
     */
    where?: floor_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floor_pricing_rules to fetch.
     */
    orderBy?: floor_pricing_rulesOrderByWithRelationInput | floor_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: floor_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floor_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floor_pricing_rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned floor_pricing_rules
    **/
    _count?: true | Floor_pricing_rulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Floor_pricing_rulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Floor_pricing_rulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Floor_pricing_rulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Floor_pricing_rulesMaxAggregateInputType
  }

  export type GetFloor_pricing_rulesAggregateType<T extends Floor_pricing_rulesAggregateArgs> = {
        [P in keyof T & keyof AggregateFloor_pricing_rules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFloor_pricing_rules[P]>
      : GetScalarType<T[P], AggregateFloor_pricing_rules[P]>
  }




  export type floor_pricing_rulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: floor_pricing_rulesWhereInput
    orderBy?: floor_pricing_rulesOrderByWithAggregationInput | floor_pricing_rulesOrderByWithAggregationInput[]
    by: Floor_pricing_rulesScalarFieldEnum[] | Floor_pricing_rulesScalarFieldEnum
    having?: floor_pricing_rulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Floor_pricing_rulesCountAggregateInputType | true
    _avg?: Floor_pricing_rulesAvgAggregateInputType
    _sum?: Floor_pricing_rulesSumAggregateInputType
    _min?: Floor_pricing_rulesMinAggregateInputType
    _max?: Floor_pricing_rulesMaxAggregateInputType
  }

  export type Floor_pricing_rulesGroupByOutputType = {
    id: number
    floor_id: number
    product_type_id: number
    price_per_square_meter: Decimal
    _count: Floor_pricing_rulesCountAggregateOutputType | null
    _avg: Floor_pricing_rulesAvgAggregateOutputType | null
    _sum: Floor_pricing_rulesSumAggregateOutputType | null
    _min: Floor_pricing_rulesMinAggregateOutputType | null
    _max: Floor_pricing_rulesMaxAggregateOutputType | null
  }

  type GetFloor_pricing_rulesGroupByPayload<T extends floor_pricing_rulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Floor_pricing_rulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Floor_pricing_rulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Floor_pricing_rulesGroupByOutputType[P]>
            : GetScalarType<T[P], Floor_pricing_rulesGroupByOutputType[P]>
        }
      >
    >


  export type floor_pricing_rulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    floor_id?: boolean
    product_type_id?: boolean
    price_per_square_meter?: boolean
    floors?: boolean | floorsDefaultArgs<ExtArgs>
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["floor_pricing_rules"]>


  export type floor_pricing_rulesSelectScalar = {
    id?: boolean
    floor_id?: boolean
    product_type_id?: boolean
    price_per_square_meter?: boolean
  }

  export type floor_pricing_rulesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    floors?: boolean | floorsDefaultArgs<ExtArgs>
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
  }

  export type $floor_pricing_rulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "floor_pricing_rules"
    objects: {
      floors: Prisma.$floorsPayload<ExtArgs>
      product_types: Prisma.$product_typesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      floor_id: number
      product_type_id: number
      price_per_square_meter: Prisma.Decimal
    }, ExtArgs["result"]["floor_pricing_rules"]>
    composites: {}
  }

  type floor_pricing_rulesGetPayload<S extends boolean | null | undefined | floor_pricing_rulesDefaultArgs> = $Result.GetResult<Prisma.$floor_pricing_rulesPayload, S>

  type floor_pricing_rulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<floor_pricing_rulesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Floor_pricing_rulesCountAggregateInputType | true
    }

  export interface floor_pricing_rulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['floor_pricing_rules'], meta: { name: 'floor_pricing_rules' } }
    /**
     * Find zero or one Floor_pricing_rules that matches the filter.
     * @param {floor_pricing_rulesFindUniqueArgs} args - Arguments to find a Floor_pricing_rules
     * @example
     * // Get one Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends floor_pricing_rulesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, floor_pricing_rulesFindUniqueArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Floor_pricing_rules that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {floor_pricing_rulesFindUniqueOrThrowArgs} args - Arguments to find a Floor_pricing_rules
     * @example
     * // Get one Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends floor_pricing_rulesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, floor_pricing_rulesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Floor_pricing_rules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floor_pricing_rulesFindFirstArgs} args - Arguments to find a Floor_pricing_rules
     * @example
     * // Get one Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends floor_pricing_rulesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, floor_pricing_rulesFindFirstArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Floor_pricing_rules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floor_pricing_rulesFindFirstOrThrowArgs} args - Arguments to find a Floor_pricing_rules
     * @example
     * // Get one Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends floor_pricing_rulesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, floor_pricing_rulesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Floor_pricing_rules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floor_pricing_rulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.findMany()
     * 
     * // Get first 10 Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const floor_pricing_rulesWithIdOnly = await prisma.floor_pricing_rules.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends floor_pricing_rulesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, floor_pricing_rulesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Floor_pricing_rules.
     * @param {floor_pricing_rulesCreateArgs} args - Arguments to create a Floor_pricing_rules.
     * @example
     * // Create one Floor_pricing_rules
     * const Floor_pricing_rules = await prisma.floor_pricing_rules.create({
     *   data: {
     *     // ... data to create a Floor_pricing_rules
     *   }
     * })
     * 
    **/
    create<T extends floor_pricing_rulesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, floor_pricing_rulesCreateArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Floor_pricing_rules.
     * @param {floor_pricing_rulesCreateManyArgs} args - Arguments to create many Floor_pricing_rules.
     * @example
     * // Create many Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends floor_pricing_rulesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, floor_pricing_rulesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Floor_pricing_rules.
     * @param {floor_pricing_rulesDeleteArgs} args - Arguments to delete one Floor_pricing_rules.
     * @example
     * // Delete one Floor_pricing_rules
     * const Floor_pricing_rules = await prisma.floor_pricing_rules.delete({
     *   where: {
     *     // ... filter to delete one Floor_pricing_rules
     *   }
     * })
     * 
    **/
    delete<T extends floor_pricing_rulesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, floor_pricing_rulesDeleteArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Floor_pricing_rules.
     * @param {floor_pricing_rulesUpdateArgs} args - Arguments to update one Floor_pricing_rules.
     * @example
     * // Update one Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends floor_pricing_rulesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, floor_pricing_rulesUpdateArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Floor_pricing_rules.
     * @param {floor_pricing_rulesDeleteManyArgs} args - Arguments to filter Floor_pricing_rules to delete.
     * @example
     * // Delete a few Floor_pricing_rules
     * const { count } = await prisma.floor_pricing_rules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends floor_pricing_rulesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, floor_pricing_rulesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Floor_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floor_pricing_rulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends floor_pricing_rulesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, floor_pricing_rulesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Floor_pricing_rules.
     * @param {floor_pricing_rulesUpsertArgs} args - Arguments to update or create a Floor_pricing_rules.
     * @example
     * // Update or create a Floor_pricing_rules
     * const floor_pricing_rules = await prisma.floor_pricing_rules.upsert({
     *   create: {
     *     // ... data to create a Floor_pricing_rules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Floor_pricing_rules we want to update
     *   }
     * })
    **/
    upsert<T extends floor_pricing_rulesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, floor_pricing_rulesUpsertArgs<ExtArgs>>
    ): Prisma__floor_pricing_rulesClient<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Floor_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floor_pricing_rulesCountArgs} args - Arguments to filter Floor_pricing_rules to count.
     * @example
     * // Count the number of Floor_pricing_rules
     * const count = await prisma.floor_pricing_rules.count({
     *   where: {
     *     // ... the filter for the Floor_pricing_rules we want to count
     *   }
     * })
    **/
    count<T extends floor_pricing_rulesCountArgs>(
      args?: Subset<T, floor_pricing_rulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Floor_pricing_rulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Floor_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Floor_pricing_rulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Floor_pricing_rulesAggregateArgs>(args: Subset<T, Floor_pricing_rulesAggregateArgs>): Prisma.PrismaPromise<GetFloor_pricing_rulesAggregateType<T>>

    /**
     * Group by Floor_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floor_pricing_rulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends floor_pricing_rulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: floor_pricing_rulesGroupByArgs['orderBy'] }
        : { orderBy?: floor_pricing_rulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, floor_pricing_rulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFloor_pricing_rulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the floor_pricing_rules model
   */
  readonly fields: floor_pricing_rulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for floor_pricing_rules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__floor_pricing_rulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    floors<T extends floorsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, floorsDefaultArgs<ExtArgs>>): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product_types<T extends product_typesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_typesDefaultArgs<ExtArgs>>): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the floor_pricing_rules model
   */ 
  interface floor_pricing_rulesFieldRefs {
    readonly id: FieldRef<"floor_pricing_rules", 'Int'>
    readonly floor_id: FieldRef<"floor_pricing_rules", 'Int'>
    readonly product_type_id: FieldRef<"floor_pricing_rules", 'Int'>
    readonly price_per_square_meter: FieldRef<"floor_pricing_rules", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * floor_pricing_rules findUnique
   */
  export type floor_pricing_rulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which floor_pricing_rules to fetch.
     */
    where: floor_pricing_rulesWhereUniqueInput
  }

  /**
   * floor_pricing_rules findUniqueOrThrow
   */
  export type floor_pricing_rulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which floor_pricing_rules to fetch.
     */
    where: floor_pricing_rulesWhereUniqueInput
  }

  /**
   * floor_pricing_rules findFirst
   */
  export type floor_pricing_rulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which floor_pricing_rules to fetch.
     */
    where?: floor_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floor_pricing_rules to fetch.
     */
    orderBy?: floor_pricing_rulesOrderByWithRelationInput | floor_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for floor_pricing_rules.
     */
    cursor?: floor_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floor_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floor_pricing_rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of floor_pricing_rules.
     */
    distinct?: Floor_pricing_rulesScalarFieldEnum | Floor_pricing_rulesScalarFieldEnum[]
  }

  /**
   * floor_pricing_rules findFirstOrThrow
   */
  export type floor_pricing_rulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which floor_pricing_rules to fetch.
     */
    where?: floor_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floor_pricing_rules to fetch.
     */
    orderBy?: floor_pricing_rulesOrderByWithRelationInput | floor_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for floor_pricing_rules.
     */
    cursor?: floor_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floor_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floor_pricing_rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of floor_pricing_rules.
     */
    distinct?: Floor_pricing_rulesScalarFieldEnum | Floor_pricing_rulesScalarFieldEnum[]
  }

  /**
   * floor_pricing_rules findMany
   */
  export type floor_pricing_rulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which floor_pricing_rules to fetch.
     */
    where?: floor_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floor_pricing_rules to fetch.
     */
    orderBy?: floor_pricing_rulesOrderByWithRelationInput | floor_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing floor_pricing_rules.
     */
    cursor?: floor_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floor_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floor_pricing_rules.
     */
    skip?: number
    distinct?: Floor_pricing_rulesScalarFieldEnum | Floor_pricing_rulesScalarFieldEnum[]
  }

  /**
   * floor_pricing_rules create
   */
  export type floor_pricing_rulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * The data needed to create a floor_pricing_rules.
     */
    data: XOR<floor_pricing_rulesCreateInput, floor_pricing_rulesUncheckedCreateInput>
  }

  /**
   * floor_pricing_rules createMany
   */
  export type floor_pricing_rulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many floor_pricing_rules.
     */
    data: floor_pricing_rulesCreateManyInput | floor_pricing_rulesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * floor_pricing_rules update
   */
  export type floor_pricing_rulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * The data needed to update a floor_pricing_rules.
     */
    data: XOR<floor_pricing_rulesUpdateInput, floor_pricing_rulesUncheckedUpdateInput>
    /**
     * Choose, which floor_pricing_rules to update.
     */
    where: floor_pricing_rulesWhereUniqueInput
  }

  /**
   * floor_pricing_rules updateMany
   */
  export type floor_pricing_rulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update floor_pricing_rules.
     */
    data: XOR<floor_pricing_rulesUpdateManyMutationInput, floor_pricing_rulesUncheckedUpdateManyInput>
    /**
     * Filter which floor_pricing_rules to update
     */
    where?: floor_pricing_rulesWhereInput
  }

  /**
   * floor_pricing_rules upsert
   */
  export type floor_pricing_rulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * The filter to search for the floor_pricing_rules to update in case it exists.
     */
    where: floor_pricing_rulesWhereUniqueInput
    /**
     * In case the floor_pricing_rules found by the `where` argument doesn't exist, create a new floor_pricing_rules with this data.
     */
    create: XOR<floor_pricing_rulesCreateInput, floor_pricing_rulesUncheckedCreateInput>
    /**
     * In case the floor_pricing_rules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<floor_pricing_rulesUpdateInput, floor_pricing_rulesUncheckedUpdateInput>
  }

  /**
   * floor_pricing_rules delete
   */
  export type floor_pricing_rulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter which floor_pricing_rules to delete.
     */
    where: floor_pricing_rulesWhereUniqueInput
  }

  /**
   * floor_pricing_rules deleteMany
   */
  export type floor_pricing_rulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which floor_pricing_rules to delete
     */
    where?: floor_pricing_rulesWhereInput
  }

  /**
   * floor_pricing_rules without action
   */
  export type floor_pricing_rulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
  }


  /**
   * Model floors
   */

  export type AggregateFloors = {
    _count: FloorsCountAggregateOutputType | null
    _avg: FloorsAvgAggregateOutputType | null
    _sum: FloorsSumAggregateOutputType | null
    _min: FloorsMinAggregateOutputType | null
    _max: FloorsMaxAggregateOutputType | null
  }

  export type FloorsAvgAggregateOutputType = {
    id: number | null
    section_id: number | null
  }

  export type FloorsSumAggregateOutputType = {
    id: number | null
    section_id: number | null
  }

  export type FloorsMinAggregateOutputType = {
    id: number | null
    number: string | null
    section_id: number | null
  }

  export type FloorsMaxAggregateOutputType = {
    id: number | null
    number: string | null
    section_id: number | null
  }

  export type FloorsCountAggregateOutputType = {
    id: number
    number: number
    section_id: number
    _all: number
  }


  export type FloorsAvgAggregateInputType = {
    id?: true
    section_id?: true
  }

  export type FloorsSumAggregateInputType = {
    id?: true
    section_id?: true
  }

  export type FloorsMinAggregateInputType = {
    id?: true
    number?: true
    section_id?: true
  }

  export type FloorsMaxAggregateInputType = {
    id?: true
    number?: true
    section_id?: true
  }

  export type FloorsCountAggregateInputType = {
    id?: true
    number?: true
    section_id?: true
    _all?: true
  }

  export type FloorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which floors to aggregate.
     */
    where?: floorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floors to fetch.
     */
    orderBy?: floorsOrderByWithRelationInput | floorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: floorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned floors
    **/
    _count?: true | FloorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FloorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FloorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FloorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FloorsMaxAggregateInputType
  }

  export type GetFloorsAggregateType<T extends FloorsAggregateArgs> = {
        [P in keyof T & keyof AggregateFloors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFloors[P]>
      : GetScalarType<T[P], AggregateFloors[P]>
  }




  export type floorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: floorsWhereInput
    orderBy?: floorsOrderByWithAggregationInput | floorsOrderByWithAggregationInput[]
    by: FloorsScalarFieldEnum[] | FloorsScalarFieldEnum
    having?: floorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FloorsCountAggregateInputType | true
    _avg?: FloorsAvgAggregateInputType
    _sum?: FloorsSumAggregateInputType
    _min?: FloorsMinAggregateInputType
    _max?: FloorsMaxAggregateInputType
  }

  export type FloorsGroupByOutputType = {
    id: number
    number: string
    section_id: number
    _count: FloorsCountAggregateOutputType | null
    _avg: FloorsAvgAggregateOutputType | null
    _sum: FloorsSumAggregateOutputType | null
    _min: FloorsMinAggregateOutputType | null
    _max: FloorsMaxAggregateOutputType | null
  }

  type GetFloorsGroupByPayload<T extends floorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FloorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FloorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FloorsGroupByOutputType[P]>
            : GetScalarType<T[P], FloorsGroupByOutputType[P]>
        }
      >
    >


  export type floorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    section_id?: boolean
    floor_pricing_rules?: boolean | floors$floor_pricing_rulesArgs<ExtArgs>
    sections?: boolean | sectionsDefaultArgs<ExtArgs>
    products?: boolean | floors$productsArgs<ExtArgs>
    _count?: boolean | FloorsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["floors"]>


  export type floorsSelectScalar = {
    id?: boolean
    number?: boolean
    section_id?: boolean
  }

  export type floorsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    floor_pricing_rules?: boolean | floors$floor_pricing_rulesArgs<ExtArgs>
    sections?: boolean | sectionsDefaultArgs<ExtArgs>
    products?: boolean | floors$productsArgs<ExtArgs>
    _count?: boolean | FloorsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $floorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "floors"
    objects: {
      floor_pricing_rules: Prisma.$floor_pricing_rulesPayload<ExtArgs>[]
      sections: Prisma.$sectionsPayload<ExtArgs>
      products: Prisma.$productsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      section_id: number
    }, ExtArgs["result"]["floors"]>
    composites: {}
  }

  type floorsGetPayload<S extends boolean | null | undefined | floorsDefaultArgs> = $Result.GetResult<Prisma.$floorsPayload, S>

  type floorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<floorsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FloorsCountAggregateInputType | true
    }

  export interface floorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['floors'], meta: { name: 'floors' } }
    /**
     * Find zero or one Floors that matches the filter.
     * @param {floorsFindUniqueArgs} args - Arguments to find a Floors
     * @example
     * // Get one Floors
     * const floors = await prisma.floors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends floorsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, floorsFindUniqueArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Floors that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {floorsFindUniqueOrThrowArgs} args - Arguments to find a Floors
     * @example
     * // Get one Floors
     * const floors = await prisma.floors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends floorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, floorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Floors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floorsFindFirstArgs} args - Arguments to find a Floors
     * @example
     * // Get one Floors
     * const floors = await prisma.floors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends floorsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, floorsFindFirstArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Floors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floorsFindFirstOrThrowArgs} args - Arguments to find a Floors
     * @example
     * // Get one Floors
     * const floors = await prisma.floors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends floorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, floorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Floors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floorsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Floors
     * const floors = await prisma.floors.findMany()
     * 
     * // Get first 10 Floors
     * const floors = await prisma.floors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const floorsWithIdOnly = await prisma.floors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends floorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, floorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Floors.
     * @param {floorsCreateArgs} args - Arguments to create a Floors.
     * @example
     * // Create one Floors
     * const Floors = await prisma.floors.create({
     *   data: {
     *     // ... data to create a Floors
     *   }
     * })
     * 
    **/
    create<T extends floorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, floorsCreateArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Floors.
     * @param {floorsCreateManyArgs} args - Arguments to create many Floors.
     * @example
     * // Create many Floors
     * const floors = await prisma.floors.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends floorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, floorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Floors.
     * @param {floorsDeleteArgs} args - Arguments to delete one Floors.
     * @example
     * // Delete one Floors
     * const Floors = await prisma.floors.delete({
     *   where: {
     *     // ... filter to delete one Floors
     *   }
     * })
     * 
    **/
    delete<T extends floorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, floorsDeleteArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Floors.
     * @param {floorsUpdateArgs} args - Arguments to update one Floors.
     * @example
     * // Update one Floors
     * const floors = await prisma.floors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends floorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, floorsUpdateArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Floors.
     * @param {floorsDeleteManyArgs} args - Arguments to filter Floors to delete.
     * @example
     * // Delete a few Floors
     * const { count } = await prisma.floors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends floorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, floorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Floors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Floors
     * const floors = await prisma.floors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends floorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, floorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Floors.
     * @param {floorsUpsertArgs} args - Arguments to update or create a Floors.
     * @example
     * // Update or create a Floors
     * const floors = await prisma.floors.upsert({
     *   create: {
     *     // ... data to create a Floors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Floors we want to update
     *   }
     * })
    **/
    upsert<T extends floorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, floorsUpsertArgs<ExtArgs>>
    ): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Floors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floorsCountArgs} args - Arguments to filter Floors to count.
     * @example
     * // Count the number of Floors
     * const count = await prisma.floors.count({
     *   where: {
     *     // ... the filter for the Floors we want to count
     *   }
     * })
    **/
    count<T extends floorsCountArgs>(
      args?: Subset<T, floorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FloorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Floors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FloorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FloorsAggregateArgs>(args: Subset<T, FloorsAggregateArgs>): Prisma.PrismaPromise<GetFloorsAggregateType<T>>

    /**
     * Group by Floors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {floorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends floorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: floorsGroupByArgs['orderBy'] }
        : { orderBy?: floorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, floorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFloorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the floors model
   */
  readonly fields: floorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for floors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__floorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    floor_pricing_rules<T extends floors$floor_pricing_rulesArgs<ExtArgs> = {}>(args?: Subset<T, floors$floor_pricing_rulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'findMany'> | Null>;

    sections<T extends sectionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, sectionsDefaultArgs<ExtArgs>>): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    products<T extends floors$productsArgs<ExtArgs> = {}>(args?: Subset<T, floors$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the floors model
   */ 
  interface floorsFieldRefs {
    readonly id: FieldRef<"floors", 'Int'>
    readonly number: FieldRef<"floors", 'String'>
    readonly section_id: FieldRef<"floors", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * floors findUnique
   */
  export type floorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * Filter, which floors to fetch.
     */
    where: floorsWhereUniqueInput
  }

  /**
   * floors findUniqueOrThrow
   */
  export type floorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * Filter, which floors to fetch.
     */
    where: floorsWhereUniqueInput
  }

  /**
   * floors findFirst
   */
  export type floorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * Filter, which floors to fetch.
     */
    where?: floorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floors to fetch.
     */
    orderBy?: floorsOrderByWithRelationInput | floorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for floors.
     */
    cursor?: floorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of floors.
     */
    distinct?: FloorsScalarFieldEnum | FloorsScalarFieldEnum[]
  }

  /**
   * floors findFirstOrThrow
   */
  export type floorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * Filter, which floors to fetch.
     */
    where?: floorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floors to fetch.
     */
    orderBy?: floorsOrderByWithRelationInput | floorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for floors.
     */
    cursor?: floorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of floors.
     */
    distinct?: FloorsScalarFieldEnum | FloorsScalarFieldEnum[]
  }

  /**
   * floors findMany
   */
  export type floorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * Filter, which floors to fetch.
     */
    where?: floorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of floors to fetch.
     */
    orderBy?: floorsOrderByWithRelationInput | floorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing floors.
     */
    cursor?: floorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` floors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` floors.
     */
    skip?: number
    distinct?: FloorsScalarFieldEnum | FloorsScalarFieldEnum[]
  }

  /**
   * floors create
   */
  export type floorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * The data needed to create a floors.
     */
    data: XOR<floorsCreateInput, floorsUncheckedCreateInput>
  }

  /**
   * floors createMany
   */
  export type floorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many floors.
     */
    data: floorsCreateManyInput | floorsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * floors update
   */
  export type floorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * The data needed to update a floors.
     */
    data: XOR<floorsUpdateInput, floorsUncheckedUpdateInput>
    /**
     * Choose, which floors to update.
     */
    where: floorsWhereUniqueInput
  }

  /**
   * floors updateMany
   */
  export type floorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update floors.
     */
    data: XOR<floorsUpdateManyMutationInput, floorsUncheckedUpdateManyInput>
    /**
     * Filter which floors to update
     */
    where?: floorsWhereInput
  }

  /**
   * floors upsert
   */
  export type floorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * The filter to search for the floors to update in case it exists.
     */
    where: floorsWhereUniqueInput
    /**
     * In case the floors found by the `where` argument doesn't exist, create a new floors with this data.
     */
    create: XOR<floorsCreateInput, floorsUncheckedCreateInput>
    /**
     * In case the floors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<floorsUpdateInput, floorsUncheckedUpdateInput>
  }

  /**
   * floors delete
   */
  export type floorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    /**
     * Filter which floors to delete.
     */
    where: floorsWhereUniqueInput
  }

  /**
   * floors deleteMany
   */
  export type floorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which floors to delete
     */
    where?: floorsWhereInput
  }

  /**
   * floors.floor_pricing_rules
   */
  export type floors$floor_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    where?: floor_pricing_rulesWhereInput
    orderBy?: floor_pricing_rulesOrderByWithRelationInput | floor_pricing_rulesOrderByWithRelationInput[]
    cursor?: floor_pricing_rulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Floor_pricing_rulesScalarFieldEnum | Floor_pricing_rulesScalarFieldEnum[]
  }

  /**
   * floors.products
   */
  export type floors$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * floors without action
   */
  export type floorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
  }


  /**
   * Model integration_sources
   */

  export type AggregateIntegration_sources = {
    _count: Integration_sourcesCountAggregateOutputType | null
    _avg: Integration_sourcesAvgAggregateOutputType | null
    _sum: Integration_sourcesSumAggregateOutputType | null
    _min: Integration_sourcesMinAggregateOutputType | null
    _max: Integration_sourcesMaxAggregateOutputType | null
  }

  export type Integration_sourcesAvgAggregateOutputType = {
    id: number | null
  }

  export type Integration_sourcesSumAggregateOutputType = {
    id: number | null
  }

  export type Integration_sourcesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Integration_sourcesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type Integration_sourcesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type Integration_sourcesAvgAggregateInputType = {
    id?: true
  }

  export type Integration_sourcesSumAggregateInputType = {
    id?: true
  }

  export type Integration_sourcesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type Integration_sourcesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type Integration_sourcesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type Integration_sourcesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which integration_sources to aggregate.
     */
    where?: integration_sourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integration_sources to fetch.
     */
    orderBy?: integration_sourcesOrderByWithRelationInput | integration_sourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: integration_sourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integration_sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integration_sources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned integration_sources
    **/
    _count?: true | Integration_sourcesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Integration_sourcesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Integration_sourcesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Integration_sourcesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Integration_sourcesMaxAggregateInputType
  }

  export type GetIntegration_sourcesAggregateType<T extends Integration_sourcesAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegration_sources]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegration_sources[P]>
      : GetScalarType<T[P], AggregateIntegration_sources[P]>
  }




  export type integration_sourcesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: integration_sourcesWhereInput
    orderBy?: integration_sourcesOrderByWithAggregationInput | integration_sourcesOrderByWithAggregationInput[]
    by: Integration_sourcesScalarFieldEnum[] | Integration_sourcesScalarFieldEnum
    having?: integration_sourcesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Integration_sourcesCountAggregateInputType | true
    _avg?: Integration_sourcesAvgAggregateInputType
    _sum?: Integration_sourcesSumAggregateInputType
    _min?: Integration_sourcesMinAggregateInputType
    _max?: Integration_sourcesMaxAggregateInputType
  }

  export type Integration_sourcesGroupByOutputType = {
    id: number
    name: string
    _count: Integration_sourcesCountAggregateOutputType | null
    _avg: Integration_sourcesAvgAggregateOutputType | null
    _sum: Integration_sourcesSumAggregateOutputType | null
    _min: Integration_sourcesMinAggregateOutputType | null
    _max: Integration_sourcesMaxAggregateOutputType | null
  }

  type GetIntegration_sourcesGroupByPayload<T extends integration_sourcesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Integration_sourcesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Integration_sourcesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Integration_sourcesGroupByOutputType[P]>
            : GetScalarType<T[P], Integration_sourcesGroupByOutputType[P]>
        }
      >
    >


  export type integration_sourcesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    integrations?: boolean | integration_sources$integrationsArgs<ExtArgs>
    _count?: boolean | Integration_sourcesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration_sources"]>


  export type integration_sourcesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type integration_sourcesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrations?: boolean | integration_sources$integrationsArgs<ExtArgs>
    _count?: boolean | Integration_sourcesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $integration_sourcesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "integration_sources"
    objects: {
      integrations: Prisma.$integrationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["integration_sources"]>
    composites: {}
  }

  type integration_sourcesGetPayload<S extends boolean | null | undefined | integration_sourcesDefaultArgs> = $Result.GetResult<Prisma.$integration_sourcesPayload, S>

  type integration_sourcesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<integration_sourcesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Integration_sourcesCountAggregateInputType | true
    }

  export interface integration_sourcesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['integration_sources'], meta: { name: 'integration_sources' } }
    /**
     * Find zero or one Integration_sources that matches the filter.
     * @param {integration_sourcesFindUniqueArgs} args - Arguments to find a Integration_sources
     * @example
     * // Get one Integration_sources
     * const integration_sources = await prisma.integration_sources.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends integration_sourcesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, integration_sourcesFindUniqueArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Integration_sources that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {integration_sourcesFindUniqueOrThrowArgs} args - Arguments to find a Integration_sources
     * @example
     * // Get one Integration_sources
     * const integration_sources = await prisma.integration_sources.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends integration_sourcesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, integration_sourcesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Integration_sources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integration_sourcesFindFirstArgs} args - Arguments to find a Integration_sources
     * @example
     * // Get one Integration_sources
     * const integration_sources = await prisma.integration_sources.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends integration_sourcesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, integration_sourcesFindFirstArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Integration_sources that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integration_sourcesFindFirstOrThrowArgs} args - Arguments to find a Integration_sources
     * @example
     * // Get one Integration_sources
     * const integration_sources = await prisma.integration_sources.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends integration_sourcesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, integration_sourcesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Integration_sources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integration_sourcesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Integration_sources
     * const integration_sources = await prisma.integration_sources.findMany()
     * 
     * // Get first 10 Integration_sources
     * const integration_sources = await prisma.integration_sources.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integration_sourcesWithIdOnly = await prisma.integration_sources.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends integration_sourcesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, integration_sourcesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Integration_sources.
     * @param {integration_sourcesCreateArgs} args - Arguments to create a Integration_sources.
     * @example
     * // Create one Integration_sources
     * const Integration_sources = await prisma.integration_sources.create({
     *   data: {
     *     // ... data to create a Integration_sources
     *   }
     * })
     * 
    **/
    create<T extends integration_sourcesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, integration_sourcesCreateArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Integration_sources.
     * @param {integration_sourcesCreateManyArgs} args - Arguments to create many Integration_sources.
     * @example
     * // Create many Integration_sources
     * const integration_sources = await prisma.integration_sources.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends integration_sourcesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, integration_sourcesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Integration_sources.
     * @param {integration_sourcesDeleteArgs} args - Arguments to delete one Integration_sources.
     * @example
     * // Delete one Integration_sources
     * const Integration_sources = await prisma.integration_sources.delete({
     *   where: {
     *     // ... filter to delete one Integration_sources
     *   }
     * })
     * 
    **/
    delete<T extends integration_sourcesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, integration_sourcesDeleteArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Integration_sources.
     * @param {integration_sourcesUpdateArgs} args - Arguments to update one Integration_sources.
     * @example
     * // Update one Integration_sources
     * const integration_sources = await prisma.integration_sources.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends integration_sourcesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, integration_sourcesUpdateArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Integration_sources.
     * @param {integration_sourcesDeleteManyArgs} args - Arguments to filter Integration_sources to delete.
     * @example
     * // Delete a few Integration_sources
     * const { count } = await prisma.integration_sources.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends integration_sourcesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, integration_sourcesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integration_sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integration_sourcesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Integration_sources
     * const integration_sources = await prisma.integration_sources.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends integration_sourcesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, integration_sourcesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Integration_sources.
     * @param {integration_sourcesUpsertArgs} args - Arguments to update or create a Integration_sources.
     * @example
     * // Update or create a Integration_sources
     * const integration_sources = await prisma.integration_sources.upsert({
     *   create: {
     *     // ... data to create a Integration_sources
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Integration_sources we want to update
     *   }
     * })
    **/
    upsert<T extends integration_sourcesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, integration_sourcesUpsertArgs<ExtArgs>>
    ): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Integration_sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integration_sourcesCountArgs} args - Arguments to filter Integration_sources to count.
     * @example
     * // Count the number of Integration_sources
     * const count = await prisma.integration_sources.count({
     *   where: {
     *     // ... the filter for the Integration_sources we want to count
     *   }
     * })
    **/
    count<T extends integration_sourcesCountArgs>(
      args?: Subset<T, integration_sourcesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Integration_sourcesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Integration_sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Integration_sourcesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Integration_sourcesAggregateArgs>(args: Subset<T, Integration_sourcesAggregateArgs>): Prisma.PrismaPromise<GetIntegration_sourcesAggregateType<T>>

    /**
     * Group by Integration_sources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integration_sourcesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends integration_sourcesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: integration_sourcesGroupByArgs['orderBy'] }
        : { orderBy?: integration_sourcesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, integration_sourcesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegration_sourcesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the integration_sources model
   */
  readonly fields: integration_sourcesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for integration_sources.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__integration_sourcesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    integrations<T extends integration_sources$integrationsArgs<ExtArgs> = {}>(args?: Subset<T, integration_sources$integrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the integration_sources model
   */ 
  interface integration_sourcesFieldRefs {
    readonly id: FieldRef<"integration_sources", 'Int'>
    readonly name: FieldRef<"integration_sources", 'String'>
  }
    

  // Custom InputTypes
  /**
   * integration_sources findUnique
   */
  export type integration_sourcesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * Filter, which integration_sources to fetch.
     */
    where: integration_sourcesWhereUniqueInput
  }

  /**
   * integration_sources findUniqueOrThrow
   */
  export type integration_sourcesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * Filter, which integration_sources to fetch.
     */
    where: integration_sourcesWhereUniqueInput
  }

  /**
   * integration_sources findFirst
   */
  export type integration_sourcesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * Filter, which integration_sources to fetch.
     */
    where?: integration_sourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integration_sources to fetch.
     */
    orderBy?: integration_sourcesOrderByWithRelationInput | integration_sourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for integration_sources.
     */
    cursor?: integration_sourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integration_sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integration_sources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of integration_sources.
     */
    distinct?: Integration_sourcesScalarFieldEnum | Integration_sourcesScalarFieldEnum[]
  }

  /**
   * integration_sources findFirstOrThrow
   */
  export type integration_sourcesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * Filter, which integration_sources to fetch.
     */
    where?: integration_sourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integration_sources to fetch.
     */
    orderBy?: integration_sourcesOrderByWithRelationInput | integration_sourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for integration_sources.
     */
    cursor?: integration_sourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integration_sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integration_sources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of integration_sources.
     */
    distinct?: Integration_sourcesScalarFieldEnum | Integration_sourcesScalarFieldEnum[]
  }

  /**
   * integration_sources findMany
   */
  export type integration_sourcesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * Filter, which integration_sources to fetch.
     */
    where?: integration_sourcesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integration_sources to fetch.
     */
    orderBy?: integration_sourcesOrderByWithRelationInput | integration_sourcesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing integration_sources.
     */
    cursor?: integration_sourcesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integration_sources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integration_sources.
     */
    skip?: number
    distinct?: Integration_sourcesScalarFieldEnum | Integration_sourcesScalarFieldEnum[]
  }

  /**
   * integration_sources create
   */
  export type integration_sourcesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * The data needed to create a integration_sources.
     */
    data: XOR<integration_sourcesCreateInput, integration_sourcesUncheckedCreateInput>
  }

  /**
   * integration_sources createMany
   */
  export type integration_sourcesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many integration_sources.
     */
    data: integration_sourcesCreateManyInput | integration_sourcesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * integration_sources update
   */
  export type integration_sourcesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * The data needed to update a integration_sources.
     */
    data: XOR<integration_sourcesUpdateInput, integration_sourcesUncheckedUpdateInput>
    /**
     * Choose, which integration_sources to update.
     */
    where: integration_sourcesWhereUniqueInput
  }

  /**
   * integration_sources updateMany
   */
  export type integration_sourcesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update integration_sources.
     */
    data: XOR<integration_sourcesUpdateManyMutationInput, integration_sourcesUncheckedUpdateManyInput>
    /**
     * Filter which integration_sources to update
     */
    where?: integration_sourcesWhereInput
  }

  /**
   * integration_sources upsert
   */
  export type integration_sourcesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * The filter to search for the integration_sources to update in case it exists.
     */
    where: integration_sourcesWhereUniqueInput
    /**
     * In case the integration_sources found by the `where` argument doesn't exist, create a new integration_sources with this data.
     */
    create: XOR<integration_sourcesCreateInput, integration_sourcesUncheckedCreateInput>
    /**
     * In case the integration_sources was found with the provided `where` argument, update it with this data.
     */
    update: XOR<integration_sourcesUpdateInput, integration_sourcesUncheckedUpdateInput>
  }

  /**
   * integration_sources delete
   */
  export type integration_sourcesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
    /**
     * Filter which integration_sources to delete.
     */
    where: integration_sourcesWhereUniqueInput
  }

  /**
   * integration_sources deleteMany
   */
  export type integration_sourcesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which integration_sources to delete
     */
    where?: integration_sourcesWhereInput
  }

  /**
   * integration_sources.integrations
   */
  export type integration_sources$integrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    where?: integrationsWhereInput
    orderBy?: integrationsOrderByWithRelationInput | integrationsOrderByWithRelationInput[]
    cursor?: integrationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationsScalarFieldEnum | IntegrationsScalarFieldEnum[]
  }

  /**
   * integration_sources without action
   */
  export type integration_sourcesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integration_sources
     */
    select?: integration_sourcesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integration_sourcesInclude<ExtArgs> | null
  }


  /**
   * Model integrations
   */

  export type AggregateIntegrations = {
    _count: IntegrationsCountAggregateOutputType | null
    _avg: IntegrationsAvgAggregateOutputType | null
    _sum: IntegrationsSumAggregateOutputType | null
    _min: IntegrationsMinAggregateOutputType | null
    _max: IntegrationsMaxAggregateOutputType | null
  }

  export type IntegrationsAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    source_id: number | null
  }

  export type IntegrationsSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    source_id: number | null
  }

  export type IntegrationsMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    source_id: number | null
    source_product_id: string | null
  }

  export type IntegrationsMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    source_id: number | null
    source_product_id: string | null
  }

  export type IntegrationsCountAggregateOutputType = {
    id: number
    product_id: number
    source_id: number
    source_product_id: number
    _all: number
  }


  export type IntegrationsAvgAggregateInputType = {
    id?: true
    product_id?: true
    source_id?: true
  }

  export type IntegrationsSumAggregateInputType = {
    id?: true
    product_id?: true
    source_id?: true
  }

  export type IntegrationsMinAggregateInputType = {
    id?: true
    product_id?: true
    source_id?: true
    source_product_id?: true
  }

  export type IntegrationsMaxAggregateInputType = {
    id?: true
    product_id?: true
    source_id?: true
    source_product_id?: true
  }

  export type IntegrationsCountAggregateInputType = {
    id?: true
    product_id?: true
    source_id?: true
    source_product_id?: true
    _all?: true
  }

  export type IntegrationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which integrations to aggregate.
     */
    where?: integrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integrations to fetch.
     */
    orderBy?: integrationsOrderByWithRelationInput | integrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: integrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned integrations
    **/
    _count?: true | IntegrationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IntegrationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IntegrationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationsMaxAggregateInputType
  }

  export type GetIntegrationsAggregateType<T extends IntegrationsAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrations[P]>
      : GetScalarType<T[P], AggregateIntegrations[P]>
  }




  export type integrationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: integrationsWhereInput
    orderBy?: integrationsOrderByWithAggregationInput | integrationsOrderByWithAggregationInput[]
    by: IntegrationsScalarFieldEnum[] | IntegrationsScalarFieldEnum
    having?: integrationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationsCountAggregateInputType | true
    _avg?: IntegrationsAvgAggregateInputType
    _sum?: IntegrationsSumAggregateInputType
    _min?: IntegrationsMinAggregateInputType
    _max?: IntegrationsMaxAggregateInputType
  }

  export type IntegrationsGroupByOutputType = {
    id: number
    product_id: number
    source_id: number
    source_product_id: string
    _count: IntegrationsCountAggregateOutputType | null
    _avg: IntegrationsAvgAggregateOutputType | null
    _sum: IntegrationsSumAggregateOutputType | null
    _min: IntegrationsMinAggregateOutputType | null
    _max: IntegrationsMaxAggregateOutputType | null
  }

  type GetIntegrationsGroupByPayload<T extends integrationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationsGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationsGroupByOutputType[P]>
        }
      >
    >


  export type integrationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    source_id?: boolean
    source_product_id?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
    integration_sources?: boolean | integration_sourcesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrations"]>


  export type integrationsSelectScalar = {
    id?: boolean
    product_id?: boolean
    source_id?: boolean
    source_product_id?: boolean
  }

  export type integrationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
    integration_sources?: boolean | integration_sourcesDefaultArgs<ExtArgs>
  }

  export type $integrationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "integrations"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
      integration_sources: Prisma.$integration_sourcesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      source_id: number
      source_product_id: string
    }, ExtArgs["result"]["integrations"]>
    composites: {}
  }

  type integrationsGetPayload<S extends boolean | null | undefined | integrationsDefaultArgs> = $Result.GetResult<Prisma.$integrationsPayload, S>

  type integrationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<integrationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IntegrationsCountAggregateInputType | true
    }

  export interface integrationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['integrations'], meta: { name: 'integrations' } }
    /**
     * Find zero or one Integrations that matches the filter.
     * @param {integrationsFindUniqueArgs} args - Arguments to find a Integrations
     * @example
     * // Get one Integrations
     * const integrations = await prisma.integrations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends integrationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, integrationsFindUniqueArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Integrations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {integrationsFindUniqueOrThrowArgs} args - Arguments to find a Integrations
     * @example
     * // Get one Integrations
     * const integrations = await prisma.integrations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends integrationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, integrationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Integrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integrationsFindFirstArgs} args - Arguments to find a Integrations
     * @example
     * // Get one Integrations
     * const integrations = await prisma.integrations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends integrationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, integrationsFindFirstArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Integrations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integrationsFindFirstOrThrowArgs} args - Arguments to find a Integrations
     * @example
     * // Get one Integrations
     * const integrations = await prisma.integrations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends integrationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, integrationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Integrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integrationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Integrations
     * const integrations = await prisma.integrations.findMany()
     * 
     * // Get first 10 Integrations
     * const integrations = await prisma.integrations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationsWithIdOnly = await prisma.integrations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends integrationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, integrationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Integrations.
     * @param {integrationsCreateArgs} args - Arguments to create a Integrations.
     * @example
     * // Create one Integrations
     * const Integrations = await prisma.integrations.create({
     *   data: {
     *     // ... data to create a Integrations
     *   }
     * })
     * 
    **/
    create<T extends integrationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, integrationsCreateArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Integrations.
     * @param {integrationsCreateManyArgs} args - Arguments to create many Integrations.
     * @example
     * // Create many Integrations
     * const integrations = await prisma.integrations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends integrationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, integrationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Integrations.
     * @param {integrationsDeleteArgs} args - Arguments to delete one Integrations.
     * @example
     * // Delete one Integrations
     * const Integrations = await prisma.integrations.delete({
     *   where: {
     *     // ... filter to delete one Integrations
     *   }
     * })
     * 
    **/
    delete<T extends integrationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, integrationsDeleteArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Integrations.
     * @param {integrationsUpdateArgs} args - Arguments to update one Integrations.
     * @example
     * // Update one Integrations
     * const integrations = await prisma.integrations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends integrationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, integrationsUpdateArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Integrations.
     * @param {integrationsDeleteManyArgs} args - Arguments to filter Integrations to delete.
     * @example
     * // Delete a few Integrations
     * const { count } = await prisma.integrations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends integrationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, integrationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integrationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Integrations
     * const integrations = await prisma.integrations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends integrationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, integrationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Integrations.
     * @param {integrationsUpsertArgs} args - Arguments to update or create a Integrations.
     * @example
     * // Update or create a Integrations
     * const integrations = await prisma.integrations.upsert({
     *   create: {
     *     // ... data to create a Integrations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Integrations we want to update
     *   }
     * })
    **/
    upsert<T extends integrationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, integrationsUpsertArgs<ExtArgs>>
    ): Prisma__integrationsClient<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integrationsCountArgs} args - Arguments to filter Integrations to count.
     * @example
     * // Count the number of Integrations
     * const count = await prisma.integrations.count({
     *   where: {
     *     // ... the filter for the Integrations we want to count
     *   }
     * })
    **/
    count<T extends integrationsCountArgs>(
      args?: Subset<T, integrationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationsAggregateArgs>(args: Subset<T, IntegrationsAggregateArgs>): Prisma.PrismaPromise<GetIntegrationsAggregateType<T>>

    /**
     * Group by Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {integrationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends integrationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: integrationsGroupByArgs['orderBy'] }
        : { orderBy?: integrationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, integrationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the integrations model
   */
  readonly fields: integrationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for integrations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__integrationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    integration_sources<T extends integration_sourcesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, integration_sourcesDefaultArgs<ExtArgs>>): Prisma__integration_sourcesClient<$Result.GetResult<Prisma.$integration_sourcesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the integrations model
   */ 
  interface integrationsFieldRefs {
    readonly id: FieldRef<"integrations", 'Int'>
    readonly product_id: FieldRef<"integrations", 'Int'>
    readonly source_id: FieldRef<"integrations", 'Int'>
    readonly source_product_id: FieldRef<"integrations", 'String'>
  }
    

  // Custom InputTypes
  /**
   * integrations findUnique
   */
  export type integrationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * Filter, which integrations to fetch.
     */
    where: integrationsWhereUniqueInput
  }

  /**
   * integrations findUniqueOrThrow
   */
  export type integrationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * Filter, which integrations to fetch.
     */
    where: integrationsWhereUniqueInput
  }

  /**
   * integrations findFirst
   */
  export type integrationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * Filter, which integrations to fetch.
     */
    where?: integrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integrations to fetch.
     */
    orderBy?: integrationsOrderByWithRelationInput | integrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for integrations.
     */
    cursor?: integrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of integrations.
     */
    distinct?: IntegrationsScalarFieldEnum | IntegrationsScalarFieldEnum[]
  }

  /**
   * integrations findFirstOrThrow
   */
  export type integrationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * Filter, which integrations to fetch.
     */
    where?: integrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integrations to fetch.
     */
    orderBy?: integrationsOrderByWithRelationInput | integrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for integrations.
     */
    cursor?: integrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of integrations.
     */
    distinct?: IntegrationsScalarFieldEnum | IntegrationsScalarFieldEnum[]
  }

  /**
   * integrations findMany
   */
  export type integrationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * Filter, which integrations to fetch.
     */
    where?: integrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of integrations to fetch.
     */
    orderBy?: integrationsOrderByWithRelationInput | integrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing integrations.
     */
    cursor?: integrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` integrations.
     */
    skip?: number
    distinct?: IntegrationsScalarFieldEnum | IntegrationsScalarFieldEnum[]
  }

  /**
   * integrations create
   */
  export type integrationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * The data needed to create a integrations.
     */
    data: XOR<integrationsCreateInput, integrationsUncheckedCreateInput>
  }

  /**
   * integrations createMany
   */
  export type integrationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many integrations.
     */
    data: integrationsCreateManyInput | integrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * integrations update
   */
  export type integrationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * The data needed to update a integrations.
     */
    data: XOR<integrationsUpdateInput, integrationsUncheckedUpdateInput>
    /**
     * Choose, which integrations to update.
     */
    where: integrationsWhereUniqueInput
  }

  /**
   * integrations updateMany
   */
  export type integrationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update integrations.
     */
    data: XOR<integrationsUpdateManyMutationInput, integrationsUncheckedUpdateManyInput>
    /**
     * Filter which integrations to update
     */
    where?: integrationsWhereInput
  }

  /**
   * integrations upsert
   */
  export type integrationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * The filter to search for the integrations to update in case it exists.
     */
    where: integrationsWhereUniqueInput
    /**
     * In case the integrations found by the `where` argument doesn't exist, create a new integrations with this data.
     */
    create: XOR<integrationsCreateInput, integrationsUncheckedCreateInput>
    /**
     * In case the integrations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<integrationsUpdateInput, integrationsUncheckedUpdateInput>
  }

  /**
   * integrations delete
   */
  export type integrationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    /**
     * Filter which integrations to delete.
     */
    where: integrationsWhereUniqueInput
  }

  /**
   * integrations deleteMany
   */
  export type integrationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which integrations to delete
     */
    where?: integrationsWhereInput
  }

  /**
   * integrations without action
   */
  export type integrationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
  }


  /**
   * Model objects
   */

  export type AggregateObjects = {
    _count: ObjectsCountAggregateOutputType | null
    _avg: ObjectsAvgAggregateOutputType | null
    _sum: ObjectsSumAggregateOutputType | null
    _min: ObjectsMinAggregateOutputType | null
    _max: ObjectsMaxAggregateOutputType | null
  }

  export type ObjectsAvgAggregateOutputType = {
    id: number | null
    common_db_object_id: number | null
  }

  export type ObjectsSumAggregateOutputType = {
    id: number | null
    common_db_object_id: number | null
  }

  export type ObjectsMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    common_db_object_id: number | null
  }

  export type ObjectsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    common_db_object_id: number | null
  }

  export type ObjectsCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    updated_at: number
    common_db_object_id: number
    _all: number
  }


  export type ObjectsAvgAggregateInputType = {
    id?: true
    common_db_object_id?: true
  }

  export type ObjectsSumAggregateInputType = {
    id?: true
    common_db_object_id?: true
  }

  export type ObjectsMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    common_db_object_id?: true
  }

  export type ObjectsMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    common_db_object_id?: true
  }

  export type ObjectsCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    common_db_object_id?: true
    _all?: true
  }

  export type ObjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which objects to aggregate.
     */
    where?: objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of objects to fetch.
     */
    orderBy?: objectsOrderByWithRelationInput | objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned objects
    **/
    _count?: true | ObjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ObjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ObjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObjectsMaxAggregateInputType
  }

  export type GetObjectsAggregateType<T extends ObjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateObjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObjects[P]>
      : GetScalarType<T[P], AggregateObjects[P]>
  }




  export type objectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: objectsWhereInput
    orderBy?: objectsOrderByWithAggregationInput | objectsOrderByWithAggregationInput[]
    by: ObjectsScalarFieldEnum[] | ObjectsScalarFieldEnum
    having?: objectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObjectsCountAggregateInputType | true
    _avg?: ObjectsAvgAggregateInputType
    _sum?: ObjectsSumAggregateInputType
    _min?: ObjectsMinAggregateInputType
    _max?: ObjectsMaxAggregateInputType
  }

  export type ObjectsGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    updated_at: Date
    common_db_object_id: number
    _count: ObjectsCountAggregateOutputType | null
    _avg: ObjectsAvgAggregateOutputType | null
    _sum: ObjectsSumAggregateOutputType | null
    _min: ObjectsMinAggregateOutputType | null
    _max: ObjectsMaxAggregateOutputType | null
  }

  type GetObjectsGroupByPayload<T extends objectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObjectsGroupByOutputType[P]>
            : GetScalarType<T[P], ObjectsGroupByOutputType[P]>
        }
      >
    >


  export type objectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    common_db_object_id?: boolean
    product_types?: boolean | objects$product_typesArgs<ExtArgs>
    products?: boolean | objects$productsArgs<ExtArgs>
    r_tags_objects?: boolean | objects$r_tags_objectsArgs<ExtArgs>
    sections?: boolean | objects$sectionsArgs<ExtArgs>
    _count?: boolean | ObjectsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["objects"]>


  export type objectsSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    common_db_object_id?: boolean
  }

  export type objectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_types?: boolean | objects$product_typesArgs<ExtArgs>
    products?: boolean | objects$productsArgs<ExtArgs>
    r_tags_objects?: boolean | objects$r_tags_objectsArgs<ExtArgs>
    sections?: boolean | objects$sectionsArgs<ExtArgs>
    _count?: boolean | ObjectsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $objectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "objects"
    objects: {
      product_types: Prisma.$product_typesPayload<ExtArgs>[]
      products: Prisma.$productsPayload<ExtArgs>[]
      r_tags_objects: Prisma.$r_tags_objectsPayload<ExtArgs>[]
      sections: Prisma.$sectionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      updated_at: Date
      common_db_object_id: number
    }, ExtArgs["result"]["objects"]>
    composites: {}
  }

  type objectsGetPayload<S extends boolean | null | undefined | objectsDefaultArgs> = $Result.GetResult<Prisma.$objectsPayload, S>

  type objectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<objectsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ObjectsCountAggregateInputType | true
    }

  export interface objectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['objects'], meta: { name: 'objects' } }
    /**
     * Find zero or one Objects that matches the filter.
     * @param {objectsFindUniqueArgs} args - Arguments to find a Objects
     * @example
     * // Get one Objects
     * const objects = await prisma.objects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends objectsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, objectsFindUniqueArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Objects that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {objectsFindUniqueOrThrowArgs} args - Arguments to find a Objects
     * @example
     * // Get one Objects
     * const objects = await prisma.objects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends objectsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, objectsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Objects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {objectsFindFirstArgs} args - Arguments to find a Objects
     * @example
     * // Get one Objects
     * const objects = await prisma.objects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends objectsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, objectsFindFirstArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Objects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {objectsFindFirstOrThrowArgs} args - Arguments to find a Objects
     * @example
     * // Get one Objects
     * const objects = await prisma.objects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends objectsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, objectsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Objects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {objectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Objects
     * const objects = await prisma.objects.findMany()
     * 
     * // Get first 10 Objects
     * const objects = await prisma.objects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const objectsWithIdOnly = await prisma.objects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends objectsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, objectsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Objects.
     * @param {objectsCreateArgs} args - Arguments to create a Objects.
     * @example
     * // Create one Objects
     * const Objects = await prisma.objects.create({
     *   data: {
     *     // ... data to create a Objects
     *   }
     * })
     * 
    **/
    create<T extends objectsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, objectsCreateArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Objects.
     * @param {objectsCreateManyArgs} args - Arguments to create many Objects.
     * @example
     * // Create many Objects
     * const objects = await prisma.objects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends objectsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, objectsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Objects.
     * @param {objectsDeleteArgs} args - Arguments to delete one Objects.
     * @example
     * // Delete one Objects
     * const Objects = await prisma.objects.delete({
     *   where: {
     *     // ... filter to delete one Objects
     *   }
     * })
     * 
    **/
    delete<T extends objectsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, objectsDeleteArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Objects.
     * @param {objectsUpdateArgs} args - Arguments to update one Objects.
     * @example
     * // Update one Objects
     * const objects = await prisma.objects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends objectsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, objectsUpdateArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Objects.
     * @param {objectsDeleteManyArgs} args - Arguments to filter Objects to delete.
     * @example
     * // Delete a few Objects
     * const { count } = await prisma.objects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends objectsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, objectsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {objectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Objects
     * const objects = await prisma.objects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends objectsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, objectsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Objects.
     * @param {objectsUpsertArgs} args - Arguments to update or create a Objects.
     * @example
     * // Update or create a Objects
     * const objects = await prisma.objects.upsert({
     *   create: {
     *     // ... data to create a Objects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Objects we want to update
     *   }
     * })
    **/
    upsert<T extends objectsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, objectsUpsertArgs<ExtArgs>>
    ): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {objectsCountArgs} args - Arguments to filter Objects to count.
     * @example
     * // Count the number of Objects
     * const count = await prisma.objects.count({
     *   where: {
     *     // ... the filter for the Objects we want to count
     *   }
     * })
    **/
    count<T extends objectsCountArgs>(
      args?: Subset<T, objectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObjectsAggregateArgs>(args: Subset<T, ObjectsAggregateArgs>): Prisma.PrismaPromise<GetObjectsAggregateType<T>>

    /**
     * Group by Objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {objectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends objectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: objectsGroupByArgs['orderBy'] }
        : { orderBy?: objectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, objectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the objects model
   */
  readonly fields: objectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for objects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__objectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product_types<T extends objects$product_typesArgs<ExtArgs> = {}>(args?: Subset<T, objects$product_typesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findMany'> | Null>;

    products<T extends objects$productsArgs<ExtArgs> = {}>(args?: Subset<T, objects$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_objects<T extends objects$r_tags_objectsArgs<ExtArgs> = {}>(args?: Subset<T, objects$r_tags_objectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'findMany'> | Null>;

    sections<T extends objects$sectionsArgs<ExtArgs> = {}>(args?: Subset<T, objects$sectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the objects model
   */ 
  interface objectsFieldRefs {
    readonly id: FieldRef<"objects", 'Int'>
    readonly name: FieldRef<"objects", 'String'>
    readonly created_at: FieldRef<"objects", 'DateTime'>
    readonly updated_at: FieldRef<"objects", 'DateTime'>
    readonly common_db_object_id: FieldRef<"objects", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * objects findUnique
   */
  export type objectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * Filter, which objects to fetch.
     */
    where: objectsWhereUniqueInput
  }

  /**
   * objects findUniqueOrThrow
   */
  export type objectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * Filter, which objects to fetch.
     */
    where: objectsWhereUniqueInput
  }

  /**
   * objects findFirst
   */
  export type objectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * Filter, which objects to fetch.
     */
    where?: objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of objects to fetch.
     */
    orderBy?: objectsOrderByWithRelationInput | objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for objects.
     */
    cursor?: objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of objects.
     */
    distinct?: ObjectsScalarFieldEnum | ObjectsScalarFieldEnum[]
  }

  /**
   * objects findFirstOrThrow
   */
  export type objectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * Filter, which objects to fetch.
     */
    where?: objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of objects to fetch.
     */
    orderBy?: objectsOrderByWithRelationInput | objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for objects.
     */
    cursor?: objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of objects.
     */
    distinct?: ObjectsScalarFieldEnum | ObjectsScalarFieldEnum[]
  }

  /**
   * objects findMany
   */
  export type objectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * Filter, which objects to fetch.
     */
    where?: objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of objects to fetch.
     */
    orderBy?: objectsOrderByWithRelationInput | objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing objects.
     */
    cursor?: objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` objects.
     */
    skip?: number
    distinct?: ObjectsScalarFieldEnum | ObjectsScalarFieldEnum[]
  }

  /**
   * objects create
   */
  export type objectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * The data needed to create a objects.
     */
    data: XOR<objectsCreateInput, objectsUncheckedCreateInput>
  }

  /**
   * objects createMany
   */
  export type objectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many objects.
     */
    data: objectsCreateManyInput | objectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * objects update
   */
  export type objectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * The data needed to update a objects.
     */
    data: XOR<objectsUpdateInput, objectsUncheckedUpdateInput>
    /**
     * Choose, which objects to update.
     */
    where: objectsWhereUniqueInput
  }

  /**
   * objects updateMany
   */
  export type objectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update objects.
     */
    data: XOR<objectsUpdateManyMutationInput, objectsUncheckedUpdateManyInput>
    /**
     * Filter which objects to update
     */
    where?: objectsWhereInput
  }

  /**
   * objects upsert
   */
  export type objectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * The filter to search for the objects to update in case it exists.
     */
    where: objectsWhereUniqueInput
    /**
     * In case the objects found by the `where` argument doesn't exist, create a new objects with this data.
     */
    create: XOR<objectsCreateInput, objectsUncheckedCreateInput>
    /**
     * In case the objects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<objectsUpdateInput, objectsUncheckedUpdateInput>
  }

  /**
   * objects delete
   */
  export type objectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
    /**
     * Filter which objects to delete.
     */
    where: objectsWhereUniqueInput
  }

  /**
   * objects deleteMany
   */
  export type objectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which objects to delete
     */
    where?: objectsWhereInput
  }

  /**
   * objects.product_types
   */
  export type objects$product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    where?: product_typesWhereInput
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    cursor?: product_typesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_typesScalarFieldEnum | Product_typesScalarFieldEnum[]
  }

  /**
   * objects.products
   */
  export type objects$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * objects.r_tags_objects
   */
  export type objects$r_tags_objectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    where?: r_tags_objectsWhereInput
    orderBy?: r_tags_objectsOrderByWithRelationInput | r_tags_objectsOrderByWithRelationInput[]
    cursor?: r_tags_objectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_objectsScalarFieldEnum | R_tags_objectsScalarFieldEnum[]
  }

  /**
   * objects.sections
   */
  export type objects$sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    where?: sectionsWhereInput
    orderBy?: sectionsOrderByWithRelationInput | sectionsOrderByWithRelationInput[]
    cursor?: sectionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SectionsScalarFieldEnum | SectionsScalarFieldEnum[]
  }

  /**
   * objects without action
   */
  export type objectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the objects
     */
    select?: objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: objectsInclude<ExtArgs> | null
  }


  /**
   * Model product_categories
   */

  export type AggregateProduct_categories = {
    _count: Product_categoriesCountAggregateOutputType | null
    _avg: Product_categoriesAvgAggregateOutputType | null
    _sum: Product_categoriesSumAggregateOutputType | null
    _min: Product_categoriesMinAggregateOutputType | null
    _max: Product_categoriesMaxAggregateOutputType | null
  }

  export type Product_categoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type Product_categoriesSumAggregateOutputType = {
    id: number | null
  }

  export type Product_categoriesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Product_categoriesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Product_categoriesCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Product_categoriesAvgAggregateInputType = {
    id?: true
  }

  export type Product_categoriesSumAggregateInputType = {
    id?: true
  }

  export type Product_categoriesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type Product_categoriesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type Product_categoriesCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Product_categoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_categories to aggregate.
     */
    where?: product_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoriesOrderByWithRelationInput | product_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_categories
    **/
    _count?: true | Product_categoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_categoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_categoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_categoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_categoriesMaxAggregateInputType
  }

  export type GetProduct_categoriesAggregateType<T extends Product_categoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_categories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_categories[P]>
      : GetScalarType<T[P], AggregateProduct_categories[P]>
  }




  export type product_categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_categoriesWhereInput
    orderBy?: product_categoriesOrderByWithAggregationInput | product_categoriesOrderByWithAggregationInput[]
    by: Product_categoriesScalarFieldEnum[] | Product_categoriesScalarFieldEnum
    having?: product_categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_categoriesCountAggregateInputType | true
    _avg?: Product_categoriesAvgAggregateInputType
    _sum?: Product_categoriesSumAggregateInputType
    _min?: Product_categoriesMinAggregateInputType
    _max?: Product_categoriesMaxAggregateInputType
  }

  export type Product_categoriesGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    updated_at: Date
    _count: Product_categoriesCountAggregateOutputType | null
    _avg: Product_categoriesAvgAggregateOutputType | null
    _sum: Product_categoriesSumAggregateOutputType | null
    _min: Product_categoriesMinAggregateOutputType | null
    _max: Product_categoriesMaxAggregateOutputType | null
  }

  type GetProduct_categoriesGroupByPayload<T extends product_categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_categoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_categoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_categoriesGroupByOutputType[P]>
            : GetScalarType<T[P], Product_categoriesGroupByOutputType[P]>
        }
      >
    >


  export type product_categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    products?: boolean | product_categories$productsArgs<ExtArgs>
    r_tags_categories?: boolean | product_categories$r_tags_categoriesArgs<ExtArgs>
    _count?: boolean | Product_categoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_categories"]>


  export type product_categoriesSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type product_categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | product_categories$productsArgs<ExtArgs>
    r_tags_categories?: boolean | product_categories$r_tags_categoriesArgs<ExtArgs>
    _count?: boolean | Product_categoriesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $product_categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_categories"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>[]
      r_tags_categories: Prisma.$r_tags_categoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["product_categories"]>
    composites: {}
  }

  type product_categoriesGetPayload<S extends boolean | null | undefined | product_categoriesDefaultArgs> = $Result.GetResult<Prisma.$product_categoriesPayload, S>

  type product_categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_categoriesCountAggregateInputType | true
    }

  export interface product_categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_categories'], meta: { name: 'product_categories' } }
    /**
     * Find zero or one Product_categories that matches the filter.
     * @param {product_categoriesFindUniqueArgs} args - Arguments to find a Product_categories
     * @example
     * // Get one Product_categories
     * const product_categories = await prisma.product_categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, product_categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_categories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {product_categoriesFindUniqueOrThrowArgs} args - Arguments to find a Product_categories
     * @example
     * // Get one Product_categories
     * const product_categories = await prisma.product_categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoriesFindFirstArgs} args - Arguments to find a Product_categories
     * @example
     * // Get one Product_categories
     * const product_categories = await prisma.product_categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, product_categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoriesFindFirstOrThrowArgs} args - Arguments to find a Product_categories
     * @example
     * // Get one Product_categories
     * const product_categories = await prisma.product_categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_categories
     * const product_categories = await prisma.product_categories.findMany()
     * 
     * // Get first 10 Product_categories
     * const product_categories = await prisma.product_categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_categoriesWithIdOnly = await prisma.product_categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_categories.
     * @param {product_categoriesCreateArgs} args - Arguments to create a Product_categories.
     * @example
     * // Create one Product_categories
     * const Product_categories = await prisma.product_categories.create({
     *   data: {
     *     // ... data to create a Product_categories
     *   }
     * })
     * 
    **/
    create<T extends product_categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, product_categoriesCreateArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_categories.
     * @param {product_categoriesCreateManyArgs} args - Arguments to create many Product_categories.
     * @example
     * // Create many Product_categories
     * const product_categories = await prisma.product_categories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends product_categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_categories.
     * @param {product_categoriesDeleteArgs} args - Arguments to delete one Product_categories.
     * @example
     * // Delete one Product_categories
     * const Product_categories = await prisma.product_categories.delete({
     *   where: {
     *     // ... filter to delete one Product_categories
     *   }
     * })
     * 
    **/
    delete<T extends product_categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, product_categoriesDeleteArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_categories.
     * @param {product_categoriesUpdateArgs} args - Arguments to update one Product_categories.
     * @example
     * // Update one Product_categories
     * const product_categories = await prisma.product_categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, product_categoriesUpdateArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_categories.
     * @param {product_categoriesDeleteManyArgs} args - Arguments to filter Product_categories to delete.
     * @example
     * // Delete a few Product_categories
     * const { count } = await prisma.product_categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_categories
     * const product_categories = await prisma.product_categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, product_categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_categories.
     * @param {product_categoriesUpsertArgs} args - Arguments to update or create a Product_categories.
     * @example
     * // Update or create a Product_categories
     * const product_categories = await prisma.product_categories.upsert({
     *   create: {
     *     // ... data to create a Product_categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_categories we want to update
     *   }
     * })
    **/
    upsert<T extends product_categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, product_categoriesUpsertArgs<ExtArgs>>
    ): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoriesCountArgs} args - Arguments to filter Product_categories to count.
     * @example
     * // Count the number of Product_categories
     * const count = await prisma.product_categories.count({
     *   where: {
     *     // ... the filter for the Product_categories we want to count
     *   }
     * })
    **/
    count<T extends product_categoriesCountArgs>(
      args?: Subset<T, product_categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_categoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_categoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_categoriesAggregateArgs>(args: Subset<T, Product_categoriesAggregateArgs>): Prisma.PrismaPromise<GetProduct_categoriesAggregateType<T>>

    /**
     * Group by Product_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_categoriesGroupByArgs['orderBy'] }
        : { orderBy?: product_categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_categoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_categories model
   */
  readonly fields: product_categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends product_categories$productsArgs<ExtArgs> = {}>(args?: Subset<T, product_categories$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_categories<T extends product_categories$r_tags_categoriesArgs<ExtArgs> = {}>(args?: Subset<T, product_categories$r_tags_categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product_categories model
   */ 
  interface product_categoriesFieldRefs {
    readonly id: FieldRef<"product_categories", 'Int'>
    readonly name: FieldRef<"product_categories", 'String'>
    readonly created_at: FieldRef<"product_categories", 'DateTime'>
    readonly updated_at: FieldRef<"product_categories", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * product_categories findUnique
   */
  export type product_categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which product_categories to fetch.
     */
    where: product_categoriesWhereUniqueInput
  }

  /**
   * product_categories findUniqueOrThrow
   */
  export type product_categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which product_categories to fetch.
     */
    where: product_categoriesWhereUniqueInput
  }

  /**
   * product_categories findFirst
   */
  export type product_categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which product_categories to fetch.
     */
    where?: product_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoriesOrderByWithRelationInput | product_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_categories.
     */
    cursor?: product_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_categories.
     */
    distinct?: Product_categoriesScalarFieldEnum | Product_categoriesScalarFieldEnum[]
  }

  /**
   * product_categories findFirstOrThrow
   */
  export type product_categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which product_categories to fetch.
     */
    where?: product_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoriesOrderByWithRelationInput | product_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_categories.
     */
    cursor?: product_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_categories.
     */
    distinct?: Product_categoriesScalarFieldEnum | Product_categoriesScalarFieldEnum[]
  }

  /**
   * product_categories findMany
   */
  export type product_categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which product_categories to fetch.
     */
    where?: product_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_categories to fetch.
     */
    orderBy?: product_categoriesOrderByWithRelationInput | product_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_categories.
     */
    cursor?: product_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_categories.
     */
    skip?: number
    distinct?: Product_categoriesScalarFieldEnum | Product_categoriesScalarFieldEnum[]
  }

  /**
   * product_categories create
   */
  export type product_categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a product_categories.
     */
    data: XOR<product_categoriesCreateInput, product_categoriesUncheckedCreateInput>
  }

  /**
   * product_categories createMany
   */
  export type product_categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_categories.
     */
    data: product_categoriesCreateManyInput | product_categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_categories update
   */
  export type product_categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a product_categories.
     */
    data: XOR<product_categoriesUpdateInput, product_categoriesUncheckedUpdateInput>
    /**
     * Choose, which product_categories to update.
     */
    where: product_categoriesWhereUniqueInput
  }

  /**
   * product_categories updateMany
   */
  export type product_categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_categories.
     */
    data: XOR<product_categoriesUpdateManyMutationInput, product_categoriesUncheckedUpdateManyInput>
    /**
     * Filter which product_categories to update
     */
    where?: product_categoriesWhereInput
  }

  /**
   * product_categories upsert
   */
  export type product_categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the product_categories to update in case it exists.
     */
    where: product_categoriesWhereUniqueInput
    /**
     * In case the product_categories found by the `where` argument doesn't exist, create a new product_categories with this data.
     */
    create: XOR<product_categoriesCreateInput, product_categoriesUncheckedCreateInput>
    /**
     * In case the product_categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_categoriesUpdateInput, product_categoriesUncheckedUpdateInput>
  }

  /**
   * product_categories delete
   */
  export type product_categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
    /**
     * Filter which product_categories to delete.
     */
    where: product_categoriesWhereUniqueInput
  }

  /**
   * product_categories deleteMany
   */
  export type product_categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_categories to delete
     */
    where?: product_categoriesWhereInput
  }

  /**
   * product_categories.products
   */
  export type product_categories$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * product_categories.r_tags_categories
   */
  export type product_categories$r_tags_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    where?: r_tags_categoriesWhereInput
    orderBy?: r_tags_categoriesOrderByWithRelationInput | r_tags_categoriesOrderByWithRelationInput[]
    cursor?: r_tags_categoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_categoriesScalarFieldEnum | R_tags_categoriesScalarFieldEnum[]
  }

  /**
   * product_categories without action
   */
  export type product_categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_categories
     */
    select?: product_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_categoriesInclude<ExtArgs> | null
  }


  /**
   * Model product_files
   */

  export type AggregateProduct_files = {
    _count: Product_filesCountAggregateOutputType | null
    _avg: Product_filesAvgAggregateOutputType | null
    _sum: Product_filesSumAggregateOutputType | null
    _min: Product_filesMinAggregateOutputType | null
    _max: Product_filesMaxAggregateOutputType | null
  }

  export type Product_filesAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_filesSumAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_filesMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    type: $Enums.product_files_type | null
    path: string | null
  }

  export type Product_filesMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    type: $Enums.product_files_type | null
    path: string | null
  }

  export type Product_filesCountAggregateOutputType = {
    id: number
    product_id: number
    type: number
    path: number
    _all: number
  }


  export type Product_filesAvgAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_filesSumAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_filesMinAggregateInputType = {
    id?: true
    product_id?: true
    type?: true
    path?: true
  }

  export type Product_filesMaxAggregateInputType = {
    id?: true
    product_id?: true
    type?: true
    path?: true
  }

  export type Product_filesCountAggregateInputType = {
    id?: true
    product_id?: true
    type?: true
    path?: true
    _all?: true
  }

  export type Product_filesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_files to aggregate.
     */
    where?: product_filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_files to fetch.
     */
    orderBy?: product_filesOrderByWithRelationInput | product_filesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_files
    **/
    _count?: true | Product_filesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_filesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_filesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_filesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_filesMaxAggregateInputType
  }

  export type GetProduct_filesAggregateType<T extends Product_filesAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_files]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_files[P]>
      : GetScalarType<T[P], AggregateProduct_files[P]>
  }




  export type product_filesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_filesWhereInput
    orderBy?: product_filesOrderByWithAggregationInput | product_filesOrderByWithAggregationInput[]
    by: Product_filesScalarFieldEnum[] | Product_filesScalarFieldEnum
    having?: product_filesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_filesCountAggregateInputType | true
    _avg?: Product_filesAvgAggregateInputType
    _sum?: Product_filesSumAggregateInputType
    _min?: Product_filesMinAggregateInputType
    _max?: Product_filesMaxAggregateInputType
  }

  export type Product_filesGroupByOutputType = {
    id: number
    product_id: number
    type: $Enums.product_files_type
    path: string
    _count: Product_filesCountAggregateOutputType | null
    _avg: Product_filesAvgAggregateOutputType | null
    _sum: Product_filesSumAggregateOutputType | null
    _min: Product_filesMinAggregateOutputType | null
    _max: Product_filesMaxAggregateOutputType | null
  }

  type GetProduct_filesGroupByPayload<T extends product_filesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_filesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_filesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_filesGroupByOutputType[P]>
            : GetScalarType<T[P], Product_filesGroupByOutputType[P]>
        }
      >
    >


  export type product_filesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    type?: boolean
    path?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_files"]>


  export type product_filesSelectScalar = {
    id?: boolean
    product_id?: boolean
    type?: boolean
    path?: boolean
  }

  export type product_filesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $product_filesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_files"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      type: $Enums.product_files_type
      path: string
    }, ExtArgs["result"]["product_files"]>
    composites: {}
  }

  type product_filesGetPayload<S extends boolean | null | undefined | product_filesDefaultArgs> = $Result.GetResult<Prisma.$product_filesPayload, S>

  type product_filesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_filesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_filesCountAggregateInputType | true
    }

  export interface product_filesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_files'], meta: { name: 'product_files' } }
    /**
     * Find zero or one Product_files that matches the filter.
     * @param {product_filesFindUniqueArgs} args - Arguments to find a Product_files
     * @example
     * // Get one Product_files
     * const product_files = await prisma.product_files.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_filesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, product_filesFindUniqueArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_files that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {product_filesFindUniqueOrThrowArgs} args - Arguments to find a Product_files
     * @example
     * // Get one Product_files
     * const product_files = await prisma.product_files.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_filesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_filesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_filesFindFirstArgs} args - Arguments to find a Product_files
     * @example
     * // Get one Product_files
     * const product_files = await prisma.product_files.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_filesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, product_filesFindFirstArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_files that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_filesFindFirstOrThrowArgs} args - Arguments to find a Product_files
     * @example
     * // Get one Product_files
     * const product_files = await prisma.product_files.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_filesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_filesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_filesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_files
     * const product_files = await prisma.product_files.findMany()
     * 
     * // Get first 10 Product_files
     * const product_files = await prisma.product_files.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_filesWithIdOnly = await prisma.product_files.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_filesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_filesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_files.
     * @param {product_filesCreateArgs} args - Arguments to create a Product_files.
     * @example
     * // Create one Product_files
     * const Product_files = await prisma.product_files.create({
     *   data: {
     *     // ... data to create a Product_files
     *   }
     * })
     * 
    **/
    create<T extends product_filesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, product_filesCreateArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_files.
     * @param {product_filesCreateManyArgs} args - Arguments to create many Product_files.
     * @example
     * // Create many Product_files
     * const product_files = await prisma.product_files.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends product_filesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_filesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_files.
     * @param {product_filesDeleteArgs} args - Arguments to delete one Product_files.
     * @example
     * // Delete one Product_files
     * const Product_files = await prisma.product_files.delete({
     *   where: {
     *     // ... filter to delete one Product_files
     *   }
     * })
     * 
    **/
    delete<T extends product_filesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, product_filesDeleteArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_files.
     * @param {product_filesUpdateArgs} args - Arguments to update one Product_files.
     * @example
     * // Update one Product_files
     * const product_files = await prisma.product_files.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_filesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, product_filesUpdateArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_files.
     * @param {product_filesDeleteManyArgs} args - Arguments to filter Product_files to delete.
     * @example
     * // Delete a few Product_files
     * const { count } = await prisma.product_files.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_filesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_filesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_filesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_files
     * const product_files = await prisma.product_files.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_filesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, product_filesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_files.
     * @param {product_filesUpsertArgs} args - Arguments to update or create a Product_files.
     * @example
     * // Update or create a Product_files
     * const product_files = await prisma.product_files.upsert({
     *   create: {
     *     // ... data to create a Product_files
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_files we want to update
     *   }
     * })
    **/
    upsert<T extends product_filesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, product_filesUpsertArgs<ExtArgs>>
    ): Prisma__product_filesClient<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_filesCountArgs} args - Arguments to filter Product_files to count.
     * @example
     * // Count the number of Product_files
     * const count = await prisma.product_files.count({
     *   where: {
     *     // ... the filter for the Product_files we want to count
     *   }
     * })
    **/
    count<T extends product_filesCountArgs>(
      args?: Subset<T, product_filesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_filesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_filesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_filesAggregateArgs>(args: Subset<T, Product_filesAggregateArgs>): Prisma.PrismaPromise<GetProduct_filesAggregateType<T>>

    /**
     * Group by Product_files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_filesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_filesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_filesGroupByArgs['orderBy'] }
        : { orderBy?: product_filesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_filesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_filesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_files model
   */
  readonly fields: product_filesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_files.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_filesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product_files model
   */ 
  interface product_filesFieldRefs {
    readonly id: FieldRef<"product_files", 'Int'>
    readonly product_id: FieldRef<"product_files", 'Int'>
    readonly type: FieldRef<"product_files", 'product_files_type'>
    readonly path: FieldRef<"product_files", 'String'>
  }
    

  // Custom InputTypes
  /**
   * product_files findUnique
   */
  export type product_filesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * Filter, which product_files to fetch.
     */
    where: product_filesWhereUniqueInput
  }

  /**
   * product_files findUniqueOrThrow
   */
  export type product_filesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * Filter, which product_files to fetch.
     */
    where: product_filesWhereUniqueInput
  }

  /**
   * product_files findFirst
   */
  export type product_filesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * Filter, which product_files to fetch.
     */
    where?: product_filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_files to fetch.
     */
    orderBy?: product_filesOrderByWithRelationInput | product_filesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_files.
     */
    cursor?: product_filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_files.
     */
    distinct?: Product_filesScalarFieldEnum | Product_filesScalarFieldEnum[]
  }

  /**
   * product_files findFirstOrThrow
   */
  export type product_filesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * Filter, which product_files to fetch.
     */
    where?: product_filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_files to fetch.
     */
    orderBy?: product_filesOrderByWithRelationInput | product_filesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_files.
     */
    cursor?: product_filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_files.
     */
    distinct?: Product_filesScalarFieldEnum | Product_filesScalarFieldEnum[]
  }

  /**
   * product_files findMany
   */
  export type product_filesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * Filter, which product_files to fetch.
     */
    where?: product_filesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_files to fetch.
     */
    orderBy?: product_filesOrderByWithRelationInput | product_filesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_files.
     */
    cursor?: product_filesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_files.
     */
    skip?: number
    distinct?: Product_filesScalarFieldEnum | Product_filesScalarFieldEnum[]
  }

  /**
   * product_files create
   */
  export type product_filesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * The data needed to create a product_files.
     */
    data: XOR<product_filesCreateInput, product_filesUncheckedCreateInput>
  }

  /**
   * product_files createMany
   */
  export type product_filesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_files.
     */
    data: product_filesCreateManyInput | product_filesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_files update
   */
  export type product_filesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * The data needed to update a product_files.
     */
    data: XOR<product_filesUpdateInput, product_filesUncheckedUpdateInput>
    /**
     * Choose, which product_files to update.
     */
    where: product_filesWhereUniqueInput
  }

  /**
   * product_files updateMany
   */
  export type product_filesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_files.
     */
    data: XOR<product_filesUpdateManyMutationInput, product_filesUncheckedUpdateManyInput>
    /**
     * Filter which product_files to update
     */
    where?: product_filesWhereInput
  }

  /**
   * product_files upsert
   */
  export type product_filesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * The filter to search for the product_files to update in case it exists.
     */
    where: product_filesWhereUniqueInput
    /**
     * In case the product_files found by the `where` argument doesn't exist, create a new product_files with this data.
     */
    create: XOR<product_filesCreateInput, product_filesUncheckedCreateInput>
    /**
     * In case the product_files was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_filesUpdateInput, product_filesUncheckedUpdateInput>
  }

  /**
   * product_files delete
   */
  export type product_filesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    /**
     * Filter which product_files to delete.
     */
    where: product_filesWhereUniqueInput
  }

  /**
   * product_files deleteMany
   */
  export type product_filesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_files to delete
     */
    where?: product_filesWhereInput
  }

  /**
   * product_files without action
   */
  export type product_filesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
  }


  /**
   * Model product_meter_numbers
   */

  export type AggregateProduct_meter_numbers = {
    _count: Product_meter_numbersCountAggregateOutputType | null
    _avg: Product_meter_numbersAvgAggregateOutputType | null
    _sum: Product_meter_numbersSumAggregateOutputType | null
    _min: Product_meter_numbersMinAggregateOutputType | null
    _max: Product_meter_numbersMaxAggregateOutputType | null
  }

  export type Product_meter_numbersAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_meter_numbersSumAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_meter_numbersMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    electricity: string | null
    heating: string | null
    hot_water: string | null
    cold_water: string | null
  }

  export type Product_meter_numbersMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    electricity: string | null
    heating: string | null
    hot_water: string | null
    cold_water: string | null
  }

  export type Product_meter_numbersCountAggregateOutputType = {
    id: number
    product_id: number
    electricity: number
    heating: number
    hot_water: number
    cold_water: number
    _all: number
  }


  export type Product_meter_numbersAvgAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_meter_numbersSumAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_meter_numbersMinAggregateInputType = {
    id?: true
    product_id?: true
    electricity?: true
    heating?: true
    hot_water?: true
    cold_water?: true
  }

  export type Product_meter_numbersMaxAggregateInputType = {
    id?: true
    product_id?: true
    electricity?: true
    heating?: true
    hot_water?: true
    cold_water?: true
  }

  export type Product_meter_numbersCountAggregateInputType = {
    id?: true
    product_id?: true
    electricity?: true
    heating?: true
    hot_water?: true
    cold_water?: true
    _all?: true
  }

  export type Product_meter_numbersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_meter_numbers to aggregate.
     */
    where?: product_meter_numbersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_meter_numbers to fetch.
     */
    orderBy?: product_meter_numbersOrderByWithRelationInput | product_meter_numbersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_meter_numbersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_meter_numbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_meter_numbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_meter_numbers
    **/
    _count?: true | Product_meter_numbersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_meter_numbersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_meter_numbersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_meter_numbersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_meter_numbersMaxAggregateInputType
  }

  export type GetProduct_meter_numbersAggregateType<T extends Product_meter_numbersAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_meter_numbers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_meter_numbers[P]>
      : GetScalarType<T[P], AggregateProduct_meter_numbers[P]>
  }




  export type product_meter_numbersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_meter_numbersWhereInput
    orderBy?: product_meter_numbersOrderByWithAggregationInput | product_meter_numbersOrderByWithAggregationInput[]
    by: Product_meter_numbersScalarFieldEnum[] | Product_meter_numbersScalarFieldEnum
    having?: product_meter_numbersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_meter_numbersCountAggregateInputType | true
    _avg?: Product_meter_numbersAvgAggregateInputType
    _sum?: Product_meter_numbersSumAggregateInputType
    _min?: Product_meter_numbersMinAggregateInputType
    _max?: Product_meter_numbersMaxAggregateInputType
  }

  export type Product_meter_numbersGroupByOutputType = {
    id: number
    product_id: number
    electricity: string
    heating: string
    hot_water: string
    cold_water: string
    _count: Product_meter_numbersCountAggregateOutputType | null
    _avg: Product_meter_numbersAvgAggregateOutputType | null
    _sum: Product_meter_numbersSumAggregateOutputType | null
    _min: Product_meter_numbersMinAggregateOutputType | null
    _max: Product_meter_numbersMaxAggregateOutputType | null
  }

  type GetProduct_meter_numbersGroupByPayload<T extends product_meter_numbersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_meter_numbersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_meter_numbersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_meter_numbersGroupByOutputType[P]>
            : GetScalarType<T[P], Product_meter_numbersGroupByOutputType[P]>
        }
      >
    >


  export type product_meter_numbersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    electricity?: boolean
    heating?: boolean
    hot_water?: boolean
    cold_water?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_meter_numbers"]>


  export type product_meter_numbersSelectScalar = {
    id?: boolean
    product_id?: boolean
    electricity?: boolean
    heating?: boolean
    hot_water?: boolean
    cold_water?: boolean
  }

  export type product_meter_numbersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $product_meter_numbersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_meter_numbers"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      electricity: string
      heating: string
      hot_water: string
      cold_water: string
    }, ExtArgs["result"]["product_meter_numbers"]>
    composites: {}
  }

  type product_meter_numbersGetPayload<S extends boolean | null | undefined | product_meter_numbersDefaultArgs> = $Result.GetResult<Prisma.$product_meter_numbersPayload, S>

  type product_meter_numbersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_meter_numbersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_meter_numbersCountAggregateInputType | true
    }

  export interface product_meter_numbersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_meter_numbers'], meta: { name: 'product_meter_numbers' } }
    /**
     * Find zero or one Product_meter_numbers that matches the filter.
     * @param {product_meter_numbersFindUniqueArgs} args - Arguments to find a Product_meter_numbers
     * @example
     * // Get one Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_meter_numbersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, product_meter_numbersFindUniqueArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_meter_numbers that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {product_meter_numbersFindUniqueOrThrowArgs} args - Arguments to find a Product_meter_numbers
     * @example
     * // Get one Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_meter_numbersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_meter_numbersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_meter_numbers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_meter_numbersFindFirstArgs} args - Arguments to find a Product_meter_numbers
     * @example
     * // Get one Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_meter_numbersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, product_meter_numbersFindFirstArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_meter_numbers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_meter_numbersFindFirstOrThrowArgs} args - Arguments to find a Product_meter_numbers
     * @example
     * // Get one Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_meter_numbersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_meter_numbersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_meter_numbers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_meter_numbersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.findMany()
     * 
     * // Get first 10 Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_meter_numbersWithIdOnly = await prisma.product_meter_numbers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_meter_numbersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_meter_numbersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_meter_numbers.
     * @param {product_meter_numbersCreateArgs} args - Arguments to create a Product_meter_numbers.
     * @example
     * // Create one Product_meter_numbers
     * const Product_meter_numbers = await prisma.product_meter_numbers.create({
     *   data: {
     *     // ... data to create a Product_meter_numbers
     *   }
     * })
     * 
    **/
    create<T extends product_meter_numbersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, product_meter_numbersCreateArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_meter_numbers.
     * @param {product_meter_numbersCreateManyArgs} args - Arguments to create many Product_meter_numbers.
     * @example
     * // Create many Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends product_meter_numbersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_meter_numbersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_meter_numbers.
     * @param {product_meter_numbersDeleteArgs} args - Arguments to delete one Product_meter_numbers.
     * @example
     * // Delete one Product_meter_numbers
     * const Product_meter_numbers = await prisma.product_meter_numbers.delete({
     *   where: {
     *     // ... filter to delete one Product_meter_numbers
     *   }
     * })
     * 
    **/
    delete<T extends product_meter_numbersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, product_meter_numbersDeleteArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_meter_numbers.
     * @param {product_meter_numbersUpdateArgs} args - Arguments to update one Product_meter_numbers.
     * @example
     * // Update one Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_meter_numbersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, product_meter_numbersUpdateArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_meter_numbers.
     * @param {product_meter_numbersDeleteManyArgs} args - Arguments to filter Product_meter_numbers to delete.
     * @example
     * // Delete a few Product_meter_numbers
     * const { count } = await prisma.product_meter_numbers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_meter_numbersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_meter_numbersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_meter_numbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_meter_numbersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_meter_numbersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, product_meter_numbersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_meter_numbers.
     * @param {product_meter_numbersUpsertArgs} args - Arguments to update or create a Product_meter_numbers.
     * @example
     * // Update or create a Product_meter_numbers
     * const product_meter_numbers = await prisma.product_meter_numbers.upsert({
     *   create: {
     *     // ... data to create a Product_meter_numbers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_meter_numbers we want to update
     *   }
     * })
    **/
    upsert<T extends product_meter_numbersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, product_meter_numbersUpsertArgs<ExtArgs>>
    ): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_meter_numbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_meter_numbersCountArgs} args - Arguments to filter Product_meter_numbers to count.
     * @example
     * // Count the number of Product_meter_numbers
     * const count = await prisma.product_meter_numbers.count({
     *   where: {
     *     // ... the filter for the Product_meter_numbers we want to count
     *   }
     * })
    **/
    count<T extends product_meter_numbersCountArgs>(
      args?: Subset<T, product_meter_numbersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_meter_numbersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_meter_numbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_meter_numbersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_meter_numbersAggregateArgs>(args: Subset<T, Product_meter_numbersAggregateArgs>): Prisma.PrismaPromise<GetProduct_meter_numbersAggregateType<T>>

    /**
     * Group by Product_meter_numbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_meter_numbersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_meter_numbersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_meter_numbersGroupByArgs['orderBy'] }
        : { orderBy?: product_meter_numbersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_meter_numbersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_meter_numbersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_meter_numbers model
   */
  readonly fields: product_meter_numbersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_meter_numbers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_meter_numbersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product_meter_numbers model
   */ 
  interface product_meter_numbersFieldRefs {
    readonly id: FieldRef<"product_meter_numbers", 'Int'>
    readonly product_id: FieldRef<"product_meter_numbers", 'Int'>
    readonly electricity: FieldRef<"product_meter_numbers", 'String'>
    readonly heating: FieldRef<"product_meter_numbers", 'String'>
    readonly hot_water: FieldRef<"product_meter_numbers", 'String'>
    readonly cold_water: FieldRef<"product_meter_numbers", 'String'>
  }
    

  // Custom InputTypes
  /**
   * product_meter_numbers findUnique
   */
  export type product_meter_numbersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * Filter, which product_meter_numbers to fetch.
     */
    where: product_meter_numbersWhereUniqueInput
  }

  /**
   * product_meter_numbers findUniqueOrThrow
   */
  export type product_meter_numbersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * Filter, which product_meter_numbers to fetch.
     */
    where: product_meter_numbersWhereUniqueInput
  }

  /**
   * product_meter_numbers findFirst
   */
  export type product_meter_numbersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * Filter, which product_meter_numbers to fetch.
     */
    where?: product_meter_numbersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_meter_numbers to fetch.
     */
    orderBy?: product_meter_numbersOrderByWithRelationInput | product_meter_numbersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_meter_numbers.
     */
    cursor?: product_meter_numbersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_meter_numbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_meter_numbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_meter_numbers.
     */
    distinct?: Product_meter_numbersScalarFieldEnum | Product_meter_numbersScalarFieldEnum[]
  }

  /**
   * product_meter_numbers findFirstOrThrow
   */
  export type product_meter_numbersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * Filter, which product_meter_numbers to fetch.
     */
    where?: product_meter_numbersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_meter_numbers to fetch.
     */
    orderBy?: product_meter_numbersOrderByWithRelationInput | product_meter_numbersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_meter_numbers.
     */
    cursor?: product_meter_numbersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_meter_numbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_meter_numbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_meter_numbers.
     */
    distinct?: Product_meter_numbersScalarFieldEnum | Product_meter_numbersScalarFieldEnum[]
  }

  /**
   * product_meter_numbers findMany
   */
  export type product_meter_numbersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * Filter, which product_meter_numbers to fetch.
     */
    where?: product_meter_numbersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_meter_numbers to fetch.
     */
    orderBy?: product_meter_numbersOrderByWithRelationInput | product_meter_numbersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_meter_numbers.
     */
    cursor?: product_meter_numbersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_meter_numbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_meter_numbers.
     */
    skip?: number
    distinct?: Product_meter_numbersScalarFieldEnum | Product_meter_numbersScalarFieldEnum[]
  }

  /**
   * product_meter_numbers create
   */
  export type product_meter_numbersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * The data needed to create a product_meter_numbers.
     */
    data: XOR<product_meter_numbersCreateInput, product_meter_numbersUncheckedCreateInput>
  }

  /**
   * product_meter_numbers createMany
   */
  export type product_meter_numbersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_meter_numbers.
     */
    data: product_meter_numbersCreateManyInput | product_meter_numbersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_meter_numbers update
   */
  export type product_meter_numbersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * The data needed to update a product_meter_numbers.
     */
    data: XOR<product_meter_numbersUpdateInput, product_meter_numbersUncheckedUpdateInput>
    /**
     * Choose, which product_meter_numbers to update.
     */
    where: product_meter_numbersWhereUniqueInput
  }

  /**
   * product_meter_numbers updateMany
   */
  export type product_meter_numbersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_meter_numbers.
     */
    data: XOR<product_meter_numbersUpdateManyMutationInput, product_meter_numbersUncheckedUpdateManyInput>
    /**
     * Filter which product_meter_numbers to update
     */
    where?: product_meter_numbersWhereInput
  }

  /**
   * product_meter_numbers upsert
   */
  export type product_meter_numbersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * The filter to search for the product_meter_numbers to update in case it exists.
     */
    where: product_meter_numbersWhereUniqueInput
    /**
     * In case the product_meter_numbers found by the `where` argument doesn't exist, create a new product_meter_numbers with this data.
     */
    create: XOR<product_meter_numbersCreateInput, product_meter_numbersUncheckedCreateInput>
    /**
     * In case the product_meter_numbers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_meter_numbersUpdateInput, product_meter_numbersUncheckedUpdateInput>
  }

  /**
   * product_meter_numbers delete
   */
  export type product_meter_numbersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    /**
     * Filter which product_meter_numbers to delete.
     */
    where: product_meter_numbersWhereUniqueInput
  }

  /**
   * product_meter_numbers deleteMany
   */
  export type product_meter_numbersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_meter_numbers to delete
     */
    where?: product_meter_numbersWhereInput
  }

  /**
   * product_meter_numbers without action
   */
  export type product_meter_numbersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
  }


  /**
   * Model product_price_history
   */

  export type AggregateProduct_price_history = {
    _count: Product_price_historyCountAggregateOutputType | null
    _avg: Product_price_historyAvgAggregateOutputType | null
    _sum: Product_price_historySumAggregateOutputType | null
    _min: Product_price_historyMinAggregateOutputType | null
    _max: Product_price_historyMaxAggregateOutputType | null
  }

  export type Product_price_historyAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    price: Decimal | null
  }

  export type Product_price_historySumAggregateOutputType = {
    id: number | null
    product_id: number | null
    price: Decimal | null
  }

  export type Product_price_historyMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    price: Decimal | null
    created_at: Date | null
  }

  export type Product_price_historyMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    price: Decimal | null
    created_at: Date | null
  }

  export type Product_price_historyCountAggregateOutputType = {
    id: number
    product_id: number
    price: number
    created_at: number
    _all: number
  }


  export type Product_price_historyAvgAggregateInputType = {
    id?: true
    product_id?: true
    price?: true
  }

  export type Product_price_historySumAggregateInputType = {
    id?: true
    product_id?: true
    price?: true
  }

  export type Product_price_historyMinAggregateInputType = {
    id?: true
    product_id?: true
    price?: true
    created_at?: true
  }

  export type Product_price_historyMaxAggregateInputType = {
    id?: true
    product_id?: true
    price?: true
    created_at?: true
  }

  export type Product_price_historyCountAggregateInputType = {
    id?: true
    product_id?: true
    price?: true
    created_at?: true
    _all?: true
  }

  export type Product_price_historyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_price_history to aggregate.
     */
    where?: product_price_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_price_histories to fetch.
     */
    orderBy?: product_price_historyOrderByWithRelationInput | product_price_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_price_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_price_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_price_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_price_histories
    **/
    _count?: true | Product_price_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_price_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_price_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_price_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_price_historyMaxAggregateInputType
  }

  export type GetProduct_price_historyAggregateType<T extends Product_price_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_price_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_price_history[P]>
      : GetScalarType<T[P], AggregateProduct_price_history[P]>
  }




  export type product_price_historyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_price_historyWhereInput
    orderBy?: product_price_historyOrderByWithAggregationInput | product_price_historyOrderByWithAggregationInput[]
    by: Product_price_historyScalarFieldEnum[] | Product_price_historyScalarFieldEnum
    having?: product_price_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_price_historyCountAggregateInputType | true
    _avg?: Product_price_historyAvgAggregateInputType
    _sum?: Product_price_historySumAggregateInputType
    _min?: Product_price_historyMinAggregateInputType
    _max?: Product_price_historyMaxAggregateInputType
  }

  export type Product_price_historyGroupByOutputType = {
    id: number
    product_id: number
    price: Decimal
    created_at: Date
    _count: Product_price_historyCountAggregateOutputType | null
    _avg: Product_price_historyAvgAggregateOutputType | null
    _sum: Product_price_historySumAggregateOutputType | null
    _min: Product_price_historyMinAggregateOutputType | null
    _max: Product_price_historyMaxAggregateOutputType | null
  }

  type GetProduct_price_historyGroupByPayload<T extends product_price_historyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_price_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_price_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_price_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Product_price_historyGroupByOutputType[P]>
        }
      >
    >


  export type product_price_historySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    price?: boolean
    created_at?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_price_history"]>


  export type product_price_historySelectScalar = {
    id?: boolean
    product_id?: boolean
    price?: boolean
    created_at?: boolean
  }

  export type product_price_historyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
  }

  export type $product_price_historyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_price_history"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      price: Prisma.Decimal
      created_at: Date
    }, ExtArgs["result"]["product_price_history"]>
    composites: {}
  }

  type product_price_historyGetPayload<S extends boolean | null | undefined | product_price_historyDefaultArgs> = $Result.GetResult<Prisma.$product_price_historyPayload, S>

  type product_price_historyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_price_historyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_price_historyCountAggregateInputType | true
    }

  export interface product_price_historyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_price_history'], meta: { name: 'product_price_history' } }
    /**
     * Find zero or one Product_price_history that matches the filter.
     * @param {product_price_historyFindUniqueArgs} args - Arguments to find a Product_price_history
     * @example
     * // Get one Product_price_history
     * const product_price_history = await prisma.product_price_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_price_historyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, product_price_historyFindUniqueArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_price_history that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {product_price_historyFindUniqueOrThrowArgs} args - Arguments to find a Product_price_history
     * @example
     * // Get one Product_price_history
     * const product_price_history = await prisma.product_price_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_price_historyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_price_historyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_price_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_price_historyFindFirstArgs} args - Arguments to find a Product_price_history
     * @example
     * // Get one Product_price_history
     * const product_price_history = await prisma.product_price_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_price_historyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, product_price_historyFindFirstArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_price_history that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_price_historyFindFirstOrThrowArgs} args - Arguments to find a Product_price_history
     * @example
     * // Get one Product_price_history
     * const product_price_history = await prisma.product_price_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_price_historyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_price_historyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_price_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_price_historyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_price_histories
     * const product_price_histories = await prisma.product_price_history.findMany()
     * 
     * // Get first 10 Product_price_histories
     * const product_price_histories = await prisma.product_price_history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_price_historyWithIdOnly = await prisma.product_price_history.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_price_historyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_price_historyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_price_history.
     * @param {product_price_historyCreateArgs} args - Arguments to create a Product_price_history.
     * @example
     * // Create one Product_price_history
     * const Product_price_history = await prisma.product_price_history.create({
     *   data: {
     *     // ... data to create a Product_price_history
     *   }
     * })
     * 
    **/
    create<T extends product_price_historyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, product_price_historyCreateArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_price_histories.
     * @param {product_price_historyCreateManyArgs} args - Arguments to create many Product_price_histories.
     * @example
     * // Create many Product_price_histories
     * const product_price_history = await prisma.product_price_history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends product_price_historyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_price_historyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_price_history.
     * @param {product_price_historyDeleteArgs} args - Arguments to delete one Product_price_history.
     * @example
     * // Delete one Product_price_history
     * const Product_price_history = await prisma.product_price_history.delete({
     *   where: {
     *     // ... filter to delete one Product_price_history
     *   }
     * })
     * 
    **/
    delete<T extends product_price_historyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, product_price_historyDeleteArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_price_history.
     * @param {product_price_historyUpdateArgs} args - Arguments to update one Product_price_history.
     * @example
     * // Update one Product_price_history
     * const product_price_history = await prisma.product_price_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_price_historyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, product_price_historyUpdateArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_price_histories.
     * @param {product_price_historyDeleteManyArgs} args - Arguments to filter Product_price_histories to delete.
     * @example
     * // Delete a few Product_price_histories
     * const { count } = await prisma.product_price_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_price_historyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_price_historyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_price_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_price_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_price_histories
     * const product_price_history = await prisma.product_price_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_price_historyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, product_price_historyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_price_history.
     * @param {product_price_historyUpsertArgs} args - Arguments to update or create a Product_price_history.
     * @example
     * // Update or create a Product_price_history
     * const product_price_history = await prisma.product_price_history.upsert({
     *   create: {
     *     // ... data to create a Product_price_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_price_history we want to update
     *   }
     * })
    **/
    upsert<T extends product_price_historyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, product_price_historyUpsertArgs<ExtArgs>>
    ): Prisma__product_price_historyClient<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_price_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_price_historyCountArgs} args - Arguments to filter Product_price_histories to count.
     * @example
     * // Count the number of Product_price_histories
     * const count = await prisma.product_price_history.count({
     *   where: {
     *     // ... the filter for the Product_price_histories we want to count
     *   }
     * })
    **/
    count<T extends product_price_historyCountArgs>(
      args?: Subset<T, product_price_historyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_price_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_price_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_price_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_price_historyAggregateArgs>(args: Subset<T, Product_price_historyAggregateArgs>): Prisma.PrismaPromise<GetProduct_price_historyAggregateType<T>>

    /**
     * Group by Product_price_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_price_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_price_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_price_historyGroupByArgs['orderBy'] }
        : { orderBy?: product_price_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_price_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_price_historyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_price_history model
   */
  readonly fields: product_price_historyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_price_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_price_historyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product_price_history model
   */ 
  interface product_price_historyFieldRefs {
    readonly id: FieldRef<"product_price_history", 'Int'>
    readonly product_id: FieldRef<"product_price_history", 'Int'>
    readonly price: FieldRef<"product_price_history", 'Decimal'>
    readonly created_at: FieldRef<"product_price_history", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * product_price_history findUnique
   */
  export type product_price_historyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * Filter, which product_price_history to fetch.
     */
    where: product_price_historyWhereUniqueInput
  }

  /**
   * product_price_history findUniqueOrThrow
   */
  export type product_price_historyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * Filter, which product_price_history to fetch.
     */
    where: product_price_historyWhereUniqueInput
  }

  /**
   * product_price_history findFirst
   */
  export type product_price_historyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * Filter, which product_price_history to fetch.
     */
    where?: product_price_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_price_histories to fetch.
     */
    orderBy?: product_price_historyOrderByWithRelationInput | product_price_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_price_histories.
     */
    cursor?: product_price_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_price_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_price_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_price_histories.
     */
    distinct?: Product_price_historyScalarFieldEnum | Product_price_historyScalarFieldEnum[]
  }

  /**
   * product_price_history findFirstOrThrow
   */
  export type product_price_historyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * Filter, which product_price_history to fetch.
     */
    where?: product_price_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_price_histories to fetch.
     */
    orderBy?: product_price_historyOrderByWithRelationInput | product_price_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_price_histories.
     */
    cursor?: product_price_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_price_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_price_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_price_histories.
     */
    distinct?: Product_price_historyScalarFieldEnum | Product_price_historyScalarFieldEnum[]
  }

  /**
   * product_price_history findMany
   */
  export type product_price_historyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * Filter, which product_price_histories to fetch.
     */
    where?: product_price_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_price_histories to fetch.
     */
    orderBy?: product_price_historyOrderByWithRelationInput | product_price_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_price_histories.
     */
    cursor?: product_price_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_price_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_price_histories.
     */
    skip?: number
    distinct?: Product_price_historyScalarFieldEnum | Product_price_historyScalarFieldEnum[]
  }

  /**
   * product_price_history create
   */
  export type product_price_historyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * The data needed to create a product_price_history.
     */
    data: XOR<product_price_historyCreateInput, product_price_historyUncheckedCreateInput>
  }

  /**
   * product_price_history createMany
   */
  export type product_price_historyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_price_histories.
     */
    data: product_price_historyCreateManyInput | product_price_historyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_price_history update
   */
  export type product_price_historyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * The data needed to update a product_price_history.
     */
    data: XOR<product_price_historyUpdateInput, product_price_historyUncheckedUpdateInput>
    /**
     * Choose, which product_price_history to update.
     */
    where: product_price_historyWhereUniqueInput
  }

  /**
   * product_price_history updateMany
   */
  export type product_price_historyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_price_histories.
     */
    data: XOR<product_price_historyUpdateManyMutationInput, product_price_historyUncheckedUpdateManyInput>
    /**
     * Filter which product_price_histories to update
     */
    where?: product_price_historyWhereInput
  }

  /**
   * product_price_history upsert
   */
  export type product_price_historyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * The filter to search for the product_price_history to update in case it exists.
     */
    where: product_price_historyWhereUniqueInput
    /**
     * In case the product_price_history found by the `where` argument doesn't exist, create a new product_price_history with this data.
     */
    create: XOR<product_price_historyCreateInput, product_price_historyUncheckedCreateInput>
    /**
     * In case the product_price_history was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_price_historyUpdateInput, product_price_historyUncheckedUpdateInput>
  }

  /**
   * product_price_history delete
   */
  export type product_price_historyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    /**
     * Filter which product_price_history to delete.
     */
    where: product_price_historyWhereUniqueInput
  }

  /**
   * product_price_history deleteMany
   */
  export type product_price_historyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_price_histories to delete
     */
    where?: product_price_historyWhereInput
  }

  /**
   * product_price_history without action
   */
  export type product_price_historyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
  }


  /**
   * Model product_pricing_rules
   */

  export type AggregateProduct_pricing_rules = {
    _count: Product_pricing_rulesCountAggregateOutputType | null
    _avg: Product_pricing_rulesAvgAggregateOutputType | null
    _sum: Product_pricing_rulesSumAggregateOutputType | null
    _min: Product_pricing_rulesMinAggregateOutputType | null
    _max: Product_pricing_rulesMaxAggregateOutputType | null
  }

  export type Product_pricing_rulesAvgAggregateOutputType = {
    id: number | null
    product_type_id: number | null
    step_number: number | null
    price_per_square_meter: Decimal | null
    flats_percent: Decimal | null
    planned_days: number | null
  }

  export type Product_pricing_rulesSumAggregateOutputType = {
    id: number | null
    product_type_id: number | null
    step_number: number | null
    price_per_square_meter: Decimal | null
    flats_percent: Decimal | null
    planned_days: number | null
  }

  export type Product_pricing_rulesMinAggregateOutputType = {
    id: number | null
    product_type_id: number | null
    step_number: number | null
    price_per_square_meter: Decimal | null
    flats_percent: Decimal | null
    planned_days: number | null
  }

  export type Product_pricing_rulesMaxAggregateOutputType = {
    id: number | null
    product_type_id: number | null
    step_number: number | null
    price_per_square_meter: Decimal | null
    flats_percent: Decimal | null
    planned_days: number | null
  }

  export type Product_pricing_rulesCountAggregateOutputType = {
    id: number
    product_type_id: number
    step_number: number
    price_per_square_meter: number
    flats_percent: number
    planned_days: number
    _all: number
  }


  export type Product_pricing_rulesAvgAggregateInputType = {
    id?: true
    product_type_id?: true
    step_number?: true
    price_per_square_meter?: true
    flats_percent?: true
    planned_days?: true
  }

  export type Product_pricing_rulesSumAggregateInputType = {
    id?: true
    product_type_id?: true
    step_number?: true
    price_per_square_meter?: true
    flats_percent?: true
    planned_days?: true
  }

  export type Product_pricing_rulesMinAggregateInputType = {
    id?: true
    product_type_id?: true
    step_number?: true
    price_per_square_meter?: true
    flats_percent?: true
    planned_days?: true
  }

  export type Product_pricing_rulesMaxAggregateInputType = {
    id?: true
    product_type_id?: true
    step_number?: true
    price_per_square_meter?: true
    flats_percent?: true
    planned_days?: true
  }

  export type Product_pricing_rulesCountAggregateInputType = {
    id?: true
    product_type_id?: true
    step_number?: true
    price_per_square_meter?: true
    flats_percent?: true
    planned_days?: true
    _all?: true
  }

  export type Product_pricing_rulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_pricing_rules to aggregate.
     */
    where?: product_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_pricing_rules to fetch.
     */
    orderBy?: product_pricing_rulesOrderByWithRelationInput | product_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_pricing_rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_pricing_rules
    **/
    _count?: true | Product_pricing_rulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_pricing_rulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_pricing_rulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_pricing_rulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_pricing_rulesMaxAggregateInputType
  }

  export type GetProduct_pricing_rulesAggregateType<T extends Product_pricing_rulesAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_pricing_rules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_pricing_rules[P]>
      : GetScalarType<T[P], AggregateProduct_pricing_rules[P]>
  }




  export type product_pricing_rulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_pricing_rulesWhereInput
    orderBy?: product_pricing_rulesOrderByWithAggregationInput | product_pricing_rulesOrderByWithAggregationInput[]
    by: Product_pricing_rulesScalarFieldEnum[] | Product_pricing_rulesScalarFieldEnum
    having?: product_pricing_rulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_pricing_rulesCountAggregateInputType | true
    _avg?: Product_pricing_rulesAvgAggregateInputType
    _sum?: Product_pricing_rulesSumAggregateInputType
    _min?: Product_pricing_rulesMinAggregateInputType
    _max?: Product_pricing_rulesMaxAggregateInputType
  }

  export type Product_pricing_rulesGroupByOutputType = {
    id: number
    product_type_id: number
    step_number: number
    price_per_square_meter: Decimal
    flats_percent: Decimal
    planned_days: number
    _count: Product_pricing_rulesCountAggregateOutputType | null
    _avg: Product_pricing_rulesAvgAggregateOutputType | null
    _sum: Product_pricing_rulesSumAggregateOutputType | null
    _min: Product_pricing_rulesMinAggregateOutputType | null
    _max: Product_pricing_rulesMaxAggregateOutputType | null
  }

  type GetProduct_pricing_rulesGroupByPayload<T extends product_pricing_rulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_pricing_rulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_pricing_rulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_pricing_rulesGroupByOutputType[P]>
            : GetScalarType<T[P], Product_pricing_rulesGroupByOutputType[P]>
        }
      >
    >


  export type product_pricing_rulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_type_id?: boolean
    step_number?: boolean
    price_per_square_meter?: boolean
    flats_percent?: boolean
    planned_days?: boolean
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_pricing_rules"]>


  export type product_pricing_rulesSelectScalar = {
    id?: boolean
    product_type_id?: boolean
    step_number?: boolean
    price_per_square_meter?: boolean
    flats_percent?: boolean
    planned_days?: boolean
  }

  export type product_pricing_rulesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
  }

  export type $product_pricing_rulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_pricing_rules"
    objects: {
      product_types: Prisma.$product_typesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_type_id: number
      step_number: number
      price_per_square_meter: Prisma.Decimal
      flats_percent: Prisma.Decimal
      planned_days: number
    }, ExtArgs["result"]["product_pricing_rules"]>
    composites: {}
  }

  type product_pricing_rulesGetPayload<S extends boolean | null | undefined | product_pricing_rulesDefaultArgs> = $Result.GetResult<Prisma.$product_pricing_rulesPayload, S>

  type product_pricing_rulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_pricing_rulesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_pricing_rulesCountAggregateInputType | true
    }

  export interface product_pricing_rulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_pricing_rules'], meta: { name: 'product_pricing_rules' } }
    /**
     * Find zero or one Product_pricing_rules that matches the filter.
     * @param {product_pricing_rulesFindUniqueArgs} args - Arguments to find a Product_pricing_rules
     * @example
     * // Get one Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_pricing_rulesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, product_pricing_rulesFindUniqueArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_pricing_rules that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {product_pricing_rulesFindUniqueOrThrowArgs} args - Arguments to find a Product_pricing_rules
     * @example
     * // Get one Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_pricing_rulesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_pricing_rulesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_pricing_rules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricing_rulesFindFirstArgs} args - Arguments to find a Product_pricing_rules
     * @example
     * // Get one Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_pricing_rulesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, product_pricing_rulesFindFirstArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_pricing_rules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricing_rulesFindFirstOrThrowArgs} args - Arguments to find a Product_pricing_rules
     * @example
     * // Get one Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_pricing_rulesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_pricing_rulesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_pricing_rules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricing_rulesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.findMany()
     * 
     * // Get first 10 Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_pricing_rulesWithIdOnly = await prisma.product_pricing_rules.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_pricing_rulesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_pricing_rulesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_pricing_rules.
     * @param {product_pricing_rulesCreateArgs} args - Arguments to create a Product_pricing_rules.
     * @example
     * // Create one Product_pricing_rules
     * const Product_pricing_rules = await prisma.product_pricing_rules.create({
     *   data: {
     *     // ... data to create a Product_pricing_rules
     *   }
     * })
     * 
    **/
    create<T extends product_pricing_rulesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, product_pricing_rulesCreateArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_pricing_rules.
     * @param {product_pricing_rulesCreateManyArgs} args - Arguments to create many Product_pricing_rules.
     * @example
     * // Create many Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends product_pricing_rulesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_pricing_rulesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_pricing_rules.
     * @param {product_pricing_rulesDeleteArgs} args - Arguments to delete one Product_pricing_rules.
     * @example
     * // Delete one Product_pricing_rules
     * const Product_pricing_rules = await prisma.product_pricing_rules.delete({
     *   where: {
     *     // ... filter to delete one Product_pricing_rules
     *   }
     * })
     * 
    **/
    delete<T extends product_pricing_rulesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, product_pricing_rulesDeleteArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_pricing_rules.
     * @param {product_pricing_rulesUpdateArgs} args - Arguments to update one Product_pricing_rules.
     * @example
     * // Update one Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_pricing_rulesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, product_pricing_rulesUpdateArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_pricing_rules.
     * @param {product_pricing_rulesDeleteManyArgs} args - Arguments to filter Product_pricing_rules to delete.
     * @example
     * // Delete a few Product_pricing_rules
     * const { count } = await prisma.product_pricing_rules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_pricing_rulesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_pricing_rulesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricing_rulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_pricing_rulesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, product_pricing_rulesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_pricing_rules.
     * @param {product_pricing_rulesUpsertArgs} args - Arguments to update or create a Product_pricing_rules.
     * @example
     * // Update or create a Product_pricing_rules
     * const product_pricing_rules = await prisma.product_pricing_rules.upsert({
     *   create: {
     *     // ... data to create a Product_pricing_rules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_pricing_rules we want to update
     *   }
     * })
    **/
    upsert<T extends product_pricing_rulesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, product_pricing_rulesUpsertArgs<ExtArgs>>
    ): Prisma__product_pricing_rulesClient<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricing_rulesCountArgs} args - Arguments to filter Product_pricing_rules to count.
     * @example
     * // Count the number of Product_pricing_rules
     * const count = await prisma.product_pricing_rules.count({
     *   where: {
     *     // ... the filter for the Product_pricing_rules we want to count
     *   }
     * })
    **/
    count<T extends product_pricing_rulesCountArgs>(
      args?: Subset<T, product_pricing_rulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_pricing_rulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_pricing_rulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_pricing_rulesAggregateArgs>(args: Subset<T, Product_pricing_rulesAggregateArgs>): Prisma.PrismaPromise<GetProduct_pricing_rulesAggregateType<T>>

    /**
     * Group by Product_pricing_rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_pricing_rulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_pricing_rulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_pricing_rulesGroupByArgs['orderBy'] }
        : { orderBy?: product_pricing_rulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_pricing_rulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_pricing_rulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_pricing_rules model
   */
  readonly fields: product_pricing_rulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_pricing_rules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_pricing_rulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product_types<T extends product_typesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_typesDefaultArgs<ExtArgs>>): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product_pricing_rules model
   */ 
  interface product_pricing_rulesFieldRefs {
    readonly id: FieldRef<"product_pricing_rules", 'Int'>
    readonly product_type_id: FieldRef<"product_pricing_rules", 'Int'>
    readonly step_number: FieldRef<"product_pricing_rules", 'Int'>
    readonly price_per_square_meter: FieldRef<"product_pricing_rules", 'Decimal'>
    readonly flats_percent: FieldRef<"product_pricing_rules", 'Decimal'>
    readonly planned_days: FieldRef<"product_pricing_rules", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * product_pricing_rules findUnique
   */
  export type product_pricing_rulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which product_pricing_rules to fetch.
     */
    where: product_pricing_rulesWhereUniqueInput
  }

  /**
   * product_pricing_rules findUniqueOrThrow
   */
  export type product_pricing_rulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which product_pricing_rules to fetch.
     */
    where: product_pricing_rulesWhereUniqueInput
  }

  /**
   * product_pricing_rules findFirst
   */
  export type product_pricing_rulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which product_pricing_rules to fetch.
     */
    where?: product_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_pricing_rules to fetch.
     */
    orderBy?: product_pricing_rulesOrderByWithRelationInput | product_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_pricing_rules.
     */
    cursor?: product_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_pricing_rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_pricing_rules.
     */
    distinct?: Product_pricing_rulesScalarFieldEnum | Product_pricing_rulesScalarFieldEnum[]
  }

  /**
   * product_pricing_rules findFirstOrThrow
   */
  export type product_pricing_rulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which product_pricing_rules to fetch.
     */
    where?: product_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_pricing_rules to fetch.
     */
    orderBy?: product_pricing_rulesOrderByWithRelationInput | product_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_pricing_rules.
     */
    cursor?: product_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_pricing_rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_pricing_rules.
     */
    distinct?: Product_pricing_rulesScalarFieldEnum | Product_pricing_rulesScalarFieldEnum[]
  }

  /**
   * product_pricing_rules findMany
   */
  export type product_pricing_rulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter, which product_pricing_rules to fetch.
     */
    where?: product_pricing_rulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_pricing_rules to fetch.
     */
    orderBy?: product_pricing_rulesOrderByWithRelationInput | product_pricing_rulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_pricing_rules.
     */
    cursor?: product_pricing_rulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_pricing_rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_pricing_rules.
     */
    skip?: number
    distinct?: Product_pricing_rulesScalarFieldEnum | Product_pricing_rulesScalarFieldEnum[]
  }

  /**
   * product_pricing_rules create
   */
  export type product_pricing_rulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * The data needed to create a product_pricing_rules.
     */
    data: XOR<product_pricing_rulesCreateInput, product_pricing_rulesUncheckedCreateInput>
  }

  /**
   * product_pricing_rules createMany
   */
  export type product_pricing_rulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_pricing_rules.
     */
    data: product_pricing_rulesCreateManyInput | product_pricing_rulesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_pricing_rules update
   */
  export type product_pricing_rulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * The data needed to update a product_pricing_rules.
     */
    data: XOR<product_pricing_rulesUpdateInput, product_pricing_rulesUncheckedUpdateInput>
    /**
     * Choose, which product_pricing_rules to update.
     */
    where: product_pricing_rulesWhereUniqueInput
  }

  /**
   * product_pricing_rules updateMany
   */
  export type product_pricing_rulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_pricing_rules.
     */
    data: XOR<product_pricing_rulesUpdateManyMutationInput, product_pricing_rulesUncheckedUpdateManyInput>
    /**
     * Filter which product_pricing_rules to update
     */
    where?: product_pricing_rulesWhereInput
  }

  /**
   * product_pricing_rules upsert
   */
  export type product_pricing_rulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * The filter to search for the product_pricing_rules to update in case it exists.
     */
    where: product_pricing_rulesWhereUniqueInput
    /**
     * In case the product_pricing_rules found by the `where` argument doesn't exist, create a new product_pricing_rules with this data.
     */
    create: XOR<product_pricing_rulesCreateInput, product_pricing_rulesUncheckedCreateInput>
    /**
     * In case the product_pricing_rules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_pricing_rulesUpdateInput, product_pricing_rulesUncheckedUpdateInput>
  }

  /**
   * product_pricing_rules delete
   */
  export type product_pricing_rulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    /**
     * Filter which product_pricing_rules to delete.
     */
    where: product_pricing_rulesWhereUniqueInput
  }

  /**
   * product_pricing_rules deleteMany
   */
  export type product_pricing_rulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_pricing_rules to delete
     */
    where?: product_pricing_rulesWhereInput
  }

  /**
   * product_pricing_rules without action
   */
  export type product_pricing_rulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
  }


  /**
   * Model product_types
   */

  export type AggregateProduct_types = {
    _count: Product_typesCountAggregateOutputType | null
    _avg: Product_typesAvgAggregateOutputType | null
    _sum: Product_typesSumAggregateOutputType | null
    _min: Product_typesMinAggregateOutputType | null
    _max: Product_typesMaxAggregateOutputType | null
  }

  export type Product_typesAvgAggregateOutputType = {
    id: number | null
    object_id: number | null
  }

  export type Product_typesSumAggregateOutputType = {
    id: number | null
    object_id: number | null
  }

  export type Product_typesMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    object_id: number | null
  }

  export type Product_typesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    object_id: number | null
  }

  export type Product_typesCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    updated_at: number
    object_id: number
    _all: number
  }


  export type Product_typesAvgAggregateInputType = {
    id?: true
    object_id?: true
  }

  export type Product_typesSumAggregateInputType = {
    id?: true
    object_id?: true
  }

  export type Product_typesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    object_id?: true
  }

  export type Product_typesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    object_id?: true
  }

  export type Product_typesCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    object_id?: true
    _all?: true
  }

  export type Product_typesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_types to aggregate.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned product_types
    **/
    _count?: true | Product_typesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_typesMaxAggregateInputType
  }

  export type GetProduct_typesAggregateType<T extends Product_typesAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_types]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_types[P]>
      : GetScalarType<T[P], AggregateProduct_types[P]>
  }




  export type product_typesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: product_typesWhereInput
    orderBy?: product_typesOrderByWithAggregationInput | product_typesOrderByWithAggregationInput[]
    by: Product_typesScalarFieldEnum[] | Product_typesScalarFieldEnum
    having?: product_typesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_typesCountAggregateInputType | true
    _avg?: Product_typesAvgAggregateInputType
    _sum?: Product_typesSumAggregateInputType
    _min?: Product_typesMinAggregateInputType
    _max?: Product_typesMaxAggregateInputType
  }

  export type Product_typesGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    updated_at: Date
    object_id: number
    _count: Product_typesCountAggregateOutputType | null
    _avg: Product_typesAvgAggregateOutputType | null
    _sum: Product_typesSumAggregateOutputType | null
    _min: Product_typesMinAggregateOutputType | null
    _max: Product_typesMaxAggregateOutputType | null
  }

  type GetProduct_typesGroupByPayload<T extends product_typesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Product_typesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_typesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_typesGroupByOutputType[P]>
            : GetScalarType<T[P], Product_typesGroupByOutputType[P]>
        }
      >
    >


  export type product_typesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    object_id?: boolean
    floor_pricing_rules?: boolean | product_types$floor_pricing_rulesArgs<ExtArgs>
    product_pricing_rules?: boolean | product_types$product_pricing_rulesArgs<ExtArgs>
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    products?: boolean | product_types$productsArgs<ExtArgs>
    r_tags_product_types?: boolean | product_types$r_tags_product_typesArgs<ExtArgs>
    _count?: boolean | Product_typesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product_types"]>


  export type product_typesSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    object_id?: boolean
  }

  export type product_typesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    floor_pricing_rules?: boolean | product_types$floor_pricing_rulesArgs<ExtArgs>
    product_pricing_rules?: boolean | product_types$product_pricing_rulesArgs<ExtArgs>
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    products?: boolean | product_types$productsArgs<ExtArgs>
    r_tags_product_types?: boolean | product_types$r_tags_product_typesArgs<ExtArgs>
    _count?: boolean | Product_typesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $product_typesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product_types"
    objects: {
      floor_pricing_rules: Prisma.$floor_pricing_rulesPayload<ExtArgs>[]
      product_pricing_rules: Prisma.$product_pricing_rulesPayload<ExtArgs>[]
      objects: Prisma.$objectsPayload<ExtArgs>
      products: Prisma.$productsPayload<ExtArgs>[]
      r_tags_product_types: Prisma.$r_tags_product_typesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      updated_at: Date
      object_id: number
    }, ExtArgs["result"]["product_types"]>
    composites: {}
  }

  type product_typesGetPayload<S extends boolean | null | undefined | product_typesDefaultArgs> = $Result.GetResult<Prisma.$product_typesPayload, S>

  type product_typesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<product_typesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Product_typesCountAggregateInputType | true
    }

  export interface product_typesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product_types'], meta: { name: 'product_types' } }
    /**
     * Find zero or one Product_types that matches the filter.
     * @param {product_typesFindUniqueArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends product_typesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesFindUniqueArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product_types that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {product_typesFindUniqueOrThrowArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends product_typesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesFindFirstArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends product_typesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindFirstArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product_types that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesFindFirstOrThrowArgs} args - Arguments to find a Product_types
     * @example
     * // Get one Product_types
     * const product_types = await prisma.product_types.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends product_typesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Product_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_types
     * const product_types = await prisma.product_types.findMany()
     * 
     * // Get first 10 Product_types
     * const product_types = await prisma.product_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_typesWithIdOnly = await prisma.product_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends product_typesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product_types.
     * @param {product_typesCreateArgs} args - Arguments to create a Product_types.
     * @example
     * // Create one Product_types
     * const Product_types = await prisma.product_types.create({
     *   data: {
     *     // ... data to create a Product_types
     *   }
     * })
     * 
    **/
    create<T extends product_typesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesCreateArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Product_types.
     * @param {product_typesCreateManyArgs} args - Arguments to create many Product_types.
     * @example
     * // Create many Product_types
     * const product_types = await prisma.product_types.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends product_typesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product_types.
     * @param {product_typesDeleteArgs} args - Arguments to delete one Product_types.
     * @example
     * // Delete one Product_types
     * const Product_types = await prisma.product_types.delete({
     *   where: {
     *     // ... filter to delete one Product_types
     *   }
     * })
     * 
    **/
    delete<T extends product_typesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesDeleteArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product_types.
     * @param {product_typesUpdateArgs} args - Arguments to update one Product_types.
     * @example
     * // Update one Product_types
     * const product_types = await prisma.product_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends product_typesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesUpdateArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Product_types.
     * @param {product_typesDeleteManyArgs} args - Arguments to filter Product_types to delete.
     * @example
     * // Delete a few Product_types
     * const { count } = await prisma.product_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends product_typesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, product_typesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_types
     * const product_types = await prisma.product_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends product_typesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_types.
     * @param {product_typesUpsertArgs} args - Arguments to update or create a Product_types.
     * @example
     * // Update or create a Product_types
     * const product_types = await prisma.product_types.upsert({
     *   create: {
     *     // ... data to create a Product_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_types we want to update
     *   }
     * })
    **/
    upsert<T extends product_typesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, product_typesUpsertArgs<ExtArgs>>
    ): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesCountArgs} args - Arguments to filter Product_types to count.
     * @example
     * // Count the number of Product_types
     * const count = await prisma.product_types.count({
     *   where: {
     *     // ... the filter for the Product_types we want to count
     *   }
     * })
    **/
    count<T extends product_typesCountArgs>(
      args?: Subset<T, product_typesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_typesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_typesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_typesAggregateArgs>(args: Subset<T, Product_typesAggregateArgs>): Prisma.PrismaPromise<GetProduct_typesAggregateType<T>>

    /**
     * Group by Product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {product_typesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends product_typesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: product_typesGroupByArgs['orderBy'] }
        : { orderBy?: product_typesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, product_typesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_typesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product_types model
   */
  readonly fields: product_typesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__product_typesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    floor_pricing_rules<T extends product_types$floor_pricing_rulesArgs<ExtArgs> = {}>(args?: Subset<T, product_types$floor_pricing_rulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$floor_pricing_rulesPayload<ExtArgs>, T, 'findMany'> | Null>;

    product_pricing_rules<T extends product_types$product_pricing_rulesArgs<ExtArgs> = {}>(args?: Subset<T, product_types$product_pricing_rulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_pricing_rulesPayload<ExtArgs>, T, 'findMany'> | Null>;

    objects<T extends objectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, objectsDefaultArgs<ExtArgs>>): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    products<T extends product_types$productsArgs<ExtArgs> = {}>(args?: Subset<T, product_types$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_product_types<T extends product_types$r_tags_product_typesArgs<ExtArgs> = {}>(args?: Subset<T, product_types$r_tags_product_typesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the product_types model
   */ 
  interface product_typesFieldRefs {
    readonly id: FieldRef<"product_types", 'Int'>
    readonly name: FieldRef<"product_types", 'String'>
    readonly created_at: FieldRef<"product_types", 'DateTime'>
    readonly updated_at: FieldRef<"product_types", 'DateTime'>
    readonly object_id: FieldRef<"product_types", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * product_types findUnique
   */
  export type product_typesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types findUniqueOrThrow
   */
  export type product_typesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types findFirst
   */
  export type product_typesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_types.
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_types.
     */
    distinct?: Product_typesScalarFieldEnum | Product_typesScalarFieldEnum[]
  }

  /**
   * product_types findFirstOrThrow
   */
  export type product_typesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for product_types.
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of product_types.
     */
    distinct?: Product_typesScalarFieldEnum | Product_typesScalarFieldEnum[]
  }

  /**
   * product_types findMany
   */
  export type product_typesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter, which product_types to fetch.
     */
    where?: product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of product_types to fetch.
     */
    orderBy?: product_typesOrderByWithRelationInput | product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing product_types.
     */
    cursor?: product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` product_types.
     */
    skip?: number
    distinct?: Product_typesScalarFieldEnum | Product_typesScalarFieldEnum[]
  }

  /**
   * product_types create
   */
  export type product_typesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * The data needed to create a product_types.
     */
    data: XOR<product_typesCreateInput, product_typesUncheckedCreateInput>
  }

  /**
   * product_types createMany
   */
  export type product_typesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many product_types.
     */
    data: product_typesCreateManyInput | product_typesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product_types update
   */
  export type product_typesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * The data needed to update a product_types.
     */
    data: XOR<product_typesUpdateInput, product_typesUncheckedUpdateInput>
    /**
     * Choose, which product_types to update.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types updateMany
   */
  export type product_typesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update product_types.
     */
    data: XOR<product_typesUpdateManyMutationInput, product_typesUncheckedUpdateManyInput>
    /**
     * Filter which product_types to update
     */
    where?: product_typesWhereInput
  }

  /**
   * product_types upsert
   */
  export type product_typesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * The filter to search for the product_types to update in case it exists.
     */
    where: product_typesWhereUniqueInput
    /**
     * In case the product_types found by the `where` argument doesn't exist, create a new product_types with this data.
     */
    create: XOR<product_typesCreateInput, product_typesUncheckedCreateInput>
    /**
     * In case the product_types was found with the provided `where` argument, update it with this data.
     */
    update: XOR<product_typesUpdateInput, product_typesUncheckedUpdateInput>
  }

  /**
   * product_types delete
   */
  export type product_typesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    /**
     * Filter which product_types to delete.
     */
    where: product_typesWhereUniqueInput
  }

  /**
   * product_types deleteMany
   */
  export type product_typesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product_types to delete
     */
    where?: product_typesWhereInput
  }

  /**
   * product_types.floor_pricing_rules
   */
  export type product_types$floor_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floor_pricing_rules
     */
    select?: floor_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floor_pricing_rulesInclude<ExtArgs> | null
    where?: floor_pricing_rulesWhereInput
    orderBy?: floor_pricing_rulesOrderByWithRelationInput | floor_pricing_rulesOrderByWithRelationInput[]
    cursor?: floor_pricing_rulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Floor_pricing_rulesScalarFieldEnum | Floor_pricing_rulesScalarFieldEnum[]
  }

  /**
   * product_types.product_pricing_rules
   */
  export type product_types$product_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_pricing_rules
     */
    select?: product_pricing_rulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_pricing_rulesInclude<ExtArgs> | null
    where?: product_pricing_rulesWhereInput
    orderBy?: product_pricing_rulesOrderByWithRelationInput | product_pricing_rulesOrderByWithRelationInput[]
    cursor?: product_pricing_rulesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_pricing_rulesScalarFieldEnum | Product_pricing_rulesScalarFieldEnum[]
  }

  /**
   * product_types.products
   */
  export type product_types$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * product_types.r_tags_product_types
   */
  export type product_types$r_tags_product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    where?: r_tags_product_typesWhereInput
    orderBy?: r_tags_product_typesOrderByWithRelationInput | r_tags_product_typesOrderByWithRelationInput[]
    cursor?: r_tags_product_typesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_product_typesScalarFieldEnum | R_tags_product_typesScalarFieldEnum[]
  }

  /**
   * product_types without action
   */
  export type product_typesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
  }


  /**
   * Model products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    area: Decimal | null
    price: Decimal | null
    object_id: number | null
    product_type_id: number | null
    category_id: number | null
    floor_id: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    area: Decimal | null
    price: Decimal | null
    object_id: number | null
    product_type_id: number | null
    category_id: number | null
    floor_id: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    number: string | null
    area: Decimal | null
    price: Decimal | null
    one_gt_id: string | null
    created_at: Date | null
    updated_at: Date | null
    object_id: number | null
    product_type_id: number | null
    category_id: number | null
    floor_id: number | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    number: string | null
    area: Decimal | null
    price: Decimal | null
    one_gt_id: string | null
    created_at: Date | null
    updated_at: Date | null
    object_id: number | null
    product_type_id: number | null
    category_id: number | null
    floor_id: number | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    number: number
    area: number
    price: number
    one_gt_id: number
    created_at: number
    updated_at: number
    object_id: number
    product_type_id: number
    category_id: number
    floor_id: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    area?: true
    price?: true
    object_id?: true
    product_type_id?: true
    category_id?: true
    floor_id?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    area?: true
    price?: true
    object_id?: true
    product_type_id?: true
    category_id?: true
    floor_id?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    number?: true
    area?: true
    price?: true
    one_gt_id?: true
    created_at?: true
    updated_at?: true
    object_id?: true
    product_type_id?: true
    category_id?: true
    floor_id?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    number?: true
    area?: true
    price?: true
    one_gt_id?: true
    created_at?: true
    updated_at?: true
    object_id?: true
    product_type_id?: true
    category_id?: true
    floor_id?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    number?: true
    area?: true
    price?: true
    one_gt_id?: true
    created_at?: true
    updated_at?: true
    object_id?: true
    product_type_id?: true
    category_id?: true
    floor_id?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: number
    number: string
    area: Decimal
    price: Decimal
    one_gt_id: string | null
    created_at: Date
    updated_at: Date
    object_id: number
    product_type_id: number | null
    category_id: number
    floor_id: number | null
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    area?: boolean
    price?: boolean
    one_gt_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    object_id?: boolean
    product_type_id?: boolean
    category_id?: boolean
    floor_id?: boolean
    integrations?: boolean | products$integrationsArgs<ExtArgs>
    product_files?: boolean | products$product_filesArgs<ExtArgs>
    product_meter_numbers?: boolean | products$product_meter_numbersArgs<ExtArgs>
    product_price_history?: boolean | products$product_price_historyArgs<ExtArgs>
    floors?: boolean | products$floorsArgs<ExtArgs>
    product_categories?: boolean | product_categoriesDefaultArgs<ExtArgs>
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    product_types?: boolean | products$product_typesArgs<ExtArgs>
    r_product_tags?: boolean | products$r_product_tagsArgs<ExtArgs>
    r_tags_products?: boolean | products$r_tags_productsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>


  export type productsSelectScalar = {
    id?: boolean
    number?: boolean
    area?: boolean
    price?: boolean
    one_gt_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    object_id?: boolean
    product_type_id?: boolean
    category_id?: boolean
    floor_id?: boolean
  }

  export type productsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrations?: boolean | products$integrationsArgs<ExtArgs>
    product_files?: boolean | products$product_filesArgs<ExtArgs>
    product_meter_numbers?: boolean | products$product_meter_numbersArgs<ExtArgs>
    product_price_history?: boolean | products$product_price_historyArgs<ExtArgs>
    floors?: boolean | products$floorsArgs<ExtArgs>
    product_categories?: boolean | product_categoriesDefaultArgs<ExtArgs>
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    product_types?: boolean | products$product_typesArgs<ExtArgs>
    r_product_tags?: boolean | products$r_product_tagsArgs<ExtArgs>
    r_tags_products?: boolean | products$r_tags_productsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $productsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "products"
    objects: {
      integrations: Prisma.$integrationsPayload<ExtArgs>[]
      product_files: Prisma.$product_filesPayload<ExtArgs>[]
      product_meter_numbers: Prisma.$product_meter_numbersPayload<ExtArgs> | null
      product_price_history: Prisma.$product_price_historyPayload<ExtArgs>[]
      floors: Prisma.$floorsPayload<ExtArgs> | null
      product_categories: Prisma.$product_categoriesPayload<ExtArgs>
      objects: Prisma.$objectsPayload<ExtArgs>
      product_types: Prisma.$product_typesPayload<ExtArgs> | null
      r_product_tags: Prisma.$r_product_tagsPayload<ExtArgs>[]
      r_tags_products: Prisma.$r_tags_productsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      area: Prisma.Decimal
      price: Prisma.Decimal
      one_gt_id: string | null
      created_at: Date
      updated_at: Date
      object_id: number
      product_type_id: number | null
      category_id: number
      floor_id: number | null
    }, ExtArgs["result"]["products"]>
    composites: {}
  }

  type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = $Result.GetResult<Prisma.$productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productsCreateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     * @param {productsCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends productsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productsDeleteArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpsertArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    integrations<T extends products$integrationsArgs<ExtArgs> = {}>(args?: Subset<T, products$integrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$integrationsPayload<ExtArgs>, T, 'findMany'> | Null>;

    product_files<T extends products$product_filesArgs<ExtArgs> = {}>(args?: Subset<T, products$product_filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_filesPayload<ExtArgs>, T, 'findMany'> | Null>;

    product_meter_numbers<T extends products$product_meter_numbersArgs<ExtArgs> = {}>(args?: Subset<T, products$product_meter_numbersArgs<ExtArgs>>): Prisma__product_meter_numbersClient<$Result.GetResult<Prisma.$product_meter_numbersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    product_price_history<T extends products$product_price_historyArgs<ExtArgs> = {}>(args?: Subset<T, products$product_price_historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$product_price_historyPayload<ExtArgs>, T, 'findMany'> | Null>;

    floors<T extends products$floorsArgs<ExtArgs> = {}>(args?: Subset<T, products$floorsArgs<ExtArgs>>): Prisma__floorsClient<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    product_categories<T extends product_categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_categoriesDefaultArgs<ExtArgs>>): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    objects<T extends objectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, objectsDefaultArgs<ExtArgs>>): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product_types<T extends products$product_typesArgs<ExtArgs> = {}>(args?: Subset<T, products$product_typesArgs<ExtArgs>>): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    r_product_tags<T extends products$r_product_tagsArgs<ExtArgs> = {}>(args?: Subset<T, products$r_product_tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_products<T extends products$r_tags_productsArgs<ExtArgs> = {}>(args?: Subset<T, products$r_tags_productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'Int'>
    readonly number: FieldRef<"products", 'String'>
    readonly area: FieldRef<"products", 'Decimal'>
    readonly price: FieldRef<"products", 'Decimal'>
    readonly one_gt_id: FieldRef<"products", 'String'>
    readonly created_at: FieldRef<"products", 'DateTime'>
    readonly updated_at: FieldRef<"products", 'DateTime'>
    readonly object_id: FieldRef<"products", 'Int'>
    readonly product_type_id: FieldRef<"products", 'Int'>
    readonly category_id: FieldRef<"products", 'Int'>
    readonly floor_id: FieldRef<"products", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }

  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }

  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }

  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }

  /**
   * products.integrations
   */
  export type products$integrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the integrations
     */
    select?: integrationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: integrationsInclude<ExtArgs> | null
    where?: integrationsWhereInput
    orderBy?: integrationsOrderByWithRelationInput | integrationsOrderByWithRelationInput[]
    cursor?: integrationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationsScalarFieldEnum | IntegrationsScalarFieldEnum[]
  }

  /**
   * products.product_files
   */
  export type products$product_filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_files
     */
    select?: product_filesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_filesInclude<ExtArgs> | null
    where?: product_filesWhereInput
    orderBy?: product_filesOrderByWithRelationInput | product_filesOrderByWithRelationInput[]
    cursor?: product_filesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_filesScalarFieldEnum | Product_filesScalarFieldEnum[]
  }

  /**
   * products.product_meter_numbers
   */
  export type products$product_meter_numbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_meter_numbers
     */
    select?: product_meter_numbersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_meter_numbersInclude<ExtArgs> | null
    where?: product_meter_numbersWhereInput
  }

  /**
   * products.product_price_history
   */
  export type products$product_price_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_price_history
     */
    select?: product_price_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_price_historyInclude<ExtArgs> | null
    where?: product_price_historyWhereInput
    orderBy?: product_price_historyOrderByWithRelationInput | product_price_historyOrderByWithRelationInput[]
    cursor?: product_price_historyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Product_price_historyScalarFieldEnum | Product_price_historyScalarFieldEnum[]
  }

  /**
   * products.floors
   */
  export type products$floorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    where?: floorsWhereInput
  }

  /**
   * products.product_types
   */
  export type products$product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product_types
     */
    select?: product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: product_typesInclude<ExtArgs> | null
    where?: product_typesWhereInput
  }

  /**
   * products.r_product_tags
   */
  export type products$r_product_tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    where?: r_product_tagsWhereInput
    orderBy?: r_product_tagsOrderByWithRelationInput | r_product_tagsOrderByWithRelationInput[]
    cursor?: r_product_tagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_product_tagsScalarFieldEnum | R_product_tagsScalarFieldEnum[]
  }

  /**
   * products.r_tags_products
   */
  export type products$r_tags_productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    where?: r_tags_productsWhereInput
    orderBy?: r_tags_productsOrderByWithRelationInput | r_tags_productsOrderByWithRelationInput[]
    cursor?: r_tags_productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_productsScalarFieldEnum | R_tags_productsScalarFieldEnum[]
  }

  /**
   * products without action
   */
  export type productsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
  }


  /**
   * Model projects
   */

  export type AggregateProjects = {
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  export type ProjectsAvgAggregateOutputType = {
    id: number | null
  }

  export type ProjectsSumAggregateOutputType = {
    id: number | null
  }

  export type ProjectsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ProjectsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ProjectsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ProjectsAvgAggregateInputType = {
    id?: true
  }

  export type ProjectsSumAggregateInputType = {
    id?: true
  }

  export type ProjectsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProjectsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProjectsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ProjectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which projects to aggregate.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned projects
    **/
    _count?: true | ProjectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectsMaxAggregateInputType
  }

  export type GetProjectsAggregateType<T extends ProjectsAggregateArgs> = {
        [P in keyof T & keyof AggregateProjects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjects[P]>
      : GetScalarType<T[P], AggregateProjects[P]>
  }




  export type projectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: projectsWhereInput
    orderBy?: projectsOrderByWithAggregationInput | projectsOrderByWithAggregationInput[]
    by: ProjectsScalarFieldEnum[] | ProjectsScalarFieldEnum
    having?: projectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectsCountAggregateInputType | true
    _avg?: ProjectsAvgAggregateInputType
    _sum?: ProjectsSumAggregateInputType
    _min?: ProjectsMinAggregateInputType
    _max?: ProjectsMaxAggregateInputType
  }

  export type ProjectsGroupByOutputType = {
    id: number
    name: string
    _count: ProjectsCountAggregateOutputType | null
    _avg: ProjectsAvgAggregateOutputType | null
    _sum: ProjectsSumAggregateOutputType | null
    _min: ProjectsMinAggregateOutputType | null
    _max: ProjectsMaxAggregateOutputType | null
  }

  type GetProjectsGroupByPayload<T extends projectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectsGroupByOutputType[P]>
        }
      >
    >


  export type projectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    r_tags_projects?: boolean | projects$r_tags_projectsArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projects"]>


  export type projectsSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type projectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    r_tags_projects?: boolean | projects$r_tags_projectsArgs<ExtArgs>
    _count?: boolean | ProjectsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $projectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "projects"
    objects: {
      r_tags_projects: Prisma.$r_tags_projectsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["projects"]>
    composites: {}
  }

  type projectsGetPayload<S extends boolean | null | undefined | projectsDefaultArgs> = $Result.GetResult<Prisma.$projectsPayload, S>

  type projectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<projectsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectsCountAggregateInputType | true
    }

  export interface projectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['projects'], meta: { name: 'projects' } }
    /**
     * Find zero or one Projects that matches the filter.
     * @param {projectsFindUniqueArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends projectsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, projectsFindUniqueArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Projects that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {projectsFindUniqueOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends projectsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, projectsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsFindFirstArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends projectsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, projectsFindFirstArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Projects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsFindFirstOrThrowArgs} args - Arguments to find a Projects
     * @example
     * // Get one Projects
     * const projects = await prisma.projects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends projectsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, projectsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.projects.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectsWithIdOnly = await prisma.projects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends projectsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, projectsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Projects.
     * @param {projectsCreateArgs} args - Arguments to create a Projects.
     * @example
     * // Create one Projects
     * const Projects = await prisma.projects.create({
     *   data: {
     *     // ... data to create a Projects
     *   }
     * })
     * 
    **/
    create<T extends projectsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, projectsCreateArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {projectsCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const projects = await prisma.projects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends projectsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, projectsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Projects.
     * @param {projectsDeleteArgs} args - Arguments to delete one Projects.
     * @example
     * // Delete one Projects
     * const Projects = await prisma.projects.delete({
     *   where: {
     *     // ... filter to delete one Projects
     *   }
     * })
     * 
    **/
    delete<T extends projectsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, projectsDeleteArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Projects.
     * @param {projectsUpdateArgs} args - Arguments to update one Projects.
     * @example
     * // Update one Projects
     * const projects = await prisma.projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends projectsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, projectsUpdateArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {projectsDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends projectsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, projectsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const projects = await prisma.projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends projectsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, projectsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projects.
     * @param {projectsUpsertArgs} args - Arguments to update or create a Projects.
     * @example
     * // Update or create a Projects
     * const projects = await prisma.projects.upsert({
     *   create: {
     *     // ... data to create a Projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projects we want to update
     *   }
     * })
    **/
    upsert<T extends projectsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, projectsUpsertArgs<ExtArgs>>
    ): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.projects.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends projectsCountArgs>(
      args?: Subset<T, projectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectsAggregateArgs>(args: Subset<T, ProjectsAggregateArgs>): Prisma.PrismaPromise<GetProjectsAggregateType<T>>

    /**
     * Group by Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends projectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: projectsGroupByArgs['orderBy'] }
        : { orderBy?: projectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, projectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the projects model
   */
  readonly fields: projectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__projectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    r_tags_projects<T extends projects$r_tags_projectsArgs<ExtArgs> = {}>(args?: Subset<T, projects$r_tags_projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the projects model
   */ 
  interface projectsFieldRefs {
    readonly id: FieldRef<"projects", 'Int'>
    readonly name: FieldRef<"projects", 'String'>
  }
    

  // Custom InputTypes
  /**
   * projects findUnique
   */
  export type projectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects findUniqueOrThrow
   */
  export type projectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects findFirst
   */
  export type projectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects.
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * projects findFirstOrThrow
   */
  export type projectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects.
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projects.
     */
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * projects findMany
   */
  export type projectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where?: projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectsOrderByWithRelationInput | projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing projects.
     */
    cursor?: projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    distinct?: ProjectsScalarFieldEnum | ProjectsScalarFieldEnum[]
  }

  /**
   * projects create
   */
  export type projectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * The data needed to create a projects.
     */
    data: XOR<projectsCreateInput, projectsUncheckedCreateInput>
  }

  /**
   * projects createMany
   */
  export type projectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many projects.
     */
    data: projectsCreateManyInput | projectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * projects update
   */
  export type projectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * The data needed to update a projects.
     */
    data: XOR<projectsUpdateInput, projectsUncheckedUpdateInput>
    /**
     * Choose, which projects to update.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects updateMany
   */
  export type projectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update projects.
     */
    data: XOR<projectsUpdateManyMutationInput, projectsUncheckedUpdateManyInput>
    /**
     * Filter which projects to update
     */
    where?: projectsWhereInput
  }

  /**
   * projects upsert
   */
  export type projectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * The filter to search for the projects to update in case it exists.
     */
    where: projectsWhereUniqueInput
    /**
     * In case the projects found by the `where` argument doesn't exist, create a new projects with this data.
     */
    create: XOR<projectsCreateInput, projectsUncheckedCreateInput>
    /**
     * In case the projects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<projectsUpdateInput, projectsUncheckedUpdateInput>
  }

  /**
   * projects delete
   */
  export type projectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
    /**
     * Filter which projects to delete.
     */
    where: projectsWhereUniqueInput
  }

  /**
   * projects deleteMany
   */
  export type projectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which projects to delete
     */
    where?: projectsWhereInput
  }

  /**
   * projects.r_tags_projects
   */
  export type projects$r_tags_projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    where?: r_tags_projectsWhereInput
    orderBy?: r_tags_projectsOrderByWithRelationInput | r_tags_projectsOrderByWithRelationInput[]
    cursor?: r_tags_projectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_projectsScalarFieldEnum | R_tags_projectsScalarFieldEnum[]
  }

  /**
   * projects without action
   */
  export type projectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projects
     */
    select?: projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectsInclude<ExtArgs> | null
  }


  /**
   * Model r_product_tags
   */

  export type AggregateR_product_tags = {
    _count: R_product_tagsCountAggregateOutputType | null
    _avg: R_product_tagsAvgAggregateOutputType | null
    _sum: R_product_tagsSumAggregateOutputType | null
    _min: R_product_tagsMinAggregateOutputType | null
    _max: R_product_tagsMaxAggregateOutputType | null
  }

  export type R_product_tagsAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    tag_id: number | null
  }

  export type R_product_tagsSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    tag_id: number | null
  }

  export type R_product_tagsMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    tag_id: number | null
  }

  export type R_product_tagsMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    tag_id: number | null
  }

  export type R_product_tagsCountAggregateOutputType = {
    id: number
    product_id: number
    tag_id: number
    _all: number
  }


  export type R_product_tagsAvgAggregateInputType = {
    id?: true
    product_id?: true
    tag_id?: true
  }

  export type R_product_tagsSumAggregateInputType = {
    id?: true
    product_id?: true
    tag_id?: true
  }

  export type R_product_tagsMinAggregateInputType = {
    id?: true
    product_id?: true
    tag_id?: true
  }

  export type R_product_tagsMaxAggregateInputType = {
    id?: true
    product_id?: true
    tag_id?: true
  }

  export type R_product_tagsCountAggregateInputType = {
    id?: true
    product_id?: true
    tag_id?: true
    _all?: true
  }

  export type R_product_tagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_product_tags to aggregate.
     */
    where?: r_product_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_product_tags to fetch.
     */
    orderBy?: r_product_tagsOrderByWithRelationInput | r_product_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: r_product_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_product_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_product_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned r_product_tags
    **/
    _count?: true | R_product_tagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: R_product_tagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: R_product_tagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: R_product_tagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: R_product_tagsMaxAggregateInputType
  }

  export type GetR_product_tagsAggregateType<T extends R_product_tagsAggregateArgs> = {
        [P in keyof T & keyof AggregateR_product_tags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateR_product_tags[P]>
      : GetScalarType<T[P], AggregateR_product_tags[P]>
  }




  export type r_product_tagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_product_tagsWhereInput
    orderBy?: r_product_tagsOrderByWithAggregationInput | r_product_tagsOrderByWithAggregationInput[]
    by: R_product_tagsScalarFieldEnum[] | R_product_tagsScalarFieldEnum
    having?: r_product_tagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: R_product_tagsCountAggregateInputType | true
    _avg?: R_product_tagsAvgAggregateInputType
    _sum?: R_product_tagsSumAggregateInputType
    _min?: R_product_tagsMinAggregateInputType
    _max?: R_product_tagsMaxAggregateInputType
  }

  export type R_product_tagsGroupByOutputType = {
    id: number
    product_id: number
    tag_id: number
    _count: R_product_tagsCountAggregateOutputType | null
    _avg: R_product_tagsAvgAggregateOutputType | null
    _sum: R_product_tagsSumAggregateOutputType | null
    _min: R_product_tagsMinAggregateOutputType | null
    _max: R_product_tagsMaxAggregateOutputType | null
  }

  type GetR_product_tagsGroupByPayload<T extends r_product_tagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<R_product_tagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof R_product_tagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], R_product_tagsGroupByOutputType[P]>
            : GetScalarType<T[P], R_product_tagsGroupByOutputType[P]>
        }
      >
    >


  export type r_product_tagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    tag_id?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["r_product_tags"]>


  export type r_product_tagsSelectScalar = {
    id?: boolean
    product_id?: boolean
    tag_id?: boolean
  }

  export type r_product_tagsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }

  export type $r_product_tagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "r_product_tags"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
      tags: Prisma.$tagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      tag_id: number
    }, ExtArgs["result"]["r_product_tags"]>
    composites: {}
  }

  type r_product_tagsGetPayload<S extends boolean | null | undefined | r_product_tagsDefaultArgs> = $Result.GetResult<Prisma.$r_product_tagsPayload, S>

  type r_product_tagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<r_product_tagsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: R_product_tagsCountAggregateInputType | true
    }

  export interface r_product_tagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['r_product_tags'], meta: { name: 'r_product_tags' } }
    /**
     * Find zero or one R_product_tags that matches the filter.
     * @param {r_product_tagsFindUniqueArgs} args - Arguments to find a R_product_tags
     * @example
     * // Get one R_product_tags
     * const r_product_tags = await prisma.r_product_tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends r_product_tagsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, r_product_tagsFindUniqueArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one R_product_tags that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {r_product_tagsFindUniqueOrThrowArgs} args - Arguments to find a R_product_tags
     * @example
     * // Get one R_product_tags
     * const r_product_tags = await prisma.r_product_tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends r_product_tagsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_product_tagsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first R_product_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_product_tagsFindFirstArgs} args - Arguments to find a R_product_tags
     * @example
     * // Get one R_product_tags
     * const r_product_tags = await prisma.r_product_tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends r_product_tagsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, r_product_tagsFindFirstArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first R_product_tags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_product_tagsFindFirstOrThrowArgs} args - Arguments to find a R_product_tags
     * @example
     * // Get one R_product_tags
     * const r_product_tags = await prisma.r_product_tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends r_product_tagsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_product_tagsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more R_product_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_product_tagsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all R_product_tags
     * const r_product_tags = await prisma.r_product_tags.findMany()
     * 
     * // Get first 10 R_product_tags
     * const r_product_tags = await prisma.r_product_tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const r_product_tagsWithIdOnly = await prisma.r_product_tags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends r_product_tagsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_product_tagsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a R_product_tags.
     * @param {r_product_tagsCreateArgs} args - Arguments to create a R_product_tags.
     * @example
     * // Create one R_product_tags
     * const R_product_tags = await prisma.r_product_tags.create({
     *   data: {
     *     // ... data to create a R_product_tags
     *   }
     * })
     * 
    **/
    create<T extends r_product_tagsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, r_product_tagsCreateArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many R_product_tags.
     * @param {r_product_tagsCreateManyArgs} args - Arguments to create many R_product_tags.
     * @example
     * // Create many R_product_tags
     * const r_product_tags = await prisma.r_product_tags.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends r_product_tagsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_product_tagsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a R_product_tags.
     * @param {r_product_tagsDeleteArgs} args - Arguments to delete one R_product_tags.
     * @example
     * // Delete one R_product_tags
     * const R_product_tags = await prisma.r_product_tags.delete({
     *   where: {
     *     // ... filter to delete one R_product_tags
     *   }
     * })
     * 
    **/
    delete<T extends r_product_tagsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, r_product_tagsDeleteArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one R_product_tags.
     * @param {r_product_tagsUpdateArgs} args - Arguments to update one R_product_tags.
     * @example
     * // Update one R_product_tags
     * const r_product_tags = await prisma.r_product_tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends r_product_tagsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, r_product_tagsUpdateArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more R_product_tags.
     * @param {r_product_tagsDeleteManyArgs} args - Arguments to filter R_product_tags to delete.
     * @example
     * // Delete a few R_product_tags
     * const { count } = await prisma.r_product_tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends r_product_tagsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_product_tagsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more R_product_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_product_tagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many R_product_tags
     * const r_product_tags = await prisma.r_product_tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends r_product_tagsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, r_product_tagsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one R_product_tags.
     * @param {r_product_tagsUpsertArgs} args - Arguments to update or create a R_product_tags.
     * @example
     * // Update or create a R_product_tags
     * const r_product_tags = await prisma.r_product_tags.upsert({
     *   create: {
     *     // ... data to create a R_product_tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the R_product_tags we want to update
     *   }
     * })
    **/
    upsert<T extends r_product_tagsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, r_product_tagsUpsertArgs<ExtArgs>>
    ): Prisma__r_product_tagsClient<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of R_product_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_product_tagsCountArgs} args - Arguments to filter R_product_tags to count.
     * @example
     * // Count the number of R_product_tags
     * const count = await prisma.r_product_tags.count({
     *   where: {
     *     // ... the filter for the R_product_tags we want to count
     *   }
     * })
    **/
    count<T extends r_product_tagsCountArgs>(
      args?: Subset<T, r_product_tagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], R_product_tagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a R_product_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {R_product_tagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends R_product_tagsAggregateArgs>(args: Subset<T, R_product_tagsAggregateArgs>): Prisma.PrismaPromise<GetR_product_tagsAggregateType<T>>

    /**
     * Group by R_product_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_product_tagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends r_product_tagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: r_product_tagsGroupByArgs['orderBy'] }
        : { orderBy?: r_product_tagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, r_product_tagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetR_product_tagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the r_product_tags model
   */
  readonly fields: r_product_tagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for r_product_tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__r_product_tagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tags<T extends tagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tagsDefaultArgs<ExtArgs>>): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the r_product_tags model
   */ 
  interface r_product_tagsFieldRefs {
    readonly id: FieldRef<"r_product_tags", 'Int'>
    readonly product_id: FieldRef<"r_product_tags", 'Int'>
    readonly tag_id: FieldRef<"r_product_tags", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * r_product_tags findUnique
   */
  export type r_product_tagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * Filter, which r_product_tags to fetch.
     */
    where: r_product_tagsWhereUniqueInput
  }

  /**
   * r_product_tags findUniqueOrThrow
   */
  export type r_product_tagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * Filter, which r_product_tags to fetch.
     */
    where: r_product_tagsWhereUniqueInput
  }

  /**
   * r_product_tags findFirst
   */
  export type r_product_tagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * Filter, which r_product_tags to fetch.
     */
    where?: r_product_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_product_tags to fetch.
     */
    orderBy?: r_product_tagsOrderByWithRelationInput | r_product_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_product_tags.
     */
    cursor?: r_product_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_product_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_product_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_product_tags.
     */
    distinct?: R_product_tagsScalarFieldEnum | R_product_tagsScalarFieldEnum[]
  }

  /**
   * r_product_tags findFirstOrThrow
   */
  export type r_product_tagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * Filter, which r_product_tags to fetch.
     */
    where?: r_product_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_product_tags to fetch.
     */
    orderBy?: r_product_tagsOrderByWithRelationInput | r_product_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_product_tags.
     */
    cursor?: r_product_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_product_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_product_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_product_tags.
     */
    distinct?: R_product_tagsScalarFieldEnum | R_product_tagsScalarFieldEnum[]
  }

  /**
   * r_product_tags findMany
   */
  export type r_product_tagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * Filter, which r_product_tags to fetch.
     */
    where?: r_product_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_product_tags to fetch.
     */
    orderBy?: r_product_tagsOrderByWithRelationInput | r_product_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing r_product_tags.
     */
    cursor?: r_product_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_product_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_product_tags.
     */
    skip?: number
    distinct?: R_product_tagsScalarFieldEnum | R_product_tagsScalarFieldEnum[]
  }

  /**
   * r_product_tags create
   */
  export type r_product_tagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * The data needed to create a r_product_tags.
     */
    data: XOR<r_product_tagsCreateInput, r_product_tagsUncheckedCreateInput>
  }

  /**
   * r_product_tags createMany
   */
  export type r_product_tagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many r_product_tags.
     */
    data: r_product_tagsCreateManyInput | r_product_tagsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * r_product_tags update
   */
  export type r_product_tagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * The data needed to update a r_product_tags.
     */
    data: XOR<r_product_tagsUpdateInput, r_product_tagsUncheckedUpdateInput>
    /**
     * Choose, which r_product_tags to update.
     */
    where: r_product_tagsWhereUniqueInput
  }

  /**
   * r_product_tags updateMany
   */
  export type r_product_tagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update r_product_tags.
     */
    data: XOR<r_product_tagsUpdateManyMutationInput, r_product_tagsUncheckedUpdateManyInput>
    /**
     * Filter which r_product_tags to update
     */
    where?: r_product_tagsWhereInput
  }

  /**
   * r_product_tags upsert
   */
  export type r_product_tagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * The filter to search for the r_product_tags to update in case it exists.
     */
    where: r_product_tagsWhereUniqueInput
    /**
     * In case the r_product_tags found by the `where` argument doesn't exist, create a new r_product_tags with this data.
     */
    create: XOR<r_product_tagsCreateInput, r_product_tagsUncheckedCreateInput>
    /**
     * In case the r_product_tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<r_product_tagsUpdateInput, r_product_tagsUncheckedUpdateInput>
  }

  /**
   * r_product_tags delete
   */
  export type r_product_tagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    /**
     * Filter which r_product_tags to delete.
     */
    where: r_product_tagsWhereUniqueInput
  }

  /**
   * r_product_tags deleteMany
   */
  export type r_product_tagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_product_tags to delete
     */
    where?: r_product_tagsWhereInput
  }

  /**
   * r_product_tags without action
   */
  export type r_product_tagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
  }


  /**
   * Model r_tags_categories
   */

  export type AggregateR_tags_categories = {
    _count: R_tags_categoriesCountAggregateOutputType | null
    _avg: R_tags_categoriesAvgAggregateOutputType | null
    _sum: R_tags_categoriesSumAggregateOutputType | null
    _min: R_tags_categoriesMinAggregateOutputType | null
    _max: R_tags_categoriesMaxAggregateOutputType | null
  }

  export type R_tags_categoriesAvgAggregateOutputType = {
    id: number | null
    tag_id: number | null
    category_id: number | null
  }

  export type R_tags_categoriesSumAggregateOutputType = {
    id: number | null
    tag_id: number | null
    category_id: number | null
  }

  export type R_tags_categoriesMinAggregateOutputType = {
    id: number | null
    tag_id: number | null
    category_id: number | null
  }

  export type R_tags_categoriesMaxAggregateOutputType = {
    id: number | null
    tag_id: number | null
    category_id: number | null
  }

  export type R_tags_categoriesCountAggregateOutputType = {
    id: number
    tag_id: number
    category_id: number
    _all: number
  }


  export type R_tags_categoriesAvgAggregateInputType = {
    id?: true
    tag_id?: true
    category_id?: true
  }

  export type R_tags_categoriesSumAggregateInputType = {
    id?: true
    tag_id?: true
    category_id?: true
  }

  export type R_tags_categoriesMinAggregateInputType = {
    id?: true
    tag_id?: true
    category_id?: true
  }

  export type R_tags_categoriesMaxAggregateInputType = {
    id?: true
    tag_id?: true
    category_id?: true
  }

  export type R_tags_categoriesCountAggregateInputType = {
    id?: true
    tag_id?: true
    category_id?: true
    _all?: true
  }

  export type R_tags_categoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_categories to aggregate.
     */
    where?: r_tags_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_categories to fetch.
     */
    orderBy?: r_tags_categoriesOrderByWithRelationInput | r_tags_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: r_tags_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned r_tags_categories
    **/
    _count?: true | R_tags_categoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: R_tags_categoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: R_tags_categoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: R_tags_categoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: R_tags_categoriesMaxAggregateInputType
  }

  export type GetR_tags_categoriesAggregateType<T extends R_tags_categoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateR_tags_categories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateR_tags_categories[P]>
      : GetScalarType<T[P], AggregateR_tags_categories[P]>
  }




  export type r_tags_categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_categoriesWhereInput
    orderBy?: r_tags_categoriesOrderByWithAggregationInput | r_tags_categoriesOrderByWithAggregationInput[]
    by: R_tags_categoriesScalarFieldEnum[] | R_tags_categoriesScalarFieldEnum
    having?: r_tags_categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: R_tags_categoriesCountAggregateInputType | true
    _avg?: R_tags_categoriesAvgAggregateInputType
    _sum?: R_tags_categoriesSumAggregateInputType
    _min?: R_tags_categoriesMinAggregateInputType
    _max?: R_tags_categoriesMaxAggregateInputType
  }

  export type R_tags_categoriesGroupByOutputType = {
    id: number
    tag_id: number
    category_id: number
    _count: R_tags_categoriesCountAggregateOutputType | null
    _avg: R_tags_categoriesAvgAggregateOutputType | null
    _sum: R_tags_categoriesSumAggregateOutputType | null
    _min: R_tags_categoriesMinAggregateOutputType | null
    _max: R_tags_categoriesMaxAggregateOutputType | null
  }

  type GetR_tags_categoriesGroupByPayload<T extends r_tags_categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<R_tags_categoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof R_tags_categoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], R_tags_categoriesGroupByOutputType[P]>
            : GetScalarType<T[P], R_tags_categoriesGroupByOutputType[P]>
        }
      >
    >


  export type r_tags_categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag_id?: boolean
    category_id?: boolean
    product_categories?: boolean | product_categoriesDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["r_tags_categories"]>


  export type r_tags_categoriesSelectScalar = {
    id?: boolean
    tag_id?: boolean
    category_id?: boolean
  }

  export type r_tags_categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_categories?: boolean | product_categoriesDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }

  export type $r_tags_categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "r_tags_categories"
    objects: {
      product_categories: Prisma.$product_categoriesPayload<ExtArgs>
      tags: Prisma.$tagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag_id: number
      category_id: number
    }, ExtArgs["result"]["r_tags_categories"]>
    composites: {}
  }

  type r_tags_categoriesGetPayload<S extends boolean | null | undefined | r_tags_categoriesDefaultArgs> = $Result.GetResult<Prisma.$r_tags_categoriesPayload, S>

  type r_tags_categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<r_tags_categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: R_tags_categoriesCountAggregateInputType | true
    }

  export interface r_tags_categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['r_tags_categories'], meta: { name: 'r_tags_categories' } }
    /**
     * Find zero or one R_tags_categories that matches the filter.
     * @param {r_tags_categoriesFindUniqueArgs} args - Arguments to find a R_tags_categories
     * @example
     * // Get one R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends r_tags_categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one R_tags_categories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {r_tags_categoriesFindUniqueOrThrowArgs} args - Arguments to find a R_tags_categories
     * @example
     * // Get one R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends r_tags_categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first R_tags_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_categoriesFindFirstArgs} args - Arguments to find a R_tags_categories
     * @example
     * // Get one R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends r_tags_categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first R_tags_categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_categoriesFindFirstOrThrowArgs} args - Arguments to find a R_tags_categories
     * @example
     * // Get one R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends r_tags_categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more R_tags_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_categoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.findMany()
     * 
     * // Get first 10 R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const r_tags_categoriesWithIdOnly = await prisma.r_tags_categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends r_tags_categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a R_tags_categories.
     * @param {r_tags_categoriesCreateArgs} args - Arguments to create a R_tags_categories.
     * @example
     * // Create one R_tags_categories
     * const R_tags_categories = await prisma.r_tags_categories.create({
     *   data: {
     *     // ... data to create a R_tags_categories
     *   }
     * })
     * 
    **/
    create<T extends r_tags_categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_categoriesCreateArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many R_tags_categories.
     * @param {r_tags_categoriesCreateManyArgs} args - Arguments to create many R_tags_categories.
     * @example
     * // Create many R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends r_tags_categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a R_tags_categories.
     * @param {r_tags_categoriesDeleteArgs} args - Arguments to delete one R_tags_categories.
     * @example
     * // Delete one R_tags_categories
     * const R_tags_categories = await prisma.r_tags_categories.delete({
     *   where: {
     *     // ... filter to delete one R_tags_categories
     *   }
     * })
     * 
    **/
    delete<T extends r_tags_categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_categoriesDeleteArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one R_tags_categories.
     * @param {r_tags_categoriesUpdateArgs} args - Arguments to update one R_tags_categories.
     * @example
     * // Update one R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends r_tags_categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_categoriesUpdateArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more R_tags_categories.
     * @param {r_tags_categoriesDeleteManyArgs} args - Arguments to filter R_tags_categories to delete.
     * @example
     * // Delete a few R_tags_categories
     * const { count } = await prisma.r_tags_categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends r_tags_categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more R_tags_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends r_tags_categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one R_tags_categories.
     * @param {r_tags_categoriesUpsertArgs} args - Arguments to update or create a R_tags_categories.
     * @example
     * // Update or create a R_tags_categories
     * const r_tags_categories = await prisma.r_tags_categories.upsert({
     *   create: {
     *     // ... data to create a R_tags_categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the R_tags_categories we want to update
     *   }
     * })
    **/
    upsert<T extends r_tags_categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_categoriesUpsertArgs<ExtArgs>>
    ): Prisma__r_tags_categoriesClient<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of R_tags_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_categoriesCountArgs} args - Arguments to filter R_tags_categories to count.
     * @example
     * // Count the number of R_tags_categories
     * const count = await prisma.r_tags_categories.count({
     *   where: {
     *     // ... the filter for the R_tags_categories we want to count
     *   }
     * })
    **/
    count<T extends r_tags_categoriesCountArgs>(
      args?: Subset<T, r_tags_categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], R_tags_categoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a R_tags_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {R_tags_categoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends R_tags_categoriesAggregateArgs>(args: Subset<T, R_tags_categoriesAggregateArgs>): Prisma.PrismaPromise<GetR_tags_categoriesAggregateType<T>>

    /**
     * Group by R_tags_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends r_tags_categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: r_tags_categoriesGroupByArgs['orderBy'] }
        : { orderBy?: r_tags_categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, r_tags_categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetR_tags_categoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the r_tags_categories model
   */
  readonly fields: r_tags_categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for r_tags_categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__r_tags_categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product_categories<T extends product_categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_categoriesDefaultArgs<ExtArgs>>): Prisma__product_categoriesClient<$Result.GetResult<Prisma.$product_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tags<T extends tagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tagsDefaultArgs<ExtArgs>>): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the r_tags_categories model
   */ 
  interface r_tags_categoriesFieldRefs {
    readonly id: FieldRef<"r_tags_categories", 'Int'>
    readonly tag_id: FieldRef<"r_tags_categories", 'Int'>
    readonly category_id: FieldRef<"r_tags_categories", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * r_tags_categories findUnique
   */
  export type r_tags_categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_categories to fetch.
     */
    where: r_tags_categoriesWhereUniqueInput
  }

  /**
   * r_tags_categories findUniqueOrThrow
   */
  export type r_tags_categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_categories to fetch.
     */
    where: r_tags_categoriesWhereUniqueInput
  }

  /**
   * r_tags_categories findFirst
   */
  export type r_tags_categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_categories to fetch.
     */
    where?: r_tags_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_categories to fetch.
     */
    orderBy?: r_tags_categoriesOrderByWithRelationInput | r_tags_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_categories.
     */
    cursor?: r_tags_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_categories.
     */
    distinct?: R_tags_categoriesScalarFieldEnum | R_tags_categoriesScalarFieldEnum[]
  }

  /**
   * r_tags_categories findFirstOrThrow
   */
  export type r_tags_categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_categories to fetch.
     */
    where?: r_tags_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_categories to fetch.
     */
    orderBy?: r_tags_categoriesOrderByWithRelationInput | r_tags_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_categories.
     */
    cursor?: r_tags_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_categories.
     */
    distinct?: R_tags_categoriesScalarFieldEnum | R_tags_categoriesScalarFieldEnum[]
  }

  /**
   * r_tags_categories findMany
   */
  export type r_tags_categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_categories to fetch.
     */
    where?: r_tags_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_categories to fetch.
     */
    orderBy?: r_tags_categoriesOrderByWithRelationInput | r_tags_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing r_tags_categories.
     */
    cursor?: r_tags_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_categories.
     */
    skip?: number
    distinct?: R_tags_categoriesScalarFieldEnum | R_tags_categoriesScalarFieldEnum[]
  }

  /**
   * r_tags_categories create
   */
  export type r_tags_categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a r_tags_categories.
     */
    data: XOR<r_tags_categoriesCreateInput, r_tags_categoriesUncheckedCreateInput>
  }

  /**
   * r_tags_categories createMany
   */
  export type r_tags_categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many r_tags_categories.
     */
    data: r_tags_categoriesCreateManyInput | r_tags_categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * r_tags_categories update
   */
  export type r_tags_categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a r_tags_categories.
     */
    data: XOR<r_tags_categoriesUpdateInput, r_tags_categoriesUncheckedUpdateInput>
    /**
     * Choose, which r_tags_categories to update.
     */
    where: r_tags_categoriesWhereUniqueInput
  }

  /**
   * r_tags_categories updateMany
   */
  export type r_tags_categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update r_tags_categories.
     */
    data: XOR<r_tags_categoriesUpdateManyMutationInput, r_tags_categoriesUncheckedUpdateManyInput>
    /**
     * Filter which r_tags_categories to update
     */
    where?: r_tags_categoriesWhereInput
  }

  /**
   * r_tags_categories upsert
   */
  export type r_tags_categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the r_tags_categories to update in case it exists.
     */
    where: r_tags_categoriesWhereUniqueInput
    /**
     * In case the r_tags_categories found by the `where` argument doesn't exist, create a new r_tags_categories with this data.
     */
    create: XOR<r_tags_categoriesCreateInput, r_tags_categoriesUncheckedCreateInput>
    /**
     * In case the r_tags_categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<r_tags_categoriesUpdateInput, r_tags_categoriesUncheckedUpdateInput>
  }

  /**
   * r_tags_categories delete
   */
  export type r_tags_categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    /**
     * Filter which r_tags_categories to delete.
     */
    where: r_tags_categoriesWhereUniqueInput
  }

  /**
   * r_tags_categories deleteMany
   */
  export type r_tags_categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_categories to delete
     */
    where?: r_tags_categoriesWhereInput
  }

  /**
   * r_tags_categories without action
   */
  export type r_tags_categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
  }


  /**
   * Model r_tags_objects
   */

  export type AggregateR_tags_objects = {
    _count: R_tags_objectsCountAggregateOutputType | null
    _avg: R_tags_objectsAvgAggregateOutputType | null
    _sum: R_tags_objectsSumAggregateOutputType | null
    _min: R_tags_objectsMinAggregateOutputType | null
    _max: R_tags_objectsMaxAggregateOutputType | null
  }

  export type R_tags_objectsAvgAggregateOutputType = {
    id: number | null
    tag_id: number | null
    object_id: number | null
  }

  export type R_tags_objectsSumAggregateOutputType = {
    id: number | null
    tag_id: number | null
    object_id: number | null
  }

  export type R_tags_objectsMinAggregateOutputType = {
    id: number | null
    tag_id: number | null
    object_id: number | null
  }

  export type R_tags_objectsMaxAggregateOutputType = {
    id: number | null
    tag_id: number | null
    object_id: number | null
  }

  export type R_tags_objectsCountAggregateOutputType = {
    id: number
    tag_id: number
    object_id: number
    _all: number
  }


  export type R_tags_objectsAvgAggregateInputType = {
    id?: true
    tag_id?: true
    object_id?: true
  }

  export type R_tags_objectsSumAggregateInputType = {
    id?: true
    tag_id?: true
    object_id?: true
  }

  export type R_tags_objectsMinAggregateInputType = {
    id?: true
    tag_id?: true
    object_id?: true
  }

  export type R_tags_objectsMaxAggregateInputType = {
    id?: true
    tag_id?: true
    object_id?: true
  }

  export type R_tags_objectsCountAggregateInputType = {
    id?: true
    tag_id?: true
    object_id?: true
    _all?: true
  }

  export type R_tags_objectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_objects to aggregate.
     */
    where?: r_tags_objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_objects to fetch.
     */
    orderBy?: r_tags_objectsOrderByWithRelationInput | r_tags_objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: r_tags_objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned r_tags_objects
    **/
    _count?: true | R_tags_objectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: R_tags_objectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: R_tags_objectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: R_tags_objectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: R_tags_objectsMaxAggregateInputType
  }

  export type GetR_tags_objectsAggregateType<T extends R_tags_objectsAggregateArgs> = {
        [P in keyof T & keyof AggregateR_tags_objects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateR_tags_objects[P]>
      : GetScalarType<T[P], AggregateR_tags_objects[P]>
  }




  export type r_tags_objectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_objectsWhereInput
    orderBy?: r_tags_objectsOrderByWithAggregationInput | r_tags_objectsOrderByWithAggregationInput[]
    by: R_tags_objectsScalarFieldEnum[] | R_tags_objectsScalarFieldEnum
    having?: r_tags_objectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: R_tags_objectsCountAggregateInputType | true
    _avg?: R_tags_objectsAvgAggregateInputType
    _sum?: R_tags_objectsSumAggregateInputType
    _min?: R_tags_objectsMinAggregateInputType
    _max?: R_tags_objectsMaxAggregateInputType
  }

  export type R_tags_objectsGroupByOutputType = {
    id: number
    tag_id: number
    object_id: number
    _count: R_tags_objectsCountAggregateOutputType | null
    _avg: R_tags_objectsAvgAggregateOutputType | null
    _sum: R_tags_objectsSumAggregateOutputType | null
    _min: R_tags_objectsMinAggregateOutputType | null
    _max: R_tags_objectsMaxAggregateOutputType | null
  }

  type GetR_tags_objectsGroupByPayload<T extends r_tags_objectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<R_tags_objectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof R_tags_objectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], R_tags_objectsGroupByOutputType[P]>
            : GetScalarType<T[P], R_tags_objectsGroupByOutputType[P]>
        }
      >
    >


  export type r_tags_objectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag_id?: boolean
    object_id?: boolean
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["r_tags_objects"]>


  export type r_tags_objectsSelectScalar = {
    id?: boolean
    tag_id?: boolean
    object_id?: boolean
  }

  export type r_tags_objectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }

  export type $r_tags_objectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "r_tags_objects"
    objects: {
      objects: Prisma.$objectsPayload<ExtArgs>
      tags: Prisma.$tagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag_id: number
      object_id: number
    }, ExtArgs["result"]["r_tags_objects"]>
    composites: {}
  }

  type r_tags_objectsGetPayload<S extends boolean | null | undefined | r_tags_objectsDefaultArgs> = $Result.GetResult<Prisma.$r_tags_objectsPayload, S>

  type r_tags_objectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<r_tags_objectsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: R_tags_objectsCountAggregateInputType | true
    }

  export interface r_tags_objectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['r_tags_objects'], meta: { name: 'r_tags_objects' } }
    /**
     * Find zero or one R_tags_objects that matches the filter.
     * @param {r_tags_objectsFindUniqueArgs} args - Arguments to find a R_tags_objects
     * @example
     * // Get one R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends r_tags_objectsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_objectsFindUniqueArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one R_tags_objects that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {r_tags_objectsFindUniqueOrThrowArgs} args - Arguments to find a R_tags_objects
     * @example
     * // Get one R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends r_tags_objectsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_objectsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first R_tags_objects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_objectsFindFirstArgs} args - Arguments to find a R_tags_objects
     * @example
     * // Get one R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends r_tags_objectsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_objectsFindFirstArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first R_tags_objects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_objectsFindFirstOrThrowArgs} args - Arguments to find a R_tags_objects
     * @example
     * // Get one R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends r_tags_objectsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_objectsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more R_tags_objects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_objectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.findMany()
     * 
     * // Get first 10 R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const r_tags_objectsWithIdOnly = await prisma.r_tags_objects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends r_tags_objectsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_objectsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a R_tags_objects.
     * @param {r_tags_objectsCreateArgs} args - Arguments to create a R_tags_objects.
     * @example
     * // Create one R_tags_objects
     * const R_tags_objects = await prisma.r_tags_objects.create({
     *   data: {
     *     // ... data to create a R_tags_objects
     *   }
     * })
     * 
    **/
    create<T extends r_tags_objectsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_objectsCreateArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many R_tags_objects.
     * @param {r_tags_objectsCreateManyArgs} args - Arguments to create many R_tags_objects.
     * @example
     * // Create many R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends r_tags_objectsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_objectsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a R_tags_objects.
     * @param {r_tags_objectsDeleteArgs} args - Arguments to delete one R_tags_objects.
     * @example
     * // Delete one R_tags_objects
     * const R_tags_objects = await prisma.r_tags_objects.delete({
     *   where: {
     *     // ... filter to delete one R_tags_objects
     *   }
     * })
     * 
    **/
    delete<T extends r_tags_objectsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_objectsDeleteArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one R_tags_objects.
     * @param {r_tags_objectsUpdateArgs} args - Arguments to update one R_tags_objects.
     * @example
     * // Update one R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends r_tags_objectsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_objectsUpdateArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more R_tags_objects.
     * @param {r_tags_objectsDeleteManyArgs} args - Arguments to filter R_tags_objects to delete.
     * @example
     * // Delete a few R_tags_objects
     * const { count } = await prisma.r_tags_objects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends r_tags_objectsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_objectsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more R_tags_objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_objectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends r_tags_objectsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_objectsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one R_tags_objects.
     * @param {r_tags_objectsUpsertArgs} args - Arguments to update or create a R_tags_objects.
     * @example
     * // Update or create a R_tags_objects
     * const r_tags_objects = await prisma.r_tags_objects.upsert({
     *   create: {
     *     // ... data to create a R_tags_objects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the R_tags_objects we want to update
     *   }
     * })
    **/
    upsert<T extends r_tags_objectsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_objectsUpsertArgs<ExtArgs>>
    ): Prisma__r_tags_objectsClient<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of R_tags_objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_objectsCountArgs} args - Arguments to filter R_tags_objects to count.
     * @example
     * // Count the number of R_tags_objects
     * const count = await prisma.r_tags_objects.count({
     *   where: {
     *     // ... the filter for the R_tags_objects we want to count
     *   }
     * })
    **/
    count<T extends r_tags_objectsCountArgs>(
      args?: Subset<T, r_tags_objectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], R_tags_objectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a R_tags_objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {R_tags_objectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends R_tags_objectsAggregateArgs>(args: Subset<T, R_tags_objectsAggregateArgs>): Prisma.PrismaPromise<GetR_tags_objectsAggregateType<T>>

    /**
     * Group by R_tags_objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_objectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends r_tags_objectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: r_tags_objectsGroupByArgs['orderBy'] }
        : { orderBy?: r_tags_objectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, r_tags_objectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetR_tags_objectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the r_tags_objects model
   */
  readonly fields: r_tags_objectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for r_tags_objects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__r_tags_objectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    objects<T extends objectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, objectsDefaultArgs<ExtArgs>>): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tags<T extends tagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tagsDefaultArgs<ExtArgs>>): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the r_tags_objects model
   */ 
  interface r_tags_objectsFieldRefs {
    readonly id: FieldRef<"r_tags_objects", 'Int'>
    readonly tag_id: FieldRef<"r_tags_objects", 'Int'>
    readonly object_id: FieldRef<"r_tags_objects", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * r_tags_objects findUnique
   */
  export type r_tags_objectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_objects to fetch.
     */
    where: r_tags_objectsWhereUniqueInput
  }

  /**
   * r_tags_objects findUniqueOrThrow
   */
  export type r_tags_objectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_objects to fetch.
     */
    where: r_tags_objectsWhereUniqueInput
  }

  /**
   * r_tags_objects findFirst
   */
  export type r_tags_objectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_objects to fetch.
     */
    where?: r_tags_objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_objects to fetch.
     */
    orderBy?: r_tags_objectsOrderByWithRelationInput | r_tags_objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_objects.
     */
    cursor?: r_tags_objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_objects.
     */
    distinct?: R_tags_objectsScalarFieldEnum | R_tags_objectsScalarFieldEnum[]
  }

  /**
   * r_tags_objects findFirstOrThrow
   */
  export type r_tags_objectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_objects to fetch.
     */
    where?: r_tags_objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_objects to fetch.
     */
    orderBy?: r_tags_objectsOrderByWithRelationInput | r_tags_objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_objects.
     */
    cursor?: r_tags_objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_objects.
     */
    distinct?: R_tags_objectsScalarFieldEnum | R_tags_objectsScalarFieldEnum[]
  }

  /**
   * r_tags_objects findMany
   */
  export type r_tags_objectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_objects to fetch.
     */
    where?: r_tags_objectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_objects to fetch.
     */
    orderBy?: r_tags_objectsOrderByWithRelationInput | r_tags_objectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing r_tags_objects.
     */
    cursor?: r_tags_objectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_objects.
     */
    skip?: number
    distinct?: R_tags_objectsScalarFieldEnum | R_tags_objectsScalarFieldEnum[]
  }

  /**
   * r_tags_objects create
   */
  export type r_tags_objectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * The data needed to create a r_tags_objects.
     */
    data: XOR<r_tags_objectsCreateInput, r_tags_objectsUncheckedCreateInput>
  }

  /**
   * r_tags_objects createMany
   */
  export type r_tags_objectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many r_tags_objects.
     */
    data: r_tags_objectsCreateManyInput | r_tags_objectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * r_tags_objects update
   */
  export type r_tags_objectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * The data needed to update a r_tags_objects.
     */
    data: XOR<r_tags_objectsUpdateInput, r_tags_objectsUncheckedUpdateInput>
    /**
     * Choose, which r_tags_objects to update.
     */
    where: r_tags_objectsWhereUniqueInput
  }

  /**
   * r_tags_objects updateMany
   */
  export type r_tags_objectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update r_tags_objects.
     */
    data: XOR<r_tags_objectsUpdateManyMutationInput, r_tags_objectsUncheckedUpdateManyInput>
    /**
     * Filter which r_tags_objects to update
     */
    where?: r_tags_objectsWhereInput
  }

  /**
   * r_tags_objects upsert
   */
  export type r_tags_objectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * The filter to search for the r_tags_objects to update in case it exists.
     */
    where: r_tags_objectsWhereUniqueInput
    /**
     * In case the r_tags_objects found by the `where` argument doesn't exist, create a new r_tags_objects with this data.
     */
    create: XOR<r_tags_objectsCreateInput, r_tags_objectsUncheckedCreateInput>
    /**
     * In case the r_tags_objects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<r_tags_objectsUpdateInput, r_tags_objectsUncheckedUpdateInput>
  }

  /**
   * r_tags_objects delete
   */
  export type r_tags_objectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    /**
     * Filter which r_tags_objects to delete.
     */
    where: r_tags_objectsWhereUniqueInput
  }

  /**
   * r_tags_objects deleteMany
   */
  export type r_tags_objectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_objects to delete
     */
    where?: r_tags_objectsWhereInput
  }

  /**
   * r_tags_objects without action
   */
  export type r_tags_objectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
  }


  /**
   * Model r_tags_product_types
   */

  export type AggregateR_tags_product_types = {
    _count: R_tags_product_typesCountAggregateOutputType | null
    _avg: R_tags_product_typesAvgAggregateOutputType | null
    _sum: R_tags_product_typesSumAggregateOutputType | null
    _min: R_tags_product_typesMinAggregateOutputType | null
    _max: R_tags_product_typesMaxAggregateOutputType | null
  }

  export type R_tags_product_typesAvgAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_type_id: number | null
  }

  export type R_tags_product_typesSumAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_type_id: number | null
  }

  export type R_tags_product_typesMinAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_type_id: number | null
  }

  export type R_tags_product_typesMaxAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_type_id: number | null
  }

  export type R_tags_product_typesCountAggregateOutputType = {
    id: number
    tag_id: number
    product_type_id: number
    _all: number
  }


  export type R_tags_product_typesAvgAggregateInputType = {
    id?: true
    tag_id?: true
    product_type_id?: true
  }

  export type R_tags_product_typesSumAggregateInputType = {
    id?: true
    tag_id?: true
    product_type_id?: true
  }

  export type R_tags_product_typesMinAggregateInputType = {
    id?: true
    tag_id?: true
    product_type_id?: true
  }

  export type R_tags_product_typesMaxAggregateInputType = {
    id?: true
    tag_id?: true
    product_type_id?: true
  }

  export type R_tags_product_typesCountAggregateInputType = {
    id?: true
    tag_id?: true
    product_type_id?: true
    _all?: true
  }

  export type R_tags_product_typesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_product_types to aggregate.
     */
    where?: r_tags_product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_product_types to fetch.
     */
    orderBy?: r_tags_product_typesOrderByWithRelationInput | r_tags_product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: r_tags_product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned r_tags_product_types
    **/
    _count?: true | R_tags_product_typesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: R_tags_product_typesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: R_tags_product_typesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: R_tags_product_typesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: R_tags_product_typesMaxAggregateInputType
  }

  export type GetR_tags_product_typesAggregateType<T extends R_tags_product_typesAggregateArgs> = {
        [P in keyof T & keyof AggregateR_tags_product_types]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateR_tags_product_types[P]>
      : GetScalarType<T[P], AggregateR_tags_product_types[P]>
  }




  export type r_tags_product_typesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_product_typesWhereInput
    orderBy?: r_tags_product_typesOrderByWithAggregationInput | r_tags_product_typesOrderByWithAggregationInput[]
    by: R_tags_product_typesScalarFieldEnum[] | R_tags_product_typesScalarFieldEnum
    having?: r_tags_product_typesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: R_tags_product_typesCountAggregateInputType | true
    _avg?: R_tags_product_typesAvgAggregateInputType
    _sum?: R_tags_product_typesSumAggregateInputType
    _min?: R_tags_product_typesMinAggregateInputType
    _max?: R_tags_product_typesMaxAggregateInputType
  }

  export type R_tags_product_typesGroupByOutputType = {
    id: number
    tag_id: number
    product_type_id: number
    _count: R_tags_product_typesCountAggregateOutputType | null
    _avg: R_tags_product_typesAvgAggregateOutputType | null
    _sum: R_tags_product_typesSumAggregateOutputType | null
    _min: R_tags_product_typesMinAggregateOutputType | null
    _max: R_tags_product_typesMaxAggregateOutputType | null
  }

  type GetR_tags_product_typesGroupByPayload<T extends r_tags_product_typesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<R_tags_product_typesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof R_tags_product_typesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], R_tags_product_typesGroupByOutputType[P]>
            : GetScalarType<T[P], R_tags_product_typesGroupByOutputType[P]>
        }
      >
    >


  export type r_tags_product_typesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag_id?: boolean
    product_type_id?: boolean
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["r_tags_product_types"]>


  export type r_tags_product_typesSelectScalar = {
    id?: boolean
    tag_id?: boolean
    product_type_id?: boolean
  }

  export type r_tags_product_typesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product_types?: boolean | product_typesDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }

  export type $r_tags_product_typesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "r_tags_product_types"
    objects: {
      product_types: Prisma.$product_typesPayload<ExtArgs>
      tags: Prisma.$tagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag_id: number
      product_type_id: number
    }, ExtArgs["result"]["r_tags_product_types"]>
    composites: {}
  }

  type r_tags_product_typesGetPayload<S extends boolean | null | undefined | r_tags_product_typesDefaultArgs> = $Result.GetResult<Prisma.$r_tags_product_typesPayload, S>

  type r_tags_product_typesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<r_tags_product_typesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: R_tags_product_typesCountAggregateInputType | true
    }

  export interface r_tags_product_typesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['r_tags_product_types'], meta: { name: 'r_tags_product_types' } }
    /**
     * Find zero or one R_tags_product_types that matches the filter.
     * @param {r_tags_product_typesFindUniqueArgs} args - Arguments to find a R_tags_product_types
     * @example
     * // Get one R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends r_tags_product_typesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_product_typesFindUniqueArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one R_tags_product_types that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {r_tags_product_typesFindUniqueOrThrowArgs} args - Arguments to find a R_tags_product_types
     * @example
     * // Get one R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends r_tags_product_typesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_product_typesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first R_tags_product_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_product_typesFindFirstArgs} args - Arguments to find a R_tags_product_types
     * @example
     * // Get one R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends r_tags_product_typesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_product_typesFindFirstArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first R_tags_product_types that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_product_typesFindFirstOrThrowArgs} args - Arguments to find a R_tags_product_types
     * @example
     * // Get one R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends r_tags_product_typesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_product_typesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more R_tags_product_types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_product_typesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.findMany()
     * 
     * // Get first 10 R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const r_tags_product_typesWithIdOnly = await prisma.r_tags_product_types.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends r_tags_product_typesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_product_typesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a R_tags_product_types.
     * @param {r_tags_product_typesCreateArgs} args - Arguments to create a R_tags_product_types.
     * @example
     * // Create one R_tags_product_types
     * const R_tags_product_types = await prisma.r_tags_product_types.create({
     *   data: {
     *     // ... data to create a R_tags_product_types
     *   }
     * })
     * 
    **/
    create<T extends r_tags_product_typesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_product_typesCreateArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many R_tags_product_types.
     * @param {r_tags_product_typesCreateManyArgs} args - Arguments to create many R_tags_product_types.
     * @example
     * // Create many R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends r_tags_product_typesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_product_typesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a R_tags_product_types.
     * @param {r_tags_product_typesDeleteArgs} args - Arguments to delete one R_tags_product_types.
     * @example
     * // Delete one R_tags_product_types
     * const R_tags_product_types = await prisma.r_tags_product_types.delete({
     *   where: {
     *     // ... filter to delete one R_tags_product_types
     *   }
     * })
     * 
    **/
    delete<T extends r_tags_product_typesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_product_typesDeleteArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one R_tags_product_types.
     * @param {r_tags_product_typesUpdateArgs} args - Arguments to update one R_tags_product_types.
     * @example
     * // Update one R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends r_tags_product_typesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_product_typesUpdateArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more R_tags_product_types.
     * @param {r_tags_product_typesDeleteManyArgs} args - Arguments to filter R_tags_product_types to delete.
     * @example
     * // Delete a few R_tags_product_types
     * const { count } = await prisma.r_tags_product_types.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends r_tags_product_typesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_product_typesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more R_tags_product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_product_typesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends r_tags_product_typesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_product_typesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one R_tags_product_types.
     * @param {r_tags_product_typesUpsertArgs} args - Arguments to update or create a R_tags_product_types.
     * @example
     * // Update or create a R_tags_product_types
     * const r_tags_product_types = await prisma.r_tags_product_types.upsert({
     *   create: {
     *     // ... data to create a R_tags_product_types
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the R_tags_product_types we want to update
     *   }
     * })
    **/
    upsert<T extends r_tags_product_typesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_product_typesUpsertArgs<ExtArgs>>
    ): Prisma__r_tags_product_typesClient<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of R_tags_product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_product_typesCountArgs} args - Arguments to filter R_tags_product_types to count.
     * @example
     * // Count the number of R_tags_product_types
     * const count = await prisma.r_tags_product_types.count({
     *   where: {
     *     // ... the filter for the R_tags_product_types we want to count
     *   }
     * })
    **/
    count<T extends r_tags_product_typesCountArgs>(
      args?: Subset<T, r_tags_product_typesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], R_tags_product_typesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a R_tags_product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {R_tags_product_typesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends R_tags_product_typesAggregateArgs>(args: Subset<T, R_tags_product_typesAggregateArgs>): Prisma.PrismaPromise<GetR_tags_product_typesAggregateType<T>>

    /**
     * Group by R_tags_product_types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_product_typesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends r_tags_product_typesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: r_tags_product_typesGroupByArgs['orderBy'] }
        : { orderBy?: r_tags_product_typesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, r_tags_product_typesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetR_tags_product_typesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the r_tags_product_types model
   */
  readonly fields: r_tags_product_typesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for r_tags_product_types.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__r_tags_product_typesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product_types<T extends product_typesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, product_typesDefaultArgs<ExtArgs>>): Prisma__product_typesClient<$Result.GetResult<Prisma.$product_typesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tags<T extends tagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tagsDefaultArgs<ExtArgs>>): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the r_tags_product_types model
   */ 
  interface r_tags_product_typesFieldRefs {
    readonly id: FieldRef<"r_tags_product_types", 'Int'>
    readonly tag_id: FieldRef<"r_tags_product_types", 'Int'>
    readonly product_type_id: FieldRef<"r_tags_product_types", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * r_tags_product_types findUnique
   */
  export type r_tags_product_typesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_product_types to fetch.
     */
    where: r_tags_product_typesWhereUniqueInput
  }

  /**
   * r_tags_product_types findUniqueOrThrow
   */
  export type r_tags_product_typesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_product_types to fetch.
     */
    where: r_tags_product_typesWhereUniqueInput
  }

  /**
   * r_tags_product_types findFirst
   */
  export type r_tags_product_typesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_product_types to fetch.
     */
    where?: r_tags_product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_product_types to fetch.
     */
    orderBy?: r_tags_product_typesOrderByWithRelationInput | r_tags_product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_product_types.
     */
    cursor?: r_tags_product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_product_types.
     */
    distinct?: R_tags_product_typesScalarFieldEnum | R_tags_product_typesScalarFieldEnum[]
  }

  /**
   * r_tags_product_types findFirstOrThrow
   */
  export type r_tags_product_typesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_product_types to fetch.
     */
    where?: r_tags_product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_product_types to fetch.
     */
    orderBy?: r_tags_product_typesOrderByWithRelationInput | r_tags_product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_product_types.
     */
    cursor?: r_tags_product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_product_types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_product_types.
     */
    distinct?: R_tags_product_typesScalarFieldEnum | R_tags_product_typesScalarFieldEnum[]
  }

  /**
   * r_tags_product_types findMany
   */
  export type r_tags_product_typesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_product_types to fetch.
     */
    where?: r_tags_product_typesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_product_types to fetch.
     */
    orderBy?: r_tags_product_typesOrderByWithRelationInput | r_tags_product_typesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing r_tags_product_types.
     */
    cursor?: r_tags_product_typesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_product_types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_product_types.
     */
    skip?: number
    distinct?: R_tags_product_typesScalarFieldEnum | R_tags_product_typesScalarFieldEnum[]
  }

  /**
   * r_tags_product_types create
   */
  export type r_tags_product_typesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * The data needed to create a r_tags_product_types.
     */
    data: XOR<r_tags_product_typesCreateInput, r_tags_product_typesUncheckedCreateInput>
  }

  /**
   * r_tags_product_types createMany
   */
  export type r_tags_product_typesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many r_tags_product_types.
     */
    data: r_tags_product_typesCreateManyInput | r_tags_product_typesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * r_tags_product_types update
   */
  export type r_tags_product_typesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * The data needed to update a r_tags_product_types.
     */
    data: XOR<r_tags_product_typesUpdateInput, r_tags_product_typesUncheckedUpdateInput>
    /**
     * Choose, which r_tags_product_types to update.
     */
    where: r_tags_product_typesWhereUniqueInput
  }

  /**
   * r_tags_product_types updateMany
   */
  export type r_tags_product_typesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update r_tags_product_types.
     */
    data: XOR<r_tags_product_typesUpdateManyMutationInput, r_tags_product_typesUncheckedUpdateManyInput>
    /**
     * Filter which r_tags_product_types to update
     */
    where?: r_tags_product_typesWhereInput
  }

  /**
   * r_tags_product_types upsert
   */
  export type r_tags_product_typesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * The filter to search for the r_tags_product_types to update in case it exists.
     */
    where: r_tags_product_typesWhereUniqueInput
    /**
     * In case the r_tags_product_types found by the `where` argument doesn't exist, create a new r_tags_product_types with this data.
     */
    create: XOR<r_tags_product_typesCreateInput, r_tags_product_typesUncheckedCreateInput>
    /**
     * In case the r_tags_product_types was found with the provided `where` argument, update it with this data.
     */
    update: XOR<r_tags_product_typesUpdateInput, r_tags_product_typesUncheckedUpdateInput>
  }

  /**
   * r_tags_product_types delete
   */
  export type r_tags_product_typesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    /**
     * Filter which r_tags_product_types to delete.
     */
    where: r_tags_product_typesWhereUniqueInput
  }

  /**
   * r_tags_product_types deleteMany
   */
  export type r_tags_product_typesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_product_types to delete
     */
    where?: r_tags_product_typesWhereInput
  }

  /**
   * r_tags_product_types without action
   */
  export type r_tags_product_typesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
  }


  /**
   * Model r_tags_products
   */

  export type AggregateR_tags_products = {
    _count: R_tags_productsCountAggregateOutputType | null
    _avg: R_tags_productsAvgAggregateOutputType | null
    _sum: R_tags_productsSumAggregateOutputType | null
    _min: R_tags_productsMinAggregateOutputType | null
    _max: R_tags_productsMaxAggregateOutputType | null
  }

  export type R_tags_productsAvgAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_id: number | null
  }

  export type R_tags_productsSumAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_id: number | null
  }

  export type R_tags_productsMinAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_id: number | null
  }

  export type R_tags_productsMaxAggregateOutputType = {
    id: number | null
    tag_id: number | null
    product_id: number | null
  }

  export type R_tags_productsCountAggregateOutputType = {
    id: number
    tag_id: number
    product_id: number
    _all: number
  }


  export type R_tags_productsAvgAggregateInputType = {
    id?: true
    tag_id?: true
    product_id?: true
  }

  export type R_tags_productsSumAggregateInputType = {
    id?: true
    tag_id?: true
    product_id?: true
  }

  export type R_tags_productsMinAggregateInputType = {
    id?: true
    tag_id?: true
    product_id?: true
  }

  export type R_tags_productsMaxAggregateInputType = {
    id?: true
    tag_id?: true
    product_id?: true
  }

  export type R_tags_productsCountAggregateInputType = {
    id?: true
    tag_id?: true
    product_id?: true
    _all?: true
  }

  export type R_tags_productsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_products to aggregate.
     */
    where?: r_tags_productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_products to fetch.
     */
    orderBy?: r_tags_productsOrderByWithRelationInput | r_tags_productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: r_tags_productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned r_tags_products
    **/
    _count?: true | R_tags_productsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: R_tags_productsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: R_tags_productsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: R_tags_productsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: R_tags_productsMaxAggregateInputType
  }

  export type GetR_tags_productsAggregateType<T extends R_tags_productsAggregateArgs> = {
        [P in keyof T & keyof AggregateR_tags_products]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateR_tags_products[P]>
      : GetScalarType<T[P], AggregateR_tags_products[P]>
  }




  export type r_tags_productsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_productsWhereInput
    orderBy?: r_tags_productsOrderByWithAggregationInput | r_tags_productsOrderByWithAggregationInput[]
    by: R_tags_productsScalarFieldEnum[] | R_tags_productsScalarFieldEnum
    having?: r_tags_productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: R_tags_productsCountAggregateInputType | true
    _avg?: R_tags_productsAvgAggregateInputType
    _sum?: R_tags_productsSumAggregateInputType
    _min?: R_tags_productsMinAggregateInputType
    _max?: R_tags_productsMaxAggregateInputType
  }

  export type R_tags_productsGroupByOutputType = {
    id: number
    tag_id: number
    product_id: number
    _count: R_tags_productsCountAggregateOutputType | null
    _avg: R_tags_productsAvgAggregateOutputType | null
    _sum: R_tags_productsSumAggregateOutputType | null
    _min: R_tags_productsMinAggregateOutputType | null
    _max: R_tags_productsMaxAggregateOutputType | null
  }

  type GetR_tags_productsGroupByPayload<T extends r_tags_productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<R_tags_productsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof R_tags_productsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], R_tags_productsGroupByOutputType[P]>
            : GetScalarType<T[P], R_tags_productsGroupByOutputType[P]>
        }
      >
    >


  export type r_tags_productsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag_id?: boolean
    product_id?: boolean
    products?: boolean | productsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["r_tags_products"]>


  export type r_tags_productsSelectScalar = {
    id?: boolean
    tag_id?: boolean
    product_id?: boolean
  }

  export type r_tags_productsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | productsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }

  export type $r_tags_productsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "r_tags_products"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>
      tags: Prisma.$tagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag_id: number
      product_id: number
    }, ExtArgs["result"]["r_tags_products"]>
    composites: {}
  }

  type r_tags_productsGetPayload<S extends boolean | null | undefined | r_tags_productsDefaultArgs> = $Result.GetResult<Prisma.$r_tags_productsPayload, S>

  type r_tags_productsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<r_tags_productsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: R_tags_productsCountAggregateInputType | true
    }

  export interface r_tags_productsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['r_tags_products'], meta: { name: 'r_tags_products' } }
    /**
     * Find zero or one R_tags_products that matches the filter.
     * @param {r_tags_productsFindUniqueArgs} args - Arguments to find a R_tags_products
     * @example
     * // Get one R_tags_products
     * const r_tags_products = await prisma.r_tags_products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends r_tags_productsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_productsFindUniqueArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one R_tags_products that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {r_tags_productsFindUniqueOrThrowArgs} args - Arguments to find a R_tags_products
     * @example
     * // Get one R_tags_products
     * const r_tags_products = await prisma.r_tags_products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends r_tags_productsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_productsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first R_tags_products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_productsFindFirstArgs} args - Arguments to find a R_tags_products
     * @example
     * // Get one R_tags_products
     * const r_tags_products = await prisma.r_tags_products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends r_tags_productsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_productsFindFirstArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first R_tags_products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_productsFindFirstOrThrowArgs} args - Arguments to find a R_tags_products
     * @example
     * // Get one R_tags_products
     * const r_tags_products = await prisma.r_tags_products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends r_tags_productsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_productsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more R_tags_products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_productsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all R_tags_products
     * const r_tags_products = await prisma.r_tags_products.findMany()
     * 
     * // Get first 10 R_tags_products
     * const r_tags_products = await prisma.r_tags_products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const r_tags_productsWithIdOnly = await prisma.r_tags_products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends r_tags_productsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_productsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a R_tags_products.
     * @param {r_tags_productsCreateArgs} args - Arguments to create a R_tags_products.
     * @example
     * // Create one R_tags_products
     * const R_tags_products = await prisma.r_tags_products.create({
     *   data: {
     *     // ... data to create a R_tags_products
     *   }
     * })
     * 
    **/
    create<T extends r_tags_productsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_productsCreateArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many R_tags_products.
     * @param {r_tags_productsCreateManyArgs} args - Arguments to create many R_tags_products.
     * @example
     * // Create many R_tags_products
     * const r_tags_products = await prisma.r_tags_products.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends r_tags_productsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_productsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a R_tags_products.
     * @param {r_tags_productsDeleteArgs} args - Arguments to delete one R_tags_products.
     * @example
     * // Delete one R_tags_products
     * const R_tags_products = await prisma.r_tags_products.delete({
     *   where: {
     *     // ... filter to delete one R_tags_products
     *   }
     * })
     * 
    **/
    delete<T extends r_tags_productsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_productsDeleteArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one R_tags_products.
     * @param {r_tags_productsUpdateArgs} args - Arguments to update one R_tags_products.
     * @example
     * // Update one R_tags_products
     * const r_tags_products = await prisma.r_tags_products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends r_tags_productsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_productsUpdateArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more R_tags_products.
     * @param {r_tags_productsDeleteManyArgs} args - Arguments to filter R_tags_products to delete.
     * @example
     * // Delete a few R_tags_products
     * const { count } = await prisma.r_tags_products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends r_tags_productsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_productsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more R_tags_products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many R_tags_products
     * const r_tags_products = await prisma.r_tags_products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends r_tags_productsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_productsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one R_tags_products.
     * @param {r_tags_productsUpsertArgs} args - Arguments to update or create a R_tags_products.
     * @example
     * // Update or create a R_tags_products
     * const r_tags_products = await prisma.r_tags_products.upsert({
     *   create: {
     *     // ... data to create a R_tags_products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the R_tags_products we want to update
     *   }
     * })
    **/
    upsert<T extends r_tags_productsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_productsUpsertArgs<ExtArgs>>
    ): Prisma__r_tags_productsClient<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of R_tags_products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_productsCountArgs} args - Arguments to filter R_tags_products to count.
     * @example
     * // Count the number of R_tags_products
     * const count = await prisma.r_tags_products.count({
     *   where: {
     *     // ... the filter for the R_tags_products we want to count
     *   }
     * })
    **/
    count<T extends r_tags_productsCountArgs>(
      args?: Subset<T, r_tags_productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], R_tags_productsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a R_tags_products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {R_tags_productsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends R_tags_productsAggregateArgs>(args: Subset<T, R_tags_productsAggregateArgs>): Prisma.PrismaPromise<GetR_tags_productsAggregateType<T>>

    /**
     * Group by R_tags_products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends r_tags_productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: r_tags_productsGroupByArgs['orderBy'] }
        : { orderBy?: r_tags_productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, r_tags_productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetR_tags_productsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the r_tags_products model
   */
  readonly fields: r_tags_productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for r_tags_products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__r_tags_productsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tags<T extends tagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tagsDefaultArgs<ExtArgs>>): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the r_tags_products model
   */ 
  interface r_tags_productsFieldRefs {
    readonly id: FieldRef<"r_tags_products", 'Int'>
    readonly tag_id: FieldRef<"r_tags_products", 'Int'>
    readonly product_id: FieldRef<"r_tags_products", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * r_tags_products findUnique
   */
  export type r_tags_productsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_products to fetch.
     */
    where: r_tags_productsWhereUniqueInput
  }

  /**
   * r_tags_products findUniqueOrThrow
   */
  export type r_tags_productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_products to fetch.
     */
    where: r_tags_productsWhereUniqueInput
  }

  /**
   * r_tags_products findFirst
   */
  export type r_tags_productsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_products to fetch.
     */
    where?: r_tags_productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_products to fetch.
     */
    orderBy?: r_tags_productsOrderByWithRelationInput | r_tags_productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_products.
     */
    cursor?: r_tags_productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_products.
     */
    distinct?: R_tags_productsScalarFieldEnum | R_tags_productsScalarFieldEnum[]
  }

  /**
   * r_tags_products findFirstOrThrow
   */
  export type r_tags_productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_products to fetch.
     */
    where?: r_tags_productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_products to fetch.
     */
    orderBy?: r_tags_productsOrderByWithRelationInput | r_tags_productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_products.
     */
    cursor?: r_tags_productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_products.
     */
    distinct?: R_tags_productsScalarFieldEnum | R_tags_productsScalarFieldEnum[]
  }

  /**
   * r_tags_products findMany
   */
  export type r_tags_productsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_products to fetch.
     */
    where?: r_tags_productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_products to fetch.
     */
    orderBy?: r_tags_productsOrderByWithRelationInput | r_tags_productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing r_tags_products.
     */
    cursor?: r_tags_productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_products.
     */
    skip?: number
    distinct?: R_tags_productsScalarFieldEnum | R_tags_productsScalarFieldEnum[]
  }

  /**
   * r_tags_products create
   */
  export type r_tags_productsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * The data needed to create a r_tags_products.
     */
    data: XOR<r_tags_productsCreateInput, r_tags_productsUncheckedCreateInput>
  }

  /**
   * r_tags_products createMany
   */
  export type r_tags_productsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many r_tags_products.
     */
    data: r_tags_productsCreateManyInput | r_tags_productsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * r_tags_products update
   */
  export type r_tags_productsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * The data needed to update a r_tags_products.
     */
    data: XOR<r_tags_productsUpdateInput, r_tags_productsUncheckedUpdateInput>
    /**
     * Choose, which r_tags_products to update.
     */
    where: r_tags_productsWhereUniqueInput
  }

  /**
   * r_tags_products updateMany
   */
  export type r_tags_productsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update r_tags_products.
     */
    data: XOR<r_tags_productsUpdateManyMutationInput, r_tags_productsUncheckedUpdateManyInput>
    /**
     * Filter which r_tags_products to update
     */
    where?: r_tags_productsWhereInput
  }

  /**
   * r_tags_products upsert
   */
  export type r_tags_productsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * The filter to search for the r_tags_products to update in case it exists.
     */
    where: r_tags_productsWhereUniqueInput
    /**
     * In case the r_tags_products found by the `where` argument doesn't exist, create a new r_tags_products with this data.
     */
    create: XOR<r_tags_productsCreateInput, r_tags_productsUncheckedCreateInput>
    /**
     * In case the r_tags_products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<r_tags_productsUpdateInput, r_tags_productsUncheckedUpdateInput>
  }

  /**
   * r_tags_products delete
   */
  export type r_tags_productsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    /**
     * Filter which r_tags_products to delete.
     */
    where: r_tags_productsWhereUniqueInput
  }

  /**
   * r_tags_products deleteMany
   */
  export type r_tags_productsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_products to delete
     */
    where?: r_tags_productsWhereInput
  }

  /**
   * r_tags_products without action
   */
  export type r_tags_productsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
  }


  /**
   * Model r_tags_projects
   */

  export type AggregateR_tags_projects = {
    _count: R_tags_projectsCountAggregateOutputType | null
    _avg: R_tags_projectsAvgAggregateOutputType | null
    _sum: R_tags_projectsSumAggregateOutputType | null
    _min: R_tags_projectsMinAggregateOutputType | null
    _max: R_tags_projectsMaxAggregateOutputType | null
  }

  export type R_tags_projectsAvgAggregateOutputType = {
    id: number | null
    tag_id: number | null
    project_id: number | null
  }

  export type R_tags_projectsSumAggregateOutputType = {
    id: number | null
    tag_id: number | null
    project_id: number | null
  }

  export type R_tags_projectsMinAggregateOutputType = {
    id: number | null
    tag_id: number | null
    project_id: number | null
  }

  export type R_tags_projectsMaxAggregateOutputType = {
    id: number | null
    tag_id: number | null
    project_id: number | null
  }

  export type R_tags_projectsCountAggregateOutputType = {
    id: number
    tag_id: number
    project_id: number
    _all: number
  }


  export type R_tags_projectsAvgAggregateInputType = {
    id?: true
    tag_id?: true
    project_id?: true
  }

  export type R_tags_projectsSumAggregateInputType = {
    id?: true
    tag_id?: true
    project_id?: true
  }

  export type R_tags_projectsMinAggregateInputType = {
    id?: true
    tag_id?: true
    project_id?: true
  }

  export type R_tags_projectsMaxAggregateInputType = {
    id?: true
    tag_id?: true
    project_id?: true
  }

  export type R_tags_projectsCountAggregateInputType = {
    id?: true
    tag_id?: true
    project_id?: true
    _all?: true
  }

  export type R_tags_projectsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_projects to aggregate.
     */
    where?: r_tags_projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_projects to fetch.
     */
    orderBy?: r_tags_projectsOrderByWithRelationInput | r_tags_projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: r_tags_projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned r_tags_projects
    **/
    _count?: true | R_tags_projectsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: R_tags_projectsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: R_tags_projectsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: R_tags_projectsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: R_tags_projectsMaxAggregateInputType
  }

  export type GetR_tags_projectsAggregateType<T extends R_tags_projectsAggregateArgs> = {
        [P in keyof T & keyof AggregateR_tags_projects]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateR_tags_projects[P]>
      : GetScalarType<T[P], AggregateR_tags_projects[P]>
  }




  export type r_tags_projectsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: r_tags_projectsWhereInput
    orderBy?: r_tags_projectsOrderByWithAggregationInput | r_tags_projectsOrderByWithAggregationInput[]
    by: R_tags_projectsScalarFieldEnum[] | R_tags_projectsScalarFieldEnum
    having?: r_tags_projectsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: R_tags_projectsCountAggregateInputType | true
    _avg?: R_tags_projectsAvgAggregateInputType
    _sum?: R_tags_projectsSumAggregateInputType
    _min?: R_tags_projectsMinAggregateInputType
    _max?: R_tags_projectsMaxAggregateInputType
  }

  export type R_tags_projectsGroupByOutputType = {
    id: number
    tag_id: number
    project_id: number
    _count: R_tags_projectsCountAggregateOutputType | null
    _avg: R_tags_projectsAvgAggregateOutputType | null
    _sum: R_tags_projectsSumAggregateOutputType | null
    _min: R_tags_projectsMinAggregateOutputType | null
    _max: R_tags_projectsMaxAggregateOutputType | null
  }

  type GetR_tags_projectsGroupByPayload<T extends r_tags_projectsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<R_tags_projectsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof R_tags_projectsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], R_tags_projectsGroupByOutputType[P]>
            : GetScalarType<T[P], R_tags_projectsGroupByOutputType[P]>
        }
      >
    >


  export type r_tags_projectsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag_id?: boolean
    project_id?: boolean
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["r_tags_projects"]>


  export type r_tags_projectsSelectScalar = {
    id?: boolean
    tag_id?: boolean
    project_id?: boolean
  }

  export type r_tags_projectsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | projectsDefaultArgs<ExtArgs>
    tags?: boolean | tagsDefaultArgs<ExtArgs>
  }

  export type $r_tags_projectsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "r_tags_projects"
    objects: {
      projects: Prisma.$projectsPayload<ExtArgs>
      tags: Prisma.$tagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag_id: number
      project_id: number
    }, ExtArgs["result"]["r_tags_projects"]>
    composites: {}
  }

  type r_tags_projectsGetPayload<S extends boolean | null | undefined | r_tags_projectsDefaultArgs> = $Result.GetResult<Prisma.$r_tags_projectsPayload, S>

  type r_tags_projectsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<r_tags_projectsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: R_tags_projectsCountAggregateInputType | true
    }

  export interface r_tags_projectsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['r_tags_projects'], meta: { name: 'r_tags_projects' } }
    /**
     * Find zero or one R_tags_projects that matches the filter.
     * @param {r_tags_projectsFindUniqueArgs} args - Arguments to find a R_tags_projects
     * @example
     * // Get one R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends r_tags_projectsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_projectsFindUniqueArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one R_tags_projects that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {r_tags_projectsFindUniqueOrThrowArgs} args - Arguments to find a R_tags_projects
     * @example
     * // Get one R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends r_tags_projectsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_projectsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first R_tags_projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_projectsFindFirstArgs} args - Arguments to find a R_tags_projects
     * @example
     * // Get one R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends r_tags_projectsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_projectsFindFirstArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first R_tags_projects that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_projectsFindFirstOrThrowArgs} args - Arguments to find a R_tags_projects
     * @example
     * // Get one R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends r_tags_projectsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_projectsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more R_tags_projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_projectsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.findMany()
     * 
     * // Get first 10 R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const r_tags_projectsWithIdOnly = await prisma.r_tags_projects.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends r_tags_projectsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_projectsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a R_tags_projects.
     * @param {r_tags_projectsCreateArgs} args - Arguments to create a R_tags_projects.
     * @example
     * // Create one R_tags_projects
     * const R_tags_projects = await prisma.r_tags_projects.create({
     *   data: {
     *     // ... data to create a R_tags_projects
     *   }
     * })
     * 
    **/
    create<T extends r_tags_projectsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_projectsCreateArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many R_tags_projects.
     * @param {r_tags_projectsCreateManyArgs} args - Arguments to create many R_tags_projects.
     * @example
     * // Create many R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends r_tags_projectsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_projectsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a R_tags_projects.
     * @param {r_tags_projectsDeleteArgs} args - Arguments to delete one R_tags_projects.
     * @example
     * // Delete one R_tags_projects
     * const R_tags_projects = await prisma.r_tags_projects.delete({
     *   where: {
     *     // ... filter to delete one R_tags_projects
     *   }
     * })
     * 
    **/
    delete<T extends r_tags_projectsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_projectsDeleteArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one R_tags_projects.
     * @param {r_tags_projectsUpdateArgs} args - Arguments to update one R_tags_projects.
     * @example
     * // Update one R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends r_tags_projectsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_projectsUpdateArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more R_tags_projects.
     * @param {r_tags_projectsDeleteManyArgs} args - Arguments to filter R_tags_projects to delete.
     * @example
     * // Delete a few R_tags_projects
     * const { count } = await prisma.r_tags_projects.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends r_tags_projectsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, r_tags_projectsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more R_tags_projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_projectsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends r_tags_projectsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_projectsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one R_tags_projects.
     * @param {r_tags_projectsUpsertArgs} args - Arguments to update or create a R_tags_projects.
     * @example
     * // Update or create a R_tags_projects
     * const r_tags_projects = await prisma.r_tags_projects.upsert({
     *   create: {
     *     // ... data to create a R_tags_projects
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the R_tags_projects we want to update
     *   }
     * })
    **/
    upsert<T extends r_tags_projectsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, r_tags_projectsUpsertArgs<ExtArgs>>
    ): Prisma__r_tags_projectsClient<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of R_tags_projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_projectsCountArgs} args - Arguments to filter R_tags_projects to count.
     * @example
     * // Count the number of R_tags_projects
     * const count = await prisma.r_tags_projects.count({
     *   where: {
     *     // ... the filter for the R_tags_projects we want to count
     *   }
     * })
    **/
    count<T extends r_tags_projectsCountArgs>(
      args?: Subset<T, r_tags_projectsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], R_tags_projectsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a R_tags_projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {R_tags_projectsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends R_tags_projectsAggregateArgs>(args: Subset<T, R_tags_projectsAggregateArgs>): Prisma.PrismaPromise<GetR_tags_projectsAggregateType<T>>

    /**
     * Group by R_tags_projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {r_tags_projectsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends r_tags_projectsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: r_tags_projectsGroupByArgs['orderBy'] }
        : { orderBy?: r_tags_projectsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, r_tags_projectsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetR_tags_projectsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the r_tags_projects model
   */
  readonly fields: r_tags_projectsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for r_tags_projects.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__r_tags_projectsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    projects<T extends projectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, projectsDefaultArgs<ExtArgs>>): Prisma__projectsClient<$Result.GetResult<Prisma.$projectsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tags<T extends tagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tagsDefaultArgs<ExtArgs>>): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the r_tags_projects model
   */ 
  interface r_tags_projectsFieldRefs {
    readonly id: FieldRef<"r_tags_projects", 'Int'>
    readonly tag_id: FieldRef<"r_tags_projects", 'Int'>
    readonly project_id: FieldRef<"r_tags_projects", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * r_tags_projects findUnique
   */
  export type r_tags_projectsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_projects to fetch.
     */
    where: r_tags_projectsWhereUniqueInput
  }

  /**
   * r_tags_projects findUniqueOrThrow
   */
  export type r_tags_projectsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_projects to fetch.
     */
    where: r_tags_projectsWhereUniqueInput
  }

  /**
   * r_tags_projects findFirst
   */
  export type r_tags_projectsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_projects to fetch.
     */
    where?: r_tags_projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_projects to fetch.
     */
    orderBy?: r_tags_projectsOrderByWithRelationInput | r_tags_projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_projects.
     */
    cursor?: r_tags_projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_projects.
     */
    distinct?: R_tags_projectsScalarFieldEnum | R_tags_projectsScalarFieldEnum[]
  }

  /**
   * r_tags_projects findFirstOrThrow
   */
  export type r_tags_projectsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_projects to fetch.
     */
    where?: r_tags_projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_projects to fetch.
     */
    orderBy?: r_tags_projectsOrderByWithRelationInput | r_tags_projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for r_tags_projects.
     */
    cursor?: r_tags_projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of r_tags_projects.
     */
    distinct?: R_tags_projectsScalarFieldEnum | R_tags_projectsScalarFieldEnum[]
  }

  /**
   * r_tags_projects findMany
   */
  export type r_tags_projectsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * Filter, which r_tags_projects to fetch.
     */
    where?: r_tags_projectsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of r_tags_projects to fetch.
     */
    orderBy?: r_tags_projectsOrderByWithRelationInput | r_tags_projectsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing r_tags_projects.
     */
    cursor?: r_tags_projectsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` r_tags_projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` r_tags_projects.
     */
    skip?: number
    distinct?: R_tags_projectsScalarFieldEnum | R_tags_projectsScalarFieldEnum[]
  }

  /**
   * r_tags_projects create
   */
  export type r_tags_projectsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * The data needed to create a r_tags_projects.
     */
    data: XOR<r_tags_projectsCreateInput, r_tags_projectsUncheckedCreateInput>
  }

  /**
   * r_tags_projects createMany
   */
  export type r_tags_projectsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many r_tags_projects.
     */
    data: r_tags_projectsCreateManyInput | r_tags_projectsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * r_tags_projects update
   */
  export type r_tags_projectsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * The data needed to update a r_tags_projects.
     */
    data: XOR<r_tags_projectsUpdateInput, r_tags_projectsUncheckedUpdateInput>
    /**
     * Choose, which r_tags_projects to update.
     */
    where: r_tags_projectsWhereUniqueInput
  }

  /**
   * r_tags_projects updateMany
   */
  export type r_tags_projectsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update r_tags_projects.
     */
    data: XOR<r_tags_projectsUpdateManyMutationInput, r_tags_projectsUncheckedUpdateManyInput>
    /**
     * Filter which r_tags_projects to update
     */
    where?: r_tags_projectsWhereInput
  }

  /**
   * r_tags_projects upsert
   */
  export type r_tags_projectsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * The filter to search for the r_tags_projects to update in case it exists.
     */
    where: r_tags_projectsWhereUniqueInput
    /**
     * In case the r_tags_projects found by the `where` argument doesn't exist, create a new r_tags_projects with this data.
     */
    create: XOR<r_tags_projectsCreateInput, r_tags_projectsUncheckedCreateInput>
    /**
     * In case the r_tags_projects was found with the provided `where` argument, update it with this data.
     */
    update: XOR<r_tags_projectsUpdateInput, r_tags_projectsUncheckedUpdateInput>
  }

  /**
   * r_tags_projects delete
   */
  export type r_tags_projectsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    /**
     * Filter which r_tags_projects to delete.
     */
    where: r_tags_projectsWhereUniqueInput
  }

  /**
   * r_tags_projects deleteMany
   */
  export type r_tags_projectsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which r_tags_projects to delete
     */
    where?: r_tags_projectsWhereInput
  }

  /**
   * r_tags_projects without action
   */
  export type r_tags_projectsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
  }


  /**
   * Model sections
   */

  export type AggregateSections = {
    _count: SectionsCountAggregateOutputType | null
    _avg: SectionsAvgAggregateOutputType | null
    _sum: SectionsSumAggregateOutputType | null
    _min: SectionsMinAggregateOutputType | null
    _max: SectionsMaxAggregateOutputType | null
  }

  export type SectionsAvgAggregateOutputType = {
    id: number | null
    object_id: number | null
  }

  export type SectionsSumAggregateOutputType = {
    id: number | null
    object_id: number | null
  }

  export type SectionsMinAggregateOutputType = {
    id: number | null
    number: string | null
    object_id: number | null
  }

  export type SectionsMaxAggregateOutputType = {
    id: number | null
    number: string | null
    object_id: number | null
  }

  export type SectionsCountAggregateOutputType = {
    id: number
    number: number
    object_id: number
    _all: number
  }


  export type SectionsAvgAggregateInputType = {
    id?: true
    object_id?: true
  }

  export type SectionsSumAggregateInputType = {
    id?: true
    object_id?: true
  }

  export type SectionsMinAggregateInputType = {
    id?: true
    number?: true
    object_id?: true
  }

  export type SectionsMaxAggregateInputType = {
    id?: true
    number?: true
    object_id?: true
  }

  export type SectionsCountAggregateInputType = {
    id?: true
    number?: true
    object_id?: true
    _all?: true
  }

  export type SectionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sections to aggregate.
     */
    where?: sectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sections to fetch.
     */
    orderBy?: sectionsOrderByWithRelationInput | sectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sections
    **/
    _count?: true | SectionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SectionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SectionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SectionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SectionsMaxAggregateInputType
  }

  export type GetSectionsAggregateType<T extends SectionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSections]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSections[P]>
      : GetScalarType<T[P], AggregateSections[P]>
  }




  export type sectionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sectionsWhereInput
    orderBy?: sectionsOrderByWithAggregationInput | sectionsOrderByWithAggregationInput[]
    by: SectionsScalarFieldEnum[] | SectionsScalarFieldEnum
    having?: sectionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SectionsCountAggregateInputType | true
    _avg?: SectionsAvgAggregateInputType
    _sum?: SectionsSumAggregateInputType
    _min?: SectionsMinAggregateInputType
    _max?: SectionsMaxAggregateInputType
  }

  export type SectionsGroupByOutputType = {
    id: number
    number: string
    object_id: number
    _count: SectionsCountAggregateOutputType | null
    _avg: SectionsAvgAggregateOutputType | null
    _sum: SectionsSumAggregateOutputType | null
    _min: SectionsMinAggregateOutputType | null
    _max: SectionsMaxAggregateOutputType | null
  }

  type GetSectionsGroupByPayload<T extends sectionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SectionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SectionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SectionsGroupByOutputType[P]>
            : GetScalarType<T[P], SectionsGroupByOutputType[P]>
        }
      >
    >


  export type sectionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    object_id?: boolean
    floors?: boolean | sections$floorsArgs<ExtArgs>
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    _count?: boolean | SectionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sections"]>


  export type sectionsSelectScalar = {
    id?: boolean
    number?: boolean
    object_id?: boolean
  }

  export type sectionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    floors?: boolean | sections$floorsArgs<ExtArgs>
    objects?: boolean | objectsDefaultArgs<ExtArgs>
    _count?: boolean | SectionsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $sectionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sections"
    objects: {
      floors: Prisma.$floorsPayload<ExtArgs>[]
      objects: Prisma.$objectsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      object_id: number
    }, ExtArgs["result"]["sections"]>
    composites: {}
  }

  type sectionsGetPayload<S extends boolean | null | undefined | sectionsDefaultArgs> = $Result.GetResult<Prisma.$sectionsPayload, S>

  type sectionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<sectionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SectionsCountAggregateInputType | true
    }

  export interface sectionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sections'], meta: { name: 'sections' } }
    /**
     * Find zero or one Sections that matches the filter.
     * @param {sectionsFindUniqueArgs} args - Arguments to find a Sections
     * @example
     * // Get one Sections
     * const sections = await prisma.sections.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sectionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sectionsFindUniqueArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sections that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {sectionsFindUniqueOrThrowArgs} args - Arguments to find a Sections
     * @example
     * // Get one Sections
     * const sections = await prisma.sections.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sectionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sectionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sectionsFindFirstArgs} args - Arguments to find a Sections
     * @example
     * // Get one Sections
     * const sections = await prisma.sections.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sectionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sectionsFindFirstArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sections that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sectionsFindFirstOrThrowArgs} args - Arguments to find a Sections
     * @example
     * // Get one Sections
     * const sections = await prisma.sections.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sectionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sectionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sectionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sections
     * const sections = await prisma.sections.findMany()
     * 
     * // Get first 10 Sections
     * const sections = await prisma.sections.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sectionsWithIdOnly = await prisma.sections.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sectionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sectionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sections.
     * @param {sectionsCreateArgs} args - Arguments to create a Sections.
     * @example
     * // Create one Sections
     * const Sections = await prisma.sections.create({
     *   data: {
     *     // ... data to create a Sections
     *   }
     * })
     * 
    **/
    create<T extends sectionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sectionsCreateArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sections.
     * @param {sectionsCreateManyArgs} args - Arguments to create many Sections.
     * @example
     * // Create many Sections
     * const sections = await prisma.sections.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends sectionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sectionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sections.
     * @param {sectionsDeleteArgs} args - Arguments to delete one Sections.
     * @example
     * // Delete one Sections
     * const Sections = await prisma.sections.delete({
     *   where: {
     *     // ... filter to delete one Sections
     *   }
     * })
     * 
    **/
    delete<T extends sectionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sectionsDeleteArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sections.
     * @param {sectionsUpdateArgs} args - Arguments to update one Sections.
     * @example
     * // Update one Sections
     * const sections = await prisma.sections.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sectionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sectionsUpdateArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sections.
     * @param {sectionsDeleteManyArgs} args - Arguments to filter Sections to delete.
     * @example
     * // Delete a few Sections
     * const { count } = await prisma.sections.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sectionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sectionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sectionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sections
     * const sections = await prisma.sections.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sectionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sectionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sections.
     * @param {sectionsUpsertArgs} args - Arguments to update or create a Sections.
     * @example
     * // Update or create a Sections
     * const sections = await prisma.sections.upsert({
     *   create: {
     *     // ... data to create a Sections
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sections we want to update
     *   }
     * })
    **/
    upsert<T extends sectionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sectionsUpsertArgs<ExtArgs>>
    ): Prisma__sectionsClient<$Result.GetResult<Prisma.$sectionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sectionsCountArgs} args - Arguments to filter Sections to count.
     * @example
     * // Count the number of Sections
     * const count = await prisma.sections.count({
     *   where: {
     *     // ... the filter for the Sections we want to count
     *   }
     * })
    **/
    count<T extends sectionsCountArgs>(
      args?: Subset<T, sectionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SectionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SectionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SectionsAggregateArgs>(args: Subset<T, SectionsAggregateArgs>): Prisma.PrismaPromise<GetSectionsAggregateType<T>>

    /**
     * Group by Sections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sectionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sectionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sectionsGroupByArgs['orderBy'] }
        : { orderBy?: sectionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sectionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSectionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sections model
   */
  readonly fields: sectionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sections.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sectionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    floors<T extends sections$floorsArgs<ExtArgs> = {}>(args?: Subset<T, sections$floorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$floorsPayload<ExtArgs>, T, 'findMany'> | Null>;

    objects<T extends objectsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, objectsDefaultArgs<ExtArgs>>): Prisma__objectsClient<$Result.GetResult<Prisma.$objectsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the sections model
   */ 
  interface sectionsFieldRefs {
    readonly id: FieldRef<"sections", 'Int'>
    readonly number: FieldRef<"sections", 'String'>
    readonly object_id: FieldRef<"sections", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * sections findUnique
   */
  export type sectionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * Filter, which sections to fetch.
     */
    where: sectionsWhereUniqueInput
  }

  /**
   * sections findUniqueOrThrow
   */
  export type sectionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * Filter, which sections to fetch.
     */
    where: sectionsWhereUniqueInput
  }

  /**
   * sections findFirst
   */
  export type sectionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * Filter, which sections to fetch.
     */
    where?: sectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sections to fetch.
     */
    orderBy?: sectionsOrderByWithRelationInput | sectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sections.
     */
    cursor?: sectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sections.
     */
    distinct?: SectionsScalarFieldEnum | SectionsScalarFieldEnum[]
  }

  /**
   * sections findFirstOrThrow
   */
  export type sectionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * Filter, which sections to fetch.
     */
    where?: sectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sections to fetch.
     */
    orderBy?: sectionsOrderByWithRelationInput | sectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sections.
     */
    cursor?: sectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sections.
     */
    distinct?: SectionsScalarFieldEnum | SectionsScalarFieldEnum[]
  }

  /**
   * sections findMany
   */
  export type sectionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * Filter, which sections to fetch.
     */
    where?: sectionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sections to fetch.
     */
    orderBy?: sectionsOrderByWithRelationInput | sectionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sections.
     */
    cursor?: sectionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sections.
     */
    skip?: number
    distinct?: SectionsScalarFieldEnum | SectionsScalarFieldEnum[]
  }

  /**
   * sections create
   */
  export type sectionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * The data needed to create a sections.
     */
    data: XOR<sectionsCreateInput, sectionsUncheckedCreateInput>
  }

  /**
   * sections createMany
   */
  export type sectionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sections.
     */
    data: sectionsCreateManyInput | sectionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sections update
   */
  export type sectionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * The data needed to update a sections.
     */
    data: XOR<sectionsUpdateInput, sectionsUncheckedUpdateInput>
    /**
     * Choose, which sections to update.
     */
    where: sectionsWhereUniqueInput
  }

  /**
   * sections updateMany
   */
  export type sectionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sections.
     */
    data: XOR<sectionsUpdateManyMutationInput, sectionsUncheckedUpdateManyInput>
    /**
     * Filter which sections to update
     */
    where?: sectionsWhereInput
  }

  /**
   * sections upsert
   */
  export type sectionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * The filter to search for the sections to update in case it exists.
     */
    where: sectionsWhereUniqueInput
    /**
     * In case the sections found by the `where` argument doesn't exist, create a new sections with this data.
     */
    create: XOR<sectionsCreateInput, sectionsUncheckedCreateInput>
    /**
     * In case the sections was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sectionsUpdateInput, sectionsUncheckedUpdateInput>
  }

  /**
   * sections delete
   */
  export type sectionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
    /**
     * Filter which sections to delete.
     */
    where: sectionsWhereUniqueInput
  }

  /**
   * sections deleteMany
   */
  export type sectionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sections to delete
     */
    where?: sectionsWhereInput
  }

  /**
   * sections.floors
   */
  export type sections$floorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the floors
     */
    select?: floorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: floorsInclude<ExtArgs> | null
    where?: floorsWhereInput
    orderBy?: floorsOrderByWithRelationInput | floorsOrderByWithRelationInput[]
    cursor?: floorsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FloorsScalarFieldEnum | FloorsScalarFieldEnum[]
  }

  /**
   * sections without action
   */
  export type sectionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sections
     */
    select?: sectionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sectionsInclude<ExtArgs> | null
  }


  /**
   * Model tags
   */

  export type AggregateTags = {
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  export type TagsAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
  }

  export type TagsSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
  }

  export type TagsMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: Decimal | null
  }

  export type TagsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: Decimal | null
  }

  export type TagsCountAggregateOutputType = {
    id: number
    name: number
    price: number
    _all: number
  }


  export type TagsAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type TagsSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type TagsMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
  }

  export type TagsMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
  }

  export type TagsCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    _all?: true
  }

  export type TagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tags to aggregate.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tags
    **/
    _count?: true | TagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsMaxAggregateInputType
  }

  export type GetTagsAggregateType<T extends TagsAggregateArgs> = {
        [P in keyof T & keyof AggregateTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTags[P]>
      : GetScalarType<T[P], AggregateTags[P]>
  }




  export type tagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tagsWhereInput
    orderBy?: tagsOrderByWithAggregationInput | tagsOrderByWithAggregationInput[]
    by: TagsScalarFieldEnum[] | TagsScalarFieldEnum
    having?: tagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsCountAggregateInputType | true
    _avg?: TagsAvgAggregateInputType
    _sum?: TagsSumAggregateInputType
    _min?: TagsMinAggregateInputType
    _max?: TagsMaxAggregateInputType
  }

  export type TagsGroupByOutputType = {
    id: number
    name: string
    price: Decimal
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  type GetTagsGroupByPayload<T extends tagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsGroupByOutputType[P]>
            : GetScalarType<T[P], TagsGroupByOutputType[P]>
        }
      >
    >


  export type tagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    r_product_tags?: boolean | tags$r_product_tagsArgs<ExtArgs>
    r_tags_categories?: boolean | tags$r_tags_categoriesArgs<ExtArgs>
    r_tags_objects?: boolean | tags$r_tags_objectsArgs<ExtArgs>
    r_tags_product_types?: boolean | tags$r_tags_product_typesArgs<ExtArgs>
    r_tags_products?: boolean | tags$r_tags_productsArgs<ExtArgs>
    r_tags_projects?: boolean | tags$r_tags_projectsArgs<ExtArgs>
    _count?: boolean | TagsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tags"]>


  export type tagsSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
  }

  export type tagsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    r_product_tags?: boolean | tags$r_product_tagsArgs<ExtArgs>
    r_tags_categories?: boolean | tags$r_tags_categoriesArgs<ExtArgs>
    r_tags_objects?: boolean | tags$r_tags_objectsArgs<ExtArgs>
    r_tags_product_types?: boolean | tags$r_tags_product_typesArgs<ExtArgs>
    r_tags_products?: boolean | tags$r_tags_productsArgs<ExtArgs>
    r_tags_projects?: boolean | tags$r_tags_projectsArgs<ExtArgs>
    _count?: boolean | TagsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $tagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tags"
    objects: {
      r_product_tags: Prisma.$r_product_tagsPayload<ExtArgs>[]
      r_tags_categories: Prisma.$r_tags_categoriesPayload<ExtArgs>[]
      r_tags_objects: Prisma.$r_tags_objectsPayload<ExtArgs>[]
      r_tags_product_types: Prisma.$r_tags_product_typesPayload<ExtArgs>[]
      r_tags_products: Prisma.$r_tags_productsPayload<ExtArgs>[]
      r_tags_projects: Prisma.$r_tags_projectsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: Prisma.Decimal
    }, ExtArgs["result"]["tags"]>
    composites: {}
  }

  type tagsGetPayload<S extends boolean | null | undefined | tagsDefaultArgs> = $Result.GetResult<Prisma.$tagsPayload, S>

  type tagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tagsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagsCountAggregateInputType | true
    }

  export interface tagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tags'], meta: { name: 'tags' } }
    /**
     * Find zero or one Tags that matches the filter.
     * @param {tagsFindUniqueArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tagsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tagsFindUniqueArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tags that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {tagsFindUniqueOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tagsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsFindFirstArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tagsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindFirstArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsFindFirstOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tagsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tags.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagsWithIdOnly = await prisma.tags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tagsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tags.
     * @param {tagsCreateArgs} args - Arguments to create a Tags.
     * @example
     * // Create one Tags
     * const Tags = await prisma.tags.create({
     *   data: {
     *     // ... data to create a Tags
     *   }
     * })
     * 
    **/
    create<T extends tagsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tagsCreateArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {tagsCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tags = await prisma.tags.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends tagsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tags.
     * @param {tagsDeleteArgs} args - Arguments to delete one Tags.
     * @example
     * // Delete one Tags
     * const Tags = await prisma.tags.delete({
     *   where: {
     *     // ... filter to delete one Tags
     *   }
     * })
     * 
    **/
    delete<T extends tagsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tagsDeleteArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tags.
     * @param {tagsUpdateArgs} args - Arguments to update one Tags.
     * @example
     * // Update one Tags
     * const tags = await prisma.tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tagsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tagsUpdateArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {tagsDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tagsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tagsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tags = await prisma.tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tagsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tagsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tags.
     * @param {tagsUpsertArgs} args - Arguments to update or create a Tags.
     * @example
     * // Update or create a Tags
     * const tags = await prisma.tags.upsert({
     *   create: {
     *     // ... data to create a Tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tags we want to update
     *   }
     * })
    **/
    upsert<T extends tagsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tagsUpsertArgs<ExtArgs>>
    ): Prisma__tagsClient<$Result.GetResult<Prisma.$tagsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tags.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends tagsCountArgs>(
      args?: Subset<T, tagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsAggregateArgs>(args: Subset<T, TagsAggregateArgs>): Prisma.PrismaPromise<GetTagsAggregateType<T>>

    /**
     * Group by Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tagsGroupByArgs['orderBy'] }
        : { orderBy?: tagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tags model
   */
  readonly fields: tagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    r_product_tags<T extends tags$r_product_tagsArgs<ExtArgs> = {}>(args?: Subset<T, tags$r_product_tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_product_tagsPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_categories<T extends tags$r_tags_categoriesArgs<ExtArgs> = {}>(args?: Subset<T, tags$r_tags_categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_categoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_objects<T extends tags$r_tags_objectsArgs<ExtArgs> = {}>(args?: Subset<T, tags$r_tags_objectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_objectsPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_product_types<T extends tags$r_tags_product_typesArgs<ExtArgs> = {}>(args?: Subset<T, tags$r_tags_product_typesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_product_typesPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_products<T extends tags$r_tags_productsArgs<ExtArgs> = {}>(args?: Subset<T, tags$r_tags_productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    r_tags_projects<T extends tags$r_tags_projectsArgs<ExtArgs> = {}>(args?: Subset<T, tags$r_tags_projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$r_tags_projectsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the tags model
   */ 
  interface tagsFieldRefs {
    readonly id: FieldRef<"tags", 'Int'>
    readonly name: FieldRef<"tags", 'String'>
    readonly price: FieldRef<"tags", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * tags findUnique
   */
  export type tagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where: tagsWhereUniqueInput
  }

  /**
   * tags findUniqueOrThrow
   */
  export type tagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where: tagsWhereUniqueInput
  }

  /**
   * tags findFirst
   */
  export type tagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tags.
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }

  /**
   * tags findFirstOrThrow
   */
  export type tagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tags.
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }

  /**
   * tags findMany
   */
  export type tagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter, which tags to fetch.
     */
    where?: tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tags to fetch.
     */
    orderBy?: tagsOrderByWithRelationInput | tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tags.
     */
    cursor?: tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tags.
     */
    skip?: number
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }

  /**
   * tags create
   */
  export type tagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * The data needed to create a tags.
     */
    data: XOR<tagsCreateInput, tagsUncheckedCreateInput>
  }

  /**
   * tags createMany
   */
  export type tagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tags.
     */
    data: tagsCreateManyInput | tagsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tags update
   */
  export type tagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * The data needed to update a tags.
     */
    data: XOR<tagsUpdateInput, tagsUncheckedUpdateInput>
    /**
     * Choose, which tags to update.
     */
    where: tagsWhereUniqueInput
  }

  /**
   * tags updateMany
   */
  export type tagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tags.
     */
    data: XOR<tagsUpdateManyMutationInput, tagsUncheckedUpdateManyInput>
    /**
     * Filter which tags to update
     */
    where?: tagsWhereInput
  }

  /**
   * tags upsert
   */
  export type tagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * The filter to search for the tags to update in case it exists.
     */
    where: tagsWhereUniqueInput
    /**
     * In case the tags found by the `where` argument doesn't exist, create a new tags with this data.
     */
    create: XOR<tagsCreateInput, tagsUncheckedCreateInput>
    /**
     * In case the tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tagsUpdateInput, tagsUncheckedUpdateInput>
  }

  /**
   * tags delete
   */
  export type tagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
    /**
     * Filter which tags to delete.
     */
    where: tagsWhereUniqueInput
  }

  /**
   * tags deleteMany
   */
  export type tagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tags to delete
     */
    where?: tagsWhereInput
  }

  /**
   * tags.r_product_tags
   */
  export type tags$r_product_tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_product_tags
     */
    select?: r_product_tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_product_tagsInclude<ExtArgs> | null
    where?: r_product_tagsWhereInput
    orderBy?: r_product_tagsOrderByWithRelationInput | r_product_tagsOrderByWithRelationInput[]
    cursor?: r_product_tagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_product_tagsScalarFieldEnum | R_product_tagsScalarFieldEnum[]
  }

  /**
   * tags.r_tags_categories
   */
  export type tags$r_tags_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_categories
     */
    select?: r_tags_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_categoriesInclude<ExtArgs> | null
    where?: r_tags_categoriesWhereInput
    orderBy?: r_tags_categoriesOrderByWithRelationInput | r_tags_categoriesOrderByWithRelationInput[]
    cursor?: r_tags_categoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_categoriesScalarFieldEnum | R_tags_categoriesScalarFieldEnum[]
  }

  /**
   * tags.r_tags_objects
   */
  export type tags$r_tags_objectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_objects
     */
    select?: r_tags_objectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_objectsInclude<ExtArgs> | null
    where?: r_tags_objectsWhereInput
    orderBy?: r_tags_objectsOrderByWithRelationInput | r_tags_objectsOrderByWithRelationInput[]
    cursor?: r_tags_objectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_objectsScalarFieldEnum | R_tags_objectsScalarFieldEnum[]
  }

  /**
   * tags.r_tags_product_types
   */
  export type tags$r_tags_product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_product_types
     */
    select?: r_tags_product_typesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_product_typesInclude<ExtArgs> | null
    where?: r_tags_product_typesWhereInput
    orderBy?: r_tags_product_typesOrderByWithRelationInput | r_tags_product_typesOrderByWithRelationInput[]
    cursor?: r_tags_product_typesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_product_typesScalarFieldEnum | R_tags_product_typesScalarFieldEnum[]
  }

  /**
   * tags.r_tags_products
   */
  export type tags$r_tags_productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_products
     */
    select?: r_tags_productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_productsInclude<ExtArgs> | null
    where?: r_tags_productsWhereInput
    orderBy?: r_tags_productsOrderByWithRelationInput | r_tags_productsOrderByWithRelationInput[]
    cursor?: r_tags_productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_productsScalarFieldEnum | R_tags_productsScalarFieldEnum[]
  }

  /**
   * tags.r_tags_projects
   */
  export type tags$r_tags_projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the r_tags_projects
     */
    select?: r_tags_projectsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: r_tags_projectsInclude<ExtArgs> | null
    where?: r_tags_projectsWhereInput
    orderBy?: r_tags_projectsOrderByWithRelationInput | r_tags_projectsOrderByWithRelationInput[]
    cursor?: r_tags_projectsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: R_tags_projectsScalarFieldEnum | R_tags_projectsScalarFieldEnum[]
  }

  /**
   * tags without action
   */
  export type tagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tags
     */
    select?: tagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tagsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Floor_pricing_rulesScalarFieldEnum: {
    id: 'id',
    floor_id: 'floor_id',
    product_type_id: 'product_type_id',
    price_per_square_meter: 'price_per_square_meter'
  };

  export type Floor_pricing_rulesScalarFieldEnum = (typeof Floor_pricing_rulesScalarFieldEnum)[keyof typeof Floor_pricing_rulesScalarFieldEnum]


  export const FloorsScalarFieldEnum: {
    id: 'id',
    number: 'number',
    section_id: 'section_id'
  };

  export type FloorsScalarFieldEnum = (typeof FloorsScalarFieldEnum)[keyof typeof FloorsScalarFieldEnum]


  export const Integration_sourcesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type Integration_sourcesScalarFieldEnum = (typeof Integration_sourcesScalarFieldEnum)[keyof typeof Integration_sourcesScalarFieldEnum]


  export const IntegrationsScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    source_id: 'source_id',
    source_product_id: 'source_product_id'
  };

  export type IntegrationsScalarFieldEnum = (typeof IntegrationsScalarFieldEnum)[keyof typeof IntegrationsScalarFieldEnum]


  export const ObjectsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at',
    common_db_object_id: 'common_db_object_id'
  };

  export type ObjectsScalarFieldEnum = (typeof ObjectsScalarFieldEnum)[keyof typeof ObjectsScalarFieldEnum]


  export const Product_categoriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Product_categoriesScalarFieldEnum = (typeof Product_categoriesScalarFieldEnum)[keyof typeof Product_categoriesScalarFieldEnum]


  export const Product_filesScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    type: 'type',
    path: 'path'
  };

  export type Product_filesScalarFieldEnum = (typeof Product_filesScalarFieldEnum)[keyof typeof Product_filesScalarFieldEnum]


  export const Product_meter_numbersScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    electricity: 'electricity',
    heating: 'heating',
    hot_water: 'hot_water',
    cold_water: 'cold_water'
  };

  export type Product_meter_numbersScalarFieldEnum = (typeof Product_meter_numbersScalarFieldEnum)[keyof typeof Product_meter_numbersScalarFieldEnum]


  export const Product_price_historyScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    price: 'price',
    created_at: 'created_at'
  };

  export type Product_price_historyScalarFieldEnum = (typeof Product_price_historyScalarFieldEnum)[keyof typeof Product_price_historyScalarFieldEnum]


  export const Product_pricing_rulesScalarFieldEnum: {
    id: 'id',
    product_type_id: 'product_type_id',
    step_number: 'step_number',
    price_per_square_meter: 'price_per_square_meter',
    flats_percent: 'flats_percent',
    planned_days: 'planned_days'
  };

  export type Product_pricing_rulesScalarFieldEnum = (typeof Product_pricing_rulesScalarFieldEnum)[keyof typeof Product_pricing_rulesScalarFieldEnum]


  export const Product_typesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at',
    object_id: 'object_id'
  };

  export type Product_typesScalarFieldEnum = (typeof Product_typesScalarFieldEnum)[keyof typeof Product_typesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    number: 'number',
    area: 'area',
    price: 'price',
    one_gt_id: 'one_gt_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    object_id: 'object_id',
    product_type_id: 'product_type_id',
    category_id: 'category_id',
    floor_id: 'floor_id'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const ProjectsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ProjectsScalarFieldEnum = (typeof ProjectsScalarFieldEnum)[keyof typeof ProjectsScalarFieldEnum]


  export const R_product_tagsScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    tag_id: 'tag_id'
  };

  export type R_product_tagsScalarFieldEnum = (typeof R_product_tagsScalarFieldEnum)[keyof typeof R_product_tagsScalarFieldEnum]


  export const R_tags_categoriesScalarFieldEnum: {
    id: 'id',
    tag_id: 'tag_id',
    category_id: 'category_id'
  };

  export type R_tags_categoriesScalarFieldEnum = (typeof R_tags_categoriesScalarFieldEnum)[keyof typeof R_tags_categoriesScalarFieldEnum]


  export const R_tags_objectsScalarFieldEnum: {
    id: 'id',
    tag_id: 'tag_id',
    object_id: 'object_id'
  };

  export type R_tags_objectsScalarFieldEnum = (typeof R_tags_objectsScalarFieldEnum)[keyof typeof R_tags_objectsScalarFieldEnum]


  export const R_tags_product_typesScalarFieldEnum: {
    id: 'id',
    tag_id: 'tag_id',
    product_type_id: 'product_type_id'
  };

  export type R_tags_product_typesScalarFieldEnum = (typeof R_tags_product_typesScalarFieldEnum)[keyof typeof R_tags_product_typesScalarFieldEnum]


  export const R_tags_productsScalarFieldEnum: {
    id: 'id',
    tag_id: 'tag_id',
    product_id: 'product_id'
  };

  export type R_tags_productsScalarFieldEnum = (typeof R_tags_productsScalarFieldEnum)[keyof typeof R_tags_productsScalarFieldEnum]


  export const R_tags_projectsScalarFieldEnum: {
    id: 'id',
    tag_id: 'tag_id',
    project_id: 'project_id'
  };

  export type R_tags_projectsScalarFieldEnum = (typeof R_tags_projectsScalarFieldEnum)[keyof typeof R_tags_projectsScalarFieldEnum]


  export const SectionsScalarFieldEnum: {
    id: 'id',
    number: 'number',
    object_id: 'object_id'
  };

  export type SectionsScalarFieldEnum = (typeof SectionsScalarFieldEnum)[keyof typeof SectionsScalarFieldEnum]


  export const TagsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price'
  };

  export type TagsScalarFieldEnum = (typeof TagsScalarFieldEnum)[keyof typeof TagsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'product_files_type'
   */
  export type Enumproduct_files_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'product_files_type'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type floor_pricing_rulesWhereInput = {
    AND?: floor_pricing_rulesWhereInput | floor_pricing_rulesWhereInput[]
    OR?: floor_pricing_rulesWhereInput[]
    NOT?: floor_pricing_rulesWhereInput | floor_pricing_rulesWhereInput[]
    id?: IntFilter<"floor_pricing_rules"> | number
    floor_id?: IntFilter<"floor_pricing_rules"> | number
    product_type_id?: IntFilter<"floor_pricing_rules"> | number
    price_per_square_meter?: DecimalFilter<"floor_pricing_rules"> | Decimal | DecimalJsLike | number | string
    floors?: XOR<FloorsRelationFilter, floorsWhereInput>
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }

  export type floor_pricing_rulesOrderByWithRelationInput = {
    id?: SortOrder
    floor_id?: SortOrder
    product_type_id?: SortOrder
    price_per_square_meter?: SortOrder
    floors?: floorsOrderByWithRelationInput
    product_types?: product_typesOrderByWithRelationInput
  }

  export type floor_pricing_rulesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_type_id_floor_id?: floor_pricing_rulesProduct_type_idFloor_idCompoundUniqueInput
    AND?: floor_pricing_rulesWhereInput | floor_pricing_rulesWhereInput[]
    OR?: floor_pricing_rulesWhereInput[]
    NOT?: floor_pricing_rulesWhereInput | floor_pricing_rulesWhereInput[]
    floor_id?: IntFilter<"floor_pricing_rules"> | number
    product_type_id?: IntFilter<"floor_pricing_rules"> | number
    price_per_square_meter?: DecimalFilter<"floor_pricing_rules"> | Decimal | DecimalJsLike | number | string
    floors?: XOR<FloorsRelationFilter, floorsWhereInput>
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }, "id" | "product_type_id_floor_id">

  export type floor_pricing_rulesOrderByWithAggregationInput = {
    id?: SortOrder
    floor_id?: SortOrder
    product_type_id?: SortOrder
    price_per_square_meter?: SortOrder
    _count?: floor_pricing_rulesCountOrderByAggregateInput
    _avg?: floor_pricing_rulesAvgOrderByAggregateInput
    _max?: floor_pricing_rulesMaxOrderByAggregateInput
    _min?: floor_pricing_rulesMinOrderByAggregateInput
    _sum?: floor_pricing_rulesSumOrderByAggregateInput
  }

  export type floor_pricing_rulesScalarWhereWithAggregatesInput = {
    AND?: floor_pricing_rulesScalarWhereWithAggregatesInput | floor_pricing_rulesScalarWhereWithAggregatesInput[]
    OR?: floor_pricing_rulesScalarWhereWithAggregatesInput[]
    NOT?: floor_pricing_rulesScalarWhereWithAggregatesInput | floor_pricing_rulesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"floor_pricing_rules"> | number
    floor_id?: IntWithAggregatesFilter<"floor_pricing_rules"> | number
    product_type_id?: IntWithAggregatesFilter<"floor_pricing_rules"> | number
    price_per_square_meter?: DecimalWithAggregatesFilter<"floor_pricing_rules"> | Decimal | DecimalJsLike | number | string
  }

  export type floorsWhereInput = {
    AND?: floorsWhereInput | floorsWhereInput[]
    OR?: floorsWhereInput[]
    NOT?: floorsWhereInput | floorsWhereInput[]
    id?: IntFilter<"floors"> | number
    number?: StringFilter<"floors"> | string
    section_id?: IntFilter<"floors"> | number
    floor_pricing_rules?: Floor_pricing_rulesListRelationFilter
    sections?: XOR<SectionsRelationFilter, sectionsWhereInput>
    products?: ProductsListRelationFilter
  }

  export type floorsOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    section_id?: SortOrder
    floor_pricing_rules?: floor_pricing_rulesOrderByRelationAggregateInput
    sections?: sectionsOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
  }

  export type floorsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: floorsWhereInput | floorsWhereInput[]
    OR?: floorsWhereInput[]
    NOT?: floorsWhereInput | floorsWhereInput[]
    number?: StringFilter<"floors"> | string
    section_id?: IntFilter<"floors"> | number
    floor_pricing_rules?: Floor_pricing_rulesListRelationFilter
    sections?: XOR<SectionsRelationFilter, sectionsWhereInput>
    products?: ProductsListRelationFilter
  }, "id">

  export type floorsOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    section_id?: SortOrder
    _count?: floorsCountOrderByAggregateInput
    _avg?: floorsAvgOrderByAggregateInput
    _max?: floorsMaxOrderByAggregateInput
    _min?: floorsMinOrderByAggregateInput
    _sum?: floorsSumOrderByAggregateInput
  }

  export type floorsScalarWhereWithAggregatesInput = {
    AND?: floorsScalarWhereWithAggregatesInput | floorsScalarWhereWithAggregatesInput[]
    OR?: floorsScalarWhereWithAggregatesInput[]
    NOT?: floorsScalarWhereWithAggregatesInput | floorsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"floors"> | number
    number?: StringWithAggregatesFilter<"floors"> | string
    section_id?: IntWithAggregatesFilter<"floors"> | number
  }

  export type integration_sourcesWhereInput = {
    AND?: integration_sourcesWhereInput | integration_sourcesWhereInput[]
    OR?: integration_sourcesWhereInput[]
    NOT?: integration_sourcesWhereInput | integration_sourcesWhereInput[]
    id?: IntFilter<"integration_sources"> | number
    name?: StringFilter<"integration_sources"> | string
    integrations?: IntegrationsListRelationFilter
  }

  export type integration_sourcesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    integrations?: integrationsOrderByRelationAggregateInput
  }

  export type integration_sourcesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: integration_sourcesWhereInput | integration_sourcesWhereInput[]
    OR?: integration_sourcesWhereInput[]
    NOT?: integration_sourcesWhereInput | integration_sourcesWhereInput[]
    name?: StringFilter<"integration_sources"> | string
    integrations?: IntegrationsListRelationFilter
  }, "id">

  export type integration_sourcesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: integration_sourcesCountOrderByAggregateInput
    _avg?: integration_sourcesAvgOrderByAggregateInput
    _max?: integration_sourcesMaxOrderByAggregateInput
    _min?: integration_sourcesMinOrderByAggregateInput
    _sum?: integration_sourcesSumOrderByAggregateInput
  }

  export type integration_sourcesScalarWhereWithAggregatesInput = {
    AND?: integration_sourcesScalarWhereWithAggregatesInput | integration_sourcesScalarWhereWithAggregatesInput[]
    OR?: integration_sourcesScalarWhereWithAggregatesInput[]
    NOT?: integration_sourcesScalarWhereWithAggregatesInput | integration_sourcesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"integration_sources"> | number
    name?: StringWithAggregatesFilter<"integration_sources"> | string
  }

  export type integrationsWhereInput = {
    AND?: integrationsWhereInput | integrationsWhereInput[]
    OR?: integrationsWhereInput[]
    NOT?: integrationsWhereInput | integrationsWhereInput[]
    id?: IntFilter<"integrations"> | number
    product_id?: IntFilter<"integrations"> | number
    source_id?: IntFilter<"integrations"> | number
    source_product_id?: StringFilter<"integrations"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
    integration_sources?: XOR<Integration_sourcesRelationFilter, integration_sourcesWhereInput>
  }

  export type integrationsOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    source_id?: SortOrder
    source_product_id?: SortOrder
    products?: productsOrderByWithRelationInput
    integration_sources?: integration_sourcesOrderByWithRelationInput
  }

  export type integrationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id_source_id_source_product_id?: integrationsProduct_idSource_idSource_product_idCompoundUniqueInput
    AND?: integrationsWhereInput | integrationsWhereInput[]
    OR?: integrationsWhereInput[]
    NOT?: integrationsWhereInput | integrationsWhereInput[]
    product_id?: IntFilter<"integrations"> | number
    source_id?: IntFilter<"integrations"> | number
    source_product_id?: StringFilter<"integrations"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
    integration_sources?: XOR<Integration_sourcesRelationFilter, integration_sourcesWhereInput>
  }, "id" | "product_id_source_id_source_product_id">

  export type integrationsOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    source_id?: SortOrder
    source_product_id?: SortOrder
    _count?: integrationsCountOrderByAggregateInput
    _avg?: integrationsAvgOrderByAggregateInput
    _max?: integrationsMaxOrderByAggregateInput
    _min?: integrationsMinOrderByAggregateInput
    _sum?: integrationsSumOrderByAggregateInput
  }

  export type integrationsScalarWhereWithAggregatesInput = {
    AND?: integrationsScalarWhereWithAggregatesInput | integrationsScalarWhereWithAggregatesInput[]
    OR?: integrationsScalarWhereWithAggregatesInput[]
    NOT?: integrationsScalarWhereWithAggregatesInput | integrationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"integrations"> | number
    product_id?: IntWithAggregatesFilter<"integrations"> | number
    source_id?: IntWithAggregatesFilter<"integrations"> | number
    source_product_id?: StringWithAggregatesFilter<"integrations"> | string
  }

  export type objectsWhereInput = {
    AND?: objectsWhereInput | objectsWhereInput[]
    OR?: objectsWhereInput[]
    NOT?: objectsWhereInput | objectsWhereInput[]
    id?: IntFilter<"objects"> | number
    name?: StringFilter<"objects"> | string
    created_at?: DateTimeFilter<"objects"> | Date | string
    updated_at?: DateTimeFilter<"objects"> | Date | string
    common_db_object_id?: IntFilter<"objects"> | number
    product_types?: Product_typesListRelationFilter
    products?: ProductsListRelationFilter
    r_tags_objects?: R_tags_objectsListRelationFilter
    sections?: SectionsListRelationFilter
  }

  export type objectsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    common_db_object_id?: SortOrder
    product_types?: product_typesOrderByRelationAggregateInput
    products?: productsOrderByRelationAggregateInput
    r_tags_objects?: r_tags_objectsOrderByRelationAggregateInput
    sections?: sectionsOrderByRelationAggregateInput
  }

  export type objectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: objectsWhereInput | objectsWhereInput[]
    OR?: objectsWhereInput[]
    NOT?: objectsWhereInput | objectsWhereInput[]
    name?: StringFilter<"objects"> | string
    created_at?: DateTimeFilter<"objects"> | Date | string
    updated_at?: DateTimeFilter<"objects"> | Date | string
    common_db_object_id?: IntFilter<"objects"> | number
    product_types?: Product_typesListRelationFilter
    products?: ProductsListRelationFilter
    r_tags_objects?: R_tags_objectsListRelationFilter
    sections?: SectionsListRelationFilter
  }, "id">

  export type objectsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    common_db_object_id?: SortOrder
    _count?: objectsCountOrderByAggregateInput
    _avg?: objectsAvgOrderByAggregateInput
    _max?: objectsMaxOrderByAggregateInput
    _min?: objectsMinOrderByAggregateInput
    _sum?: objectsSumOrderByAggregateInput
  }

  export type objectsScalarWhereWithAggregatesInput = {
    AND?: objectsScalarWhereWithAggregatesInput | objectsScalarWhereWithAggregatesInput[]
    OR?: objectsScalarWhereWithAggregatesInput[]
    NOT?: objectsScalarWhereWithAggregatesInput | objectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"objects"> | number
    name?: StringWithAggregatesFilter<"objects"> | string
    created_at?: DateTimeWithAggregatesFilter<"objects"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"objects"> | Date | string
    common_db_object_id?: IntWithAggregatesFilter<"objects"> | number
  }

  export type product_categoriesWhereInput = {
    AND?: product_categoriesWhereInput | product_categoriesWhereInput[]
    OR?: product_categoriesWhereInput[]
    NOT?: product_categoriesWhereInput | product_categoriesWhereInput[]
    id?: IntFilter<"product_categories"> | number
    name?: StringFilter<"product_categories"> | string
    created_at?: DateTimeFilter<"product_categories"> | Date | string
    updated_at?: DateTimeFilter<"product_categories"> | Date | string
    products?: ProductsListRelationFilter
    r_tags_categories?: R_tags_categoriesListRelationFilter
  }

  export type product_categoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    products?: productsOrderByRelationAggregateInput
    r_tags_categories?: r_tags_categoriesOrderByRelationAggregateInput
  }

  export type product_categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: product_categoriesWhereInput | product_categoriesWhereInput[]
    OR?: product_categoriesWhereInput[]
    NOT?: product_categoriesWhereInput | product_categoriesWhereInput[]
    name?: StringFilter<"product_categories"> | string
    created_at?: DateTimeFilter<"product_categories"> | Date | string
    updated_at?: DateTimeFilter<"product_categories"> | Date | string
    products?: ProductsListRelationFilter
    r_tags_categories?: R_tags_categoriesListRelationFilter
  }, "id">

  export type product_categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: product_categoriesCountOrderByAggregateInput
    _avg?: product_categoriesAvgOrderByAggregateInput
    _max?: product_categoriesMaxOrderByAggregateInput
    _min?: product_categoriesMinOrderByAggregateInput
    _sum?: product_categoriesSumOrderByAggregateInput
  }

  export type product_categoriesScalarWhereWithAggregatesInput = {
    AND?: product_categoriesScalarWhereWithAggregatesInput | product_categoriesScalarWhereWithAggregatesInput[]
    OR?: product_categoriesScalarWhereWithAggregatesInput[]
    NOT?: product_categoriesScalarWhereWithAggregatesInput | product_categoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_categories"> | number
    name?: StringWithAggregatesFilter<"product_categories"> | string
    created_at?: DateTimeWithAggregatesFilter<"product_categories"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"product_categories"> | Date | string
  }

  export type product_filesWhereInput = {
    AND?: product_filesWhereInput | product_filesWhereInput[]
    OR?: product_filesWhereInput[]
    NOT?: product_filesWhereInput | product_filesWhereInput[]
    id?: IntFilter<"product_files"> | number
    product_id?: IntFilter<"product_files"> | number
    type?: Enumproduct_files_typeFilter<"product_files"> | $Enums.product_files_type
    path?: StringFilter<"product_files"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type product_filesOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    type?: SortOrder
    path?: SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type product_filesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: product_filesWhereInput | product_filesWhereInput[]
    OR?: product_filesWhereInput[]
    NOT?: product_filesWhereInput | product_filesWhereInput[]
    product_id?: IntFilter<"product_files"> | number
    type?: Enumproduct_files_typeFilter<"product_files"> | $Enums.product_files_type
    path?: StringFilter<"product_files"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id">

  export type product_filesOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    type?: SortOrder
    path?: SortOrder
    _count?: product_filesCountOrderByAggregateInput
    _avg?: product_filesAvgOrderByAggregateInput
    _max?: product_filesMaxOrderByAggregateInput
    _min?: product_filesMinOrderByAggregateInput
    _sum?: product_filesSumOrderByAggregateInput
  }

  export type product_filesScalarWhereWithAggregatesInput = {
    AND?: product_filesScalarWhereWithAggregatesInput | product_filesScalarWhereWithAggregatesInput[]
    OR?: product_filesScalarWhereWithAggregatesInput[]
    NOT?: product_filesScalarWhereWithAggregatesInput | product_filesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_files"> | number
    product_id?: IntWithAggregatesFilter<"product_files"> | number
    type?: Enumproduct_files_typeWithAggregatesFilter<"product_files"> | $Enums.product_files_type
    path?: StringWithAggregatesFilter<"product_files"> | string
  }

  export type product_meter_numbersWhereInput = {
    AND?: product_meter_numbersWhereInput | product_meter_numbersWhereInput[]
    OR?: product_meter_numbersWhereInput[]
    NOT?: product_meter_numbersWhereInput | product_meter_numbersWhereInput[]
    id?: IntFilter<"product_meter_numbers"> | number
    product_id?: IntFilter<"product_meter_numbers"> | number
    electricity?: StringFilter<"product_meter_numbers"> | string
    heating?: StringFilter<"product_meter_numbers"> | string
    hot_water?: StringFilter<"product_meter_numbers"> | string
    cold_water?: StringFilter<"product_meter_numbers"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type product_meter_numbersOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    electricity?: SortOrder
    heating?: SortOrder
    hot_water?: SortOrder
    cold_water?: SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type product_meter_numbersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: number
    AND?: product_meter_numbersWhereInput | product_meter_numbersWhereInput[]
    OR?: product_meter_numbersWhereInput[]
    NOT?: product_meter_numbersWhereInput | product_meter_numbersWhereInput[]
    electricity?: StringFilter<"product_meter_numbers"> | string
    heating?: StringFilter<"product_meter_numbers"> | string
    hot_water?: StringFilter<"product_meter_numbers"> | string
    cold_water?: StringFilter<"product_meter_numbers"> | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id" | "product_id">

  export type product_meter_numbersOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    electricity?: SortOrder
    heating?: SortOrder
    hot_water?: SortOrder
    cold_water?: SortOrder
    _count?: product_meter_numbersCountOrderByAggregateInput
    _avg?: product_meter_numbersAvgOrderByAggregateInput
    _max?: product_meter_numbersMaxOrderByAggregateInput
    _min?: product_meter_numbersMinOrderByAggregateInput
    _sum?: product_meter_numbersSumOrderByAggregateInput
  }

  export type product_meter_numbersScalarWhereWithAggregatesInput = {
    AND?: product_meter_numbersScalarWhereWithAggregatesInput | product_meter_numbersScalarWhereWithAggregatesInput[]
    OR?: product_meter_numbersScalarWhereWithAggregatesInput[]
    NOT?: product_meter_numbersScalarWhereWithAggregatesInput | product_meter_numbersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_meter_numbers"> | number
    product_id?: IntWithAggregatesFilter<"product_meter_numbers"> | number
    electricity?: StringWithAggregatesFilter<"product_meter_numbers"> | string
    heating?: StringWithAggregatesFilter<"product_meter_numbers"> | string
    hot_water?: StringWithAggregatesFilter<"product_meter_numbers"> | string
    cold_water?: StringWithAggregatesFilter<"product_meter_numbers"> | string
  }

  export type product_price_historyWhereInput = {
    AND?: product_price_historyWhereInput | product_price_historyWhereInput[]
    OR?: product_price_historyWhereInput[]
    NOT?: product_price_historyWhereInput | product_price_historyWhereInput[]
    id?: IntFilter<"product_price_history"> | number
    product_id?: IntFilter<"product_price_history"> | number
    price?: DecimalFilter<"product_price_history"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"product_price_history"> | Date | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type product_price_historyOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    products?: productsOrderByWithRelationInput
  }

  export type product_price_historyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: product_price_historyWhereInput | product_price_historyWhereInput[]
    OR?: product_price_historyWhereInput[]
    NOT?: product_price_historyWhereInput | product_price_historyWhereInput[]
    product_id?: IntFilter<"product_price_history"> | number
    price?: DecimalFilter<"product_price_history"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"product_price_history"> | Date | string
    products?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id">

  export type product_price_historyOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    _count?: product_price_historyCountOrderByAggregateInput
    _avg?: product_price_historyAvgOrderByAggregateInput
    _max?: product_price_historyMaxOrderByAggregateInput
    _min?: product_price_historyMinOrderByAggregateInput
    _sum?: product_price_historySumOrderByAggregateInput
  }

  export type product_price_historyScalarWhereWithAggregatesInput = {
    AND?: product_price_historyScalarWhereWithAggregatesInput | product_price_historyScalarWhereWithAggregatesInput[]
    OR?: product_price_historyScalarWhereWithAggregatesInput[]
    NOT?: product_price_historyScalarWhereWithAggregatesInput | product_price_historyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_price_history"> | number
    product_id?: IntWithAggregatesFilter<"product_price_history"> | number
    price?: DecimalWithAggregatesFilter<"product_price_history"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"product_price_history"> | Date | string
  }

  export type product_pricing_rulesWhereInput = {
    AND?: product_pricing_rulesWhereInput | product_pricing_rulesWhereInput[]
    OR?: product_pricing_rulesWhereInput[]
    NOT?: product_pricing_rulesWhereInput | product_pricing_rulesWhereInput[]
    id?: IntFilter<"product_pricing_rules"> | number
    product_type_id?: IntFilter<"product_pricing_rules"> | number
    step_number?: IntFilter<"product_pricing_rules"> | number
    price_per_square_meter?: DecimalFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    planned_days?: IntFilter<"product_pricing_rules"> | number
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }

  export type product_pricing_rulesOrderByWithRelationInput = {
    id?: SortOrder
    product_type_id?: SortOrder
    step_number?: SortOrder
    price_per_square_meter?: SortOrder
    flats_percent?: SortOrder
    planned_days?: SortOrder
    product_types?: product_typesOrderByWithRelationInput
  }

  export type product_pricing_rulesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_type_id_step_number?: product_pricing_rulesProduct_type_idStep_numberCompoundUniqueInput
    AND?: product_pricing_rulesWhereInput | product_pricing_rulesWhereInput[]
    OR?: product_pricing_rulesWhereInput[]
    NOT?: product_pricing_rulesWhereInput | product_pricing_rulesWhereInput[]
    product_type_id?: IntFilter<"product_pricing_rules"> | number
    step_number?: IntFilter<"product_pricing_rules"> | number
    price_per_square_meter?: DecimalFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    planned_days?: IntFilter<"product_pricing_rules"> | number
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
  }, "id" | "product_type_id_step_number">

  export type product_pricing_rulesOrderByWithAggregationInput = {
    id?: SortOrder
    product_type_id?: SortOrder
    step_number?: SortOrder
    price_per_square_meter?: SortOrder
    flats_percent?: SortOrder
    planned_days?: SortOrder
    _count?: product_pricing_rulesCountOrderByAggregateInput
    _avg?: product_pricing_rulesAvgOrderByAggregateInput
    _max?: product_pricing_rulesMaxOrderByAggregateInput
    _min?: product_pricing_rulesMinOrderByAggregateInput
    _sum?: product_pricing_rulesSumOrderByAggregateInput
  }

  export type product_pricing_rulesScalarWhereWithAggregatesInput = {
    AND?: product_pricing_rulesScalarWhereWithAggregatesInput | product_pricing_rulesScalarWhereWithAggregatesInput[]
    OR?: product_pricing_rulesScalarWhereWithAggregatesInput[]
    NOT?: product_pricing_rulesScalarWhereWithAggregatesInput | product_pricing_rulesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_pricing_rules"> | number
    product_type_id?: IntWithAggregatesFilter<"product_pricing_rules"> | number
    step_number?: IntWithAggregatesFilter<"product_pricing_rules"> | number
    price_per_square_meter?: DecimalWithAggregatesFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalWithAggregatesFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    planned_days?: IntWithAggregatesFilter<"product_pricing_rules"> | number
  }

  export type product_typesWhereInput = {
    AND?: product_typesWhereInput | product_typesWhereInput[]
    OR?: product_typesWhereInput[]
    NOT?: product_typesWhereInput | product_typesWhereInput[]
    id?: IntFilter<"product_types"> | number
    name?: StringFilter<"product_types"> | string
    created_at?: DateTimeFilter<"product_types"> | Date | string
    updated_at?: DateTimeFilter<"product_types"> | Date | string
    object_id?: IntFilter<"product_types"> | number
    floor_pricing_rules?: Floor_pricing_rulesListRelationFilter
    product_pricing_rules?: Product_pricing_rulesListRelationFilter
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
    products?: ProductsListRelationFilter
    r_tags_product_types?: R_tags_product_typesListRelationFilter
  }

  export type product_typesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
    floor_pricing_rules?: floor_pricing_rulesOrderByRelationAggregateInput
    product_pricing_rules?: product_pricing_rulesOrderByRelationAggregateInput
    objects?: objectsOrderByWithRelationInput
    products?: productsOrderByRelationAggregateInput
    r_tags_product_types?: r_tags_product_typesOrderByRelationAggregateInput
  }

  export type product_typesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: product_typesWhereInput | product_typesWhereInput[]
    OR?: product_typesWhereInput[]
    NOT?: product_typesWhereInput | product_typesWhereInput[]
    name?: StringFilter<"product_types"> | string
    created_at?: DateTimeFilter<"product_types"> | Date | string
    updated_at?: DateTimeFilter<"product_types"> | Date | string
    object_id?: IntFilter<"product_types"> | number
    floor_pricing_rules?: Floor_pricing_rulesListRelationFilter
    product_pricing_rules?: Product_pricing_rulesListRelationFilter
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
    products?: ProductsListRelationFilter
    r_tags_product_types?: R_tags_product_typesListRelationFilter
  }, "id">

  export type product_typesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
    _count?: product_typesCountOrderByAggregateInput
    _avg?: product_typesAvgOrderByAggregateInput
    _max?: product_typesMaxOrderByAggregateInput
    _min?: product_typesMinOrderByAggregateInput
    _sum?: product_typesSumOrderByAggregateInput
  }

  export type product_typesScalarWhereWithAggregatesInput = {
    AND?: product_typesScalarWhereWithAggregatesInput | product_typesScalarWhereWithAggregatesInput[]
    OR?: product_typesScalarWhereWithAggregatesInput[]
    NOT?: product_typesScalarWhereWithAggregatesInput | product_typesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"product_types"> | number
    name?: StringWithAggregatesFilter<"product_types"> | string
    created_at?: DateTimeWithAggregatesFilter<"product_types"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"product_types"> | Date | string
    object_id?: IntWithAggregatesFilter<"product_types"> | number
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: IntFilter<"products"> | number
    number?: StringFilter<"products"> | string
    area?: DecimalFilter<"products"> | Decimal | DecimalJsLike | number | string
    price?: DecimalFilter<"products"> | Decimal | DecimalJsLike | number | string
    one_gt_id?: StringNullableFilter<"products"> | string | null
    created_at?: DateTimeFilter<"products"> | Date | string
    updated_at?: DateTimeFilter<"products"> | Date | string
    object_id?: IntFilter<"products"> | number
    product_type_id?: IntNullableFilter<"products"> | number | null
    category_id?: IntFilter<"products"> | number
    floor_id?: IntNullableFilter<"products"> | number | null
    integrations?: IntegrationsListRelationFilter
    product_files?: Product_filesListRelationFilter
    product_meter_numbers?: XOR<Product_meter_numbersNullableRelationFilter, product_meter_numbersWhereInput> | null
    product_price_history?: Product_price_historyListRelationFilter
    floors?: XOR<FloorsNullableRelationFilter, floorsWhereInput> | null
    product_categories?: XOR<Product_categoriesRelationFilter, product_categoriesWhereInput>
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
    product_types?: XOR<Product_typesNullableRelationFilter, product_typesWhereInput> | null
    r_product_tags?: R_product_tagsListRelationFilter
    r_tags_products?: R_tags_productsListRelationFilter
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    area?: SortOrder
    price?: SortOrder
    one_gt_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
    product_type_id?: SortOrderInput | SortOrder
    category_id?: SortOrder
    floor_id?: SortOrderInput | SortOrder
    integrations?: integrationsOrderByRelationAggregateInput
    product_files?: product_filesOrderByRelationAggregateInput
    product_meter_numbers?: product_meter_numbersOrderByWithRelationInput
    product_price_history?: product_price_historyOrderByRelationAggregateInput
    floors?: floorsOrderByWithRelationInput
    product_categories?: product_categoriesOrderByWithRelationInput
    objects?: objectsOrderByWithRelationInput
    product_types?: product_typesOrderByWithRelationInput
    r_product_tags?: r_product_tagsOrderByRelationAggregateInput
    r_tags_products?: r_tags_productsOrderByRelationAggregateInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    number?: StringFilter<"products"> | string
    area?: DecimalFilter<"products"> | Decimal | DecimalJsLike | number | string
    price?: DecimalFilter<"products"> | Decimal | DecimalJsLike | number | string
    one_gt_id?: StringNullableFilter<"products"> | string | null
    created_at?: DateTimeFilter<"products"> | Date | string
    updated_at?: DateTimeFilter<"products"> | Date | string
    object_id?: IntFilter<"products"> | number
    product_type_id?: IntNullableFilter<"products"> | number | null
    category_id?: IntFilter<"products"> | number
    floor_id?: IntNullableFilter<"products"> | number | null
    integrations?: IntegrationsListRelationFilter
    product_files?: Product_filesListRelationFilter
    product_meter_numbers?: XOR<Product_meter_numbersNullableRelationFilter, product_meter_numbersWhereInput> | null
    product_price_history?: Product_price_historyListRelationFilter
    floors?: XOR<FloorsNullableRelationFilter, floorsWhereInput> | null
    product_categories?: XOR<Product_categoriesRelationFilter, product_categoriesWhereInput>
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
    product_types?: XOR<Product_typesNullableRelationFilter, product_typesWhereInput> | null
    r_product_tags?: R_product_tagsListRelationFilter
    r_tags_products?: R_tags_productsListRelationFilter
  }, "id">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    area?: SortOrder
    price?: SortOrder
    one_gt_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
    product_type_id?: SortOrderInput | SortOrder
    category_id?: SortOrder
    floor_id?: SortOrderInput | SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"products"> | number
    number?: StringWithAggregatesFilter<"products"> | string
    area?: DecimalWithAggregatesFilter<"products"> | Decimal | DecimalJsLike | number | string
    price?: DecimalWithAggregatesFilter<"products"> | Decimal | DecimalJsLike | number | string
    one_gt_id?: StringNullableWithAggregatesFilter<"products"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"products"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"products"> | Date | string
    object_id?: IntWithAggregatesFilter<"products"> | number
    product_type_id?: IntNullableWithAggregatesFilter<"products"> | number | null
    category_id?: IntWithAggregatesFilter<"products"> | number
    floor_id?: IntNullableWithAggregatesFilter<"products"> | number | null
  }

  export type projectsWhereInput = {
    AND?: projectsWhereInput | projectsWhereInput[]
    OR?: projectsWhereInput[]
    NOT?: projectsWhereInput | projectsWhereInput[]
    id?: IntFilter<"projects"> | number
    name?: StringFilter<"projects"> | string
    r_tags_projects?: R_tags_projectsListRelationFilter
  }

  export type projectsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    r_tags_projects?: r_tags_projectsOrderByRelationAggregateInput
  }

  export type projectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: projectsWhereInput | projectsWhereInput[]
    OR?: projectsWhereInput[]
    NOT?: projectsWhereInput | projectsWhereInput[]
    name?: StringFilter<"projects"> | string
    r_tags_projects?: R_tags_projectsListRelationFilter
  }, "id">

  export type projectsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: projectsCountOrderByAggregateInput
    _avg?: projectsAvgOrderByAggregateInput
    _max?: projectsMaxOrderByAggregateInput
    _min?: projectsMinOrderByAggregateInput
    _sum?: projectsSumOrderByAggregateInput
  }

  export type projectsScalarWhereWithAggregatesInput = {
    AND?: projectsScalarWhereWithAggregatesInput | projectsScalarWhereWithAggregatesInput[]
    OR?: projectsScalarWhereWithAggregatesInput[]
    NOT?: projectsScalarWhereWithAggregatesInput | projectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"projects"> | number
    name?: StringWithAggregatesFilter<"projects"> | string
  }

  export type r_product_tagsWhereInput = {
    AND?: r_product_tagsWhereInput | r_product_tagsWhereInput[]
    OR?: r_product_tagsWhereInput[]
    NOT?: r_product_tagsWhereInput | r_product_tagsWhereInput[]
    id?: IntFilter<"r_product_tags"> | number
    product_id?: IntFilter<"r_product_tags"> | number
    tag_id?: IntFilter<"r_product_tags"> | number
    products?: XOR<ProductsRelationFilter, productsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }

  export type r_product_tagsOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    tag_id?: SortOrder
    products?: productsOrderByWithRelationInput
    tags?: tagsOrderByWithRelationInput
  }

  export type r_product_tagsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: r_product_tagsWhereInput | r_product_tagsWhereInput[]
    OR?: r_product_tagsWhereInput[]
    NOT?: r_product_tagsWhereInput | r_product_tagsWhereInput[]
    product_id?: IntFilter<"r_product_tags"> | number
    tag_id?: IntFilter<"r_product_tags"> | number
    products?: XOR<ProductsRelationFilter, productsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }, "id">

  export type r_product_tagsOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    tag_id?: SortOrder
    _count?: r_product_tagsCountOrderByAggregateInput
    _avg?: r_product_tagsAvgOrderByAggregateInput
    _max?: r_product_tagsMaxOrderByAggregateInput
    _min?: r_product_tagsMinOrderByAggregateInput
    _sum?: r_product_tagsSumOrderByAggregateInput
  }

  export type r_product_tagsScalarWhereWithAggregatesInput = {
    AND?: r_product_tagsScalarWhereWithAggregatesInput | r_product_tagsScalarWhereWithAggregatesInput[]
    OR?: r_product_tagsScalarWhereWithAggregatesInput[]
    NOT?: r_product_tagsScalarWhereWithAggregatesInput | r_product_tagsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"r_product_tags"> | number
    product_id?: IntWithAggregatesFilter<"r_product_tags"> | number
    tag_id?: IntWithAggregatesFilter<"r_product_tags"> | number
  }

  export type r_tags_categoriesWhereInput = {
    AND?: r_tags_categoriesWhereInput | r_tags_categoriesWhereInput[]
    OR?: r_tags_categoriesWhereInput[]
    NOT?: r_tags_categoriesWhereInput | r_tags_categoriesWhereInput[]
    id?: IntFilter<"r_tags_categories"> | number
    tag_id?: IntFilter<"r_tags_categories"> | number
    category_id?: IntFilter<"r_tags_categories"> | number
    product_categories?: XOR<Product_categoriesRelationFilter, product_categoriesWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }

  export type r_tags_categoriesOrderByWithRelationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    category_id?: SortOrder
    product_categories?: product_categoriesOrderByWithRelationInput
    tags?: tagsOrderByWithRelationInput
  }

  export type r_tags_categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: r_tags_categoriesWhereInput | r_tags_categoriesWhereInput[]
    OR?: r_tags_categoriesWhereInput[]
    NOT?: r_tags_categoriesWhereInput | r_tags_categoriesWhereInput[]
    tag_id?: IntFilter<"r_tags_categories"> | number
    category_id?: IntFilter<"r_tags_categories"> | number
    product_categories?: XOR<Product_categoriesRelationFilter, product_categoriesWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }, "id">

  export type r_tags_categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    category_id?: SortOrder
    _count?: r_tags_categoriesCountOrderByAggregateInput
    _avg?: r_tags_categoriesAvgOrderByAggregateInput
    _max?: r_tags_categoriesMaxOrderByAggregateInput
    _min?: r_tags_categoriesMinOrderByAggregateInput
    _sum?: r_tags_categoriesSumOrderByAggregateInput
  }

  export type r_tags_categoriesScalarWhereWithAggregatesInput = {
    AND?: r_tags_categoriesScalarWhereWithAggregatesInput | r_tags_categoriesScalarWhereWithAggregatesInput[]
    OR?: r_tags_categoriesScalarWhereWithAggregatesInput[]
    NOT?: r_tags_categoriesScalarWhereWithAggregatesInput | r_tags_categoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"r_tags_categories"> | number
    tag_id?: IntWithAggregatesFilter<"r_tags_categories"> | number
    category_id?: IntWithAggregatesFilter<"r_tags_categories"> | number
  }

  export type r_tags_objectsWhereInput = {
    AND?: r_tags_objectsWhereInput | r_tags_objectsWhereInput[]
    OR?: r_tags_objectsWhereInput[]
    NOT?: r_tags_objectsWhereInput | r_tags_objectsWhereInput[]
    id?: IntFilter<"r_tags_objects"> | number
    tag_id?: IntFilter<"r_tags_objects"> | number
    object_id?: IntFilter<"r_tags_objects"> | number
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }

  export type r_tags_objectsOrderByWithRelationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    object_id?: SortOrder
    objects?: objectsOrderByWithRelationInput
    tags?: tagsOrderByWithRelationInput
  }

  export type r_tags_objectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: r_tags_objectsWhereInput | r_tags_objectsWhereInput[]
    OR?: r_tags_objectsWhereInput[]
    NOT?: r_tags_objectsWhereInput | r_tags_objectsWhereInput[]
    tag_id?: IntFilter<"r_tags_objects"> | number
    object_id?: IntFilter<"r_tags_objects"> | number
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }, "id">

  export type r_tags_objectsOrderByWithAggregationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    object_id?: SortOrder
    _count?: r_tags_objectsCountOrderByAggregateInput
    _avg?: r_tags_objectsAvgOrderByAggregateInput
    _max?: r_tags_objectsMaxOrderByAggregateInput
    _min?: r_tags_objectsMinOrderByAggregateInput
    _sum?: r_tags_objectsSumOrderByAggregateInput
  }

  export type r_tags_objectsScalarWhereWithAggregatesInput = {
    AND?: r_tags_objectsScalarWhereWithAggregatesInput | r_tags_objectsScalarWhereWithAggregatesInput[]
    OR?: r_tags_objectsScalarWhereWithAggregatesInput[]
    NOT?: r_tags_objectsScalarWhereWithAggregatesInput | r_tags_objectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"r_tags_objects"> | number
    tag_id?: IntWithAggregatesFilter<"r_tags_objects"> | number
    object_id?: IntWithAggregatesFilter<"r_tags_objects"> | number
  }

  export type r_tags_product_typesWhereInput = {
    AND?: r_tags_product_typesWhereInput | r_tags_product_typesWhereInput[]
    OR?: r_tags_product_typesWhereInput[]
    NOT?: r_tags_product_typesWhereInput | r_tags_product_typesWhereInput[]
    id?: IntFilter<"r_tags_product_types"> | number
    tag_id?: IntFilter<"r_tags_product_types"> | number
    product_type_id?: IntFilter<"r_tags_product_types"> | number
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }

  export type r_tags_product_typesOrderByWithRelationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_type_id?: SortOrder
    product_types?: product_typesOrderByWithRelationInput
    tags?: tagsOrderByWithRelationInput
  }

  export type r_tags_product_typesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: r_tags_product_typesWhereInput | r_tags_product_typesWhereInput[]
    OR?: r_tags_product_typesWhereInput[]
    NOT?: r_tags_product_typesWhereInput | r_tags_product_typesWhereInput[]
    tag_id?: IntFilter<"r_tags_product_types"> | number
    product_type_id?: IntFilter<"r_tags_product_types"> | number
    product_types?: XOR<Product_typesRelationFilter, product_typesWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }, "id">

  export type r_tags_product_typesOrderByWithAggregationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_type_id?: SortOrder
    _count?: r_tags_product_typesCountOrderByAggregateInput
    _avg?: r_tags_product_typesAvgOrderByAggregateInput
    _max?: r_tags_product_typesMaxOrderByAggregateInput
    _min?: r_tags_product_typesMinOrderByAggregateInput
    _sum?: r_tags_product_typesSumOrderByAggregateInput
  }

  export type r_tags_product_typesScalarWhereWithAggregatesInput = {
    AND?: r_tags_product_typesScalarWhereWithAggregatesInput | r_tags_product_typesScalarWhereWithAggregatesInput[]
    OR?: r_tags_product_typesScalarWhereWithAggregatesInput[]
    NOT?: r_tags_product_typesScalarWhereWithAggregatesInput | r_tags_product_typesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"r_tags_product_types"> | number
    tag_id?: IntWithAggregatesFilter<"r_tags_product_types"> | number
    product_type_id?: IntWithAggregatesFilter<"r_tags_product_types"> | number
  }

  export type r_tags_productsWhereInput = {
    AND?: r_tags_productsWhereInput | r_tags_productsWhereInput[]
    OR?: r_tags_productsWhereInput[]
    NOT?: r_tags_productsWhereInput | r_tags_productsWhereInput[]
    id?: IntFilter<"r_tags_products"> | number
    tag_id?: IntFilter<"r_tags_products"> | number
    product_id?: IntFilter<"r_tags_products"> | number
    products?: XOR<ProductsRelationFilter, productsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }

  export type r_tags_productsOrderByWithRelationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_id?: SortOrder
    products?: productsOrderByWithRelationInput
    tags?: tagsOrderByWithRelationInput
  }

  export type r_tags_productsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: r_tags_productsWhereInput | r_tags_productsWhereInput[]
    OR?: r_tags_productsWhereInput[]
    NOT?: r_tags_productsWhereInput | r_tags_productsWhereInput[]
    tag_id?: IntFilter<"r_tags_products"> | number
    product_id?: IntFilter<"r_tags_products"> | number
    products?: XOR<ProductsRelationFilter, productsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }, "id">

  export type r_tags_productsOrderByWithAggregationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_id?: SortOrder
    _count?: r_tags_productsCountOrderByAggregateInput
    _avg?: r_tags_productsAvgOrderByAggregateInput
    _max?: r_tags_productsMaxOrderByAggregateInput
    _min?: r_tags_productsMinOrderByAggregateInput
    _sum?: r_tags_productsSumOrderByAggregateInput
  }

  export type r_tags_productsScalarWhereWithAggregatesInput = {
    AND?: r_tags_productsScalarWhereWithAggregatesInput | r_tags_productsScalarWhereWithAggregatesInput[]
    OR?: r_tags_productsScalarWhereWithAggregatesInput[]
    NOT?: r_tags_productsScalarWhereWithAggregatesInput | r_tags_productsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"r_tags_products"> | number
    tag_id?: IntWithAggregatesFilter<"r_tags_products"> | number
    product_id?: IntWithAggregatesFilter<"r_tags_products"> | number
  }

  export type r_tags_projectsWhereInput = {
    AND?: r_tags_projectsWhereInput | r_tags_projectsWhereInput[]
    OR?: r_tags_projectsWhereInput[]
    NOT?: r_tags_projectsWhereInput | r_tags_projectsWhereInput[]
    id?: IntFilter<"r_tags_projects"> | number
    tag_id?: IntFilter<"r_tags_projects"> | number
    project_id?: IntFilter<"r_tags_projects"> | number
    projects?: XOR<ProjectsRelationFilter, projectsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }

  export type r_tags_projectsOrderByWithRelationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    project_id?: SortOrder
    projects?: projectsOrderByWithRelationInput
    tags?: tagsOrderByWithRelationInput
  }

  export type r_tags_projectsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: r_tags_projectsWhereInput | r_tags_projectsWhereInput[]
    OR?: r_tags_projectsWhereInput[]
    NOT?: r_tags_projectsWhereInput | r_tags_projectsWhereInput[]
    tag_id?: IntFilter<"r_tags_projects"> | number
    project_id?: IntFilter<"r_tags_projects"> | number
    projects?: XOR<ProjectsRelationFilter, projectsWhereInput>
    tags?: XOR<TagsRelationFilter, tagsWhereInput>
  }, "id">

  export type r_tags_projectsOrderByWithAggregationInput = {
    id?: SortOrder
    tag_id?: SortOrder
    project_id?: SortOrder
    _count?: r_tags_projectsCountOrderByAggregateInput
    _avg?: r_tags_projectsAvgOrderByAggregateInput
    _max?: r_tags_projectsMaxOrderByAggregateInput
    _min?: r_tags_projectsMinOrderByAggregateInput
    _sum?: r_tags_projectsSumOrderByAggregateInput
  }

  export type r_tags_projectsScalarWhereWithAggregatesInput = {
    AND?: r_tags_projectsScalarWhereWithAggregatesInput | r_tags_projectsScalarWhereWithAggregatesInput[]
    OR?: r_tags_projectsScalarWhereWithAggregatesInput[]
    NOT?: r_tags_projectsScalarWhereWithAggregatesInput | r_tags_projectsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"r_tags_projects"> | number
    tag_id?: IntWithAggregatesFilter<"r_tags_projects"> | number
    project_id?: IntWithAggregatesFilter<"r_tags_projects"> | number
  }

  export type sectionsWhereInput = {
    AND?: sectionsWhereInput | sectionsWhereInput[]
    OR?: sectionsWhereInput[]
    NOT?: sectionsWhereInput | sectionsWhereInput[]
    id?: IntFilter<"sections"> | number
    number?: StringFilter<"sections"> | string
    object_id?: IntFilter<"sections"> | number
    floors?: FloorsListRelationFilter
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
  }

  export type sectionsOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    object_id?: SortOrder
    floors?: floorsOrderByRelationAggregateInput
    objects?: objectsOrderByWithRelationInput
  }

  export type sectionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: sectionsWhereInput | sectionsWhereInput[]
    OR?: sectionsWhereInput[]
    NOT?: sectionsWhereInput | sectionsWhereInput[]
    number?: StringFilter<"sections"> | string
    object_id?: IntFilter<"sections"> | number
    floors?: FloorsListRelationFilter
    objects?: XOR<ObjectsRelationFilter, objectsWhereInput>
  }, "id">

  export type sectionsOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    object_id?: SortOrder
    _count?: sectionsCountOrderByAggregateInput
    _avg?: sectionsAvgOrderByAggregateInput
    _max?: sectionsMaxOrderByAggregateInput
    _min?: sectionsMinOrderByAggregateInput
    _sum?: sectionsSumOrderByAggregateInput
  }

  export type sectionsScalarWhereWithAggregatesInput = {
    AND?: sectionsScalarWhereWithAggregatesInput | sectionsScalarWhereWithAggregatesInput[]
    OR?: sectionsScalarWhereWithAggregatesInput[]
    NOT?: sectionsScalarWhereWithAggregatesInput | sectionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sections"> | number
    number?: StringWithAggregatesFilter<"sections"> | string
    object_id?: IntWithAggregatesFilter<"sections"> | number
  }

  export type tagsWhereInput = {
    AND?: tagsWhereInput | tagsWhereInput[]
    OR?: tagsWhereInput[]
    NOT?: tagsWhereInput | tagsWhereInput[]
    id?: IntFilter<"tags"> | number
    name?: StringFilter<"tags"> | string
    price?: DecimalFilter<"tags"> | Decimal | DecimalJsLike | number | string
    r_product_tags?: R_product_tagsListRelationFilter
    r_tags_categories?: R_tags_categoriesListRelationFilter
    r_tags_objects?: R_tags_objectsListRelationFilter
    r_tags_product_types?: R_tags_product_typesListRelationFilter
    r_tags_products?: R_tags_productsListRelationFilter
    r_tags_projects?: R_tags_projectsListRelationFilter
  }

  export type tagsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    r_product_tags?: r_product_tagsOrderByRelationAggregateInput
    r_tags_categories?: r_tags_categoriesOrderByRelationAggregateInput
    r_tags_objects?: r_tags_objectsOrderByRelationAggregateInput
    r_tags_product_types?: r_tags_product_typesOrderByRelationAggregateInput
    r_tags_products?: r_tags_productsOrderByRelationAggregateInput
    r_tags_projects?: r_tags_projectsOrderByRelationAggregateInput
  }

  export type tagsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: tagsWhereInput | tagsWhereInput[]
    OR?: tagsWhereInput[]
    NOT?: tagsWhereInput | tagsWhereInput[]
    name?: StringFilter<"tags"> | string
    price?: DecimalFilter<"tags"> | Decimal | DecimalJsLike | number | string
    r_product_tags?: R_product_tagsListRelationFilter
    r_tags_categories?: R_tags_categoriesListRelationFilter
    r_tags_objects?: R_tags_objectsListRelationFilter
    r_tags_product_types?: R_tags_product_typesListRelationFilter
    r_tags_products?: R_tags_productsListRelationFilter
    r_tags_projects?: R_tags_projectsListRelationFilter
  }, "id">

  export type tagsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    _count?: tagsCountOrderByAggregateInput
    _avg?: tagsAvgOrderByAggregateInput
    _max?: tagsMaxOrderByAggregateInput
    _min?: tagsMinOrderByAggregateInput
    _sum?: tagsSumOrderByAggregateInput
  }

  export type tagsScalarWhereWithAggregatesInput = {
    AND?: tagsScalarWhereWithAggregatesInput | tagsScalarWhereWithAggregatesInput[]
    OR?: tagsScalarWhereWithAggregatesInput[]
    NOT?: tagsScalarWhereWithAggregatesInput | tagsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tags"> | number
    name?: StringWithAggregatesFilter<"tags"> | string
    price?: DecimalWithAggregatesFilter<"tags"> | Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesCreateInput = {
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
    floors: floorsCreateNestedOneWithoutFloor_pricing_rulesInput
    product_types: product_typesCreateNestedOneWithoutFloor_pricing_rulesInput
  }

  export type floor_pricing_rulesUncheckedCreateInput = {
    id?: number
    floor_id: number
    product_type_id: number
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesUpdateInput = {
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    floors?: floorsUpdateOneRequiredWithoutFloor_pricing_rulesNestedInput
    product_types?: product_typesUpdateOneRequiredWithoutFloor_pricing_rulesNestedInput
  }

  export type floor_pricing_rulesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    floor_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesCreateManyInput = {
    id?: number
    floor_id: number
    product_type_id: number
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesUpdateManyMutationInput = {
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    floor_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type floorsCreateInput = {
    number: string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutFloorsInput
    sections: sectionsCreateNestedOneWithoutFloorsInput
    products?: productsCreateNestedManyWithoutFloorsInput
  }

  export type floorsUncheckedCreateInput = {
    id?: number
    number: string
    section_id: number
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutFloorsInput
    products?: productsUncheckedCreateNestedManyWithoutFloorsInput
  }

  export type floorsUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutFloorsNestedInput
    sections?: sectionsUpdateOneRequiredWithoutFloorsNestedInput
    products?: productsUpdateManyWithoutFloorsNestedInput
  }

  export type floorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    section_id?: IntFieldUpdateOperationsInput | number
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutFloorsNestedInput
    products?: productsUncheckedUpdateManyWithoutFloorsNestedInput
  }

  export type floorsCreateManyInput = {
    id?: number
    number: string
    section_id: number
  }

  export type floorsUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
  }

  export type floorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    section_id?: IntFieldUpdateOperationsInput | number
  }

  export type integration_sourcesCreateInput = {
    name: string
    integrations?: integrationsCreateNestedManyWithoutIntegration_sourcesInput
  }

  export type integration_sourcesUncheckedCreateInput = {
    id?: number
    name: string
    integrations?: integrationsUncheckedCreateNestedManyWithoutIntegration_sourcesInput
  }

  export type integration_sourcesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    integrations?: integrationsUpdateManyWithoutIntegration_sourcesNestedInput
  }

  export type integration_sourcesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    integrations?: integrationsUncheckedUpdateManyWithoutIntegration_sourcesNestedInput
  }

  export type integration_sourcesCreateManyInput = {
    id?: number
    name: string
  }

  export type integration_sourcesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type integration_sourcesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type integrationsCreateInput = {
    source_product_id: string
    products: productsCreateNestedOneWithoutIntegrationsInput
    integration_sources: integration_sourcesCreateNestedOneWithoutIntegrationsInput
  }

  export type integrationsUncheckedCreateInput = {
    id?: number
    product_id: number
    source_id: number
    source_product_id: string
  }

  export type integrationsUpdateInput = {
    source_product_id?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateOneRequiredWithoutIntegrationsNestedInput
    integration_sources?: integration_sourcesUpdateOneRequiredWithoutIntegrationsNestedInput
  }

  export type integrationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
    source_product_id?: StringFieldUpdateOperationsInput | string
  }

  export type integrationsCreateManyInput = {
    id?: number
    product_id: number
    source_id: number
    source_product_id: string
  }

  export type integrationsUpdateManyMutationInput = {
    source_product_id?: StringFieldUpdateOperationsInput | string
  }

  export type integrationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
    source_product_id?: StringFieldUpdateOperationsInput | string
  }

  export type objectsCreateInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesCreateNestedManyWithoutObjectsInput
    products?: productsCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutObjectsInput
    sections?: sectionsCreateNestedManyWithoutObjectsInput
  }

  export type objectsUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesUncheckedCreateNestedManyWithoutObjectsInput
    products?: productsUncheckedCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutObjectsInput
    sections?: sectionsUncheckedCreateNestedManyWithoutObjectsInput
  }

  export type objectsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUpdateManyWithoutObjectsNestedInput
    products?: productsUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUpdateManyWithoutObjectsNestedInput
  }

  export type objectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUncheckedUpdateManyWithoutObjectsNestedInput
    products?: productsUncheckedUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUncheckedUpdateManyWithoutObjectsNestedInput
  }

  export type objectsCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
  }

  export type objectsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
  }

  export type objectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
  }

  export type product_categoriesCreateInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    products?: productsCreateNestedManyWithoutProduct_categoriesInput
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutProduct_categoriesInput
  }

  export type product_categoriesUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    products?: productsUncheckedCreateNestedManyWithoutProduct_categoriesInput
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutProduct_categoriesInput
  }

  export type product_categoriesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUpdateManyWithoutProduct_categoriesNestedInput
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutProduct_categoriesNestedInput
  }

  export type product_categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutProduct_categoriesNestedInput
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutProduct_categoriesNestedInput
  }

  export type product_categoriesCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
  }

  export type product_categoriesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_filesCreateInput = {
    type: $Enums.product_files_type
    path: string
    products: productsCreateNestedOneWithoutProduct_filesInput
  }

  export type product_filesUncheckedCreateInput = {
    id?: number
    product_id: number
    type: $Enums.product_files_type
    path: string
  }

  export type product_filesUpdateInput = {
    type?: Enumproduct_files_typeFieldUpdateOperationsInput | $Enums.product_files_type
    path?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateOneRequiredWithoutProduct_filesNestedInput
  }

  export type product_filesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    type?: Enumproduct_files_typeFieldUpdateOperationsInput | $Enums.product_files_type
    path?: StringFieldUpdateOperationsInput | string
  }

  export type product_filesCreateManyInput = {
    id?: number
    product_id: number
    type: $Enums.product_files_type
    path: string
  }

  export type product_filesUpdateManyMutationInput = {
    type?: Enumproduct_files_typeFieldUpdateOperationsInput | $Enums.product_files_type
    path?: StringFieldUpdateOperationsInput | string
  }

  export type product_filesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    type?: Enumproduct_files_typeFieldUpdateOperationsInput | $Enums.product_files_type
    path?: StringFieldUpdateOperationsInput | string
  }

  export type product_meter_numbersCreateInput = {
    electricity: string
    heating: string
    hot_water: string
    cold_water: string
    products: productsCreateNestedOneWithoutProduct_meter_numbersInput
  }

  export type product_meter_numbersUncheckedCreateInput = {
    id?: number
    product_id: number
    electricity: string
    heating: string
    hot_water: string
    cold_water: string
  }

  export type product_meter_numbersUpdateInput = {
    electricity?: StringFieldUpdateOperationsInput | string
    heating?: StringFieldUpdateOperationsInput | string
    hot_water?: StringFieldUpdateOperationsInput | string
    cold_water?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateOneRequiredWithoutProduct_meter_numbersNestedInput
  }

  export type product_meter_numbersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    electricity?: StringFieldUpdateOperationsInput | string
    heating?: StringFieldUpdateOperationsInput | string
    hot_water?: StringFieldUpdateOperationsInput | string
    cold_water?: StringFieldUpdateOperationsInput | string
  }

  export type product_meter_numbersCreateManyInput = {
    id?: number
    product_id: number
    electricity: string
    heating: string
    hot_water: string
    cold_water: string
  }

  export type product_meter_numbersUpdateManyMutationInput = {
    electricity?: StringFieldUpdateOperationsInput | string
    heating?: StringFieldUpdateOperationsInput | string
    hot_water?: StringFieldUpdateOperationsInput | string
    cold_water?: StringFieldUpdateOperationsInput | string
  }

  export type product_meter_numbersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    electricity?: StringFieldUpdateOperationsInput | string
    heating?: StringFieldUpdateOperationsInput | string
    hot_water?: StringFieldUpdateOperationsInput | string
    cold_water?: StringFieldUpdateOperationsInput | string
  }

  export type product_price_historyCreateInput = {
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    products: productsCreateNestedOneWithoutProduct_price_historyInput
  }

  export type product_price_historyUncheckedCreateInput = {
    id?: number
    product_id: number
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
  }

  export type product_price_historyUpdateInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUpdateOneRequiredWithoutProduct_price_historyNestedInput
  }

  export type product_price_historyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_price_historyCreateManyInput = {
    id?: number
    product_id: number
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
  }

  export type product_price_historyUpdateManyMutationInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_price_historyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_pricing_rulesCreateInput = {
    step_number: number
    price_per_square_meter: Decimal | DecimalJsLike | number | string
    flats_percent: Decimal | DecimalJsLike | number | string
    planned_days: number
    product_types: product_typesCreateNestedOneWithoutProduct_pricing_rulesInput
  }

  export type product_pricing_rulesUncheckedCreateInput = {
    id?: number
    product_type_id: number
    step_number: number
    price_per_square_meter: Decimal | DecimalJsLike | number | string
    flats_percent: Decimal | DecimalJsLike | number | string
    planned_days: number
  }

  export type product_pricing_rulesUpdateInput = {
    step_number?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planned_days?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUpdateOneRequiredWithoutProduct_pricing_rulesNestedInput
  }

  export type product_pricing_rulesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
    step_number?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planned_days?: IntFieldUpdateOperationsInput | number
  }

  export type product_pricing_rulesCreateManyInput = {
    id?: number
    product_type_id: number
    step_number: number
    price_per_square_meter: Decimal | DecimalJsLike | number | string
    flats_percent: Decimal | DecimalJsLike | number | string
    planned_days: number
  }

  export type product_pricing_rulesUpdateManyMutationInput = {
    step_number?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planned_days?: IntFieldUpdateOperationsInput | number
  }

  export type product_pricing_rulesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
    step_number?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planned_days?: IntFieldUpdateOperationsInput | number
  }

  export type product_typesCreateInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    objects: objectsCreateNestedOneWithoutProduct_typesInput
    products?: productsCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    products?: productsUncheckedCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    objects?: objectsUpdateOneRequiredWithoutProduct_typesNestedInput
    products?: productsUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    products?: productsUncheckedUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
  }

  export type product_typesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_typesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
  }

  export type productsCreateInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsCreateManyInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
  }

  export type productsUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type projectsCreateInput = {
    name: string
    r_tags_projects?: r_tags_projectsCreateNestedManyWithoutProjectsInput
  }

  export type projectsUncheckedCreateInput = {
    id?: number
    name: string
    r_tags_projects?: r_tags_projectsUncheckedCreateNestedManyWithoutProjectsInput
  }

  export type projectsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    r_tags_projects?: r_tags_projectsUpdateManyWithoutProjectsNestedInput
  }

  export type projectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    r_tags_projects?: r_tags_projectsUncheckedUpdateManyWithoutProjectsNestedInput
  }

  export type projectsCreateManyInput = {
    id?: number
    name: string
  }

  export type projectsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type projectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type r_product_tagsCreateInput = {
    products: productsCreateNestedOneWithoutR_product_tagsInput
    tags: tagsCreateNestedOneWithoutR_product_tagsInput
  }

  export type r_product_tagsUncheckedCreateInput = {
    id?: number
    product_id: number
    tag_id: number
  }

  export type r_product_tagsUpdateInput = {
    products?: productsUpdateOneRequiredWithoutR_product_tagsNestedInput
    tags?: tagsUpdateOneRequiredWithoutR_product_tagsNestedInput
  }

  export type r_product_tagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_product_tagsCreateManyInput = {
    id?: number
    product_id: number
    tag_id: number
  }

  export type r_product_tagsUpdateManyMutationInput = {

  }

  export type r_product_tagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_categoriesCreateInput = {
    product_categories: product_categoriesCreateNestedOneWithoutR_tags_categoriesInput
    tags: tagsCreateNestedOneWithoutR_tags_categoriesInput
  }

  export type r_tags_categoriesUncheckedCreateInput = {
    id?: number
    tag_id: number
    category_id: number
  }

  export type r_tags_categoriesUpdateInput = {
    product_categories?: product_categoriesUpdateOneRequiredWithoutR_tags_categoriesNestedInput
    tags?: tagsUpdateOneRequiredWithoutR_tags_categoriesNestedInput
  }

  export type r_tags_categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_categoriesCreateManyInput = {
    id?: number
    tag_id: number
    category_id: number
  }

  export type r_tags_categoriesUpdateManyMutationInput = {

  }

  export type r_tags_categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_objectsCreateInput = {
    objects: objectsCreateNestedOneWithoutR_tags_objectsInput
    tags: tagsCreateNestedOneWithoutR_tags_objectsInput
  }

  export type r_tags_objectsUncheckedCreateInput = {
    id?: number
    tag_id: number
    object_id: number
  }

  export type r_tags_objectsUpdateInput = {
    objects?: objectsUpdateOneRequiredWithoutR_tags_objectsNestedInput
    tags?: tagsUpdateOneRequiredWithoutR_tags_objectsNestedInput
  }

  export type r_tags_objectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    object_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_objectsCreateManyInput = {
    id?: number
    tag_id: number
    object_id: number
  }

  export type r_tags_objectsUpdateManyMutationInput = {

  }

  export type r_tags_objectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    object_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_product_typesCreateInput = {
    product_types: product_typesCreateNestedOneWithoutR_tags_product_typesInput
    tags: tagsCreateNestedOneWithoutR_tags_product_typesInput
  }

  export type r_tags_product_typesUncheckedCreateInput = {
    id?: number
    tag_id: number
    product_type_id: number
  }

  export type r_tags_product_typesUpdateInput = {
    product_types?: product_typesUpdateOneRequiredWithoutR_tags_product_typesNestedInput
    tags?: tagsUpdateOneRequiredWithoutR_tags_product_typesNestedInput
  }

  export type r_tags_product_typesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_product_typesCreateManyInput = {
    id?: number
    tag_id: number
    product_type_id: number
  }

  export type r_tags_product_typesUpdateManyMutationInput = {

  }

  export type r_tags_product_typesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_productsCreateInput = {
    products: productsCreateNestedOneWithoutR_tags_productsInput
    tags: tagsCreateNestedOneWithoutR_tags_productsInput
  }

  export type r_tags_productsUncheckedCreateInput = {
    id?: number
    tag_id: number
    product_id: number
  }

  export type r_tags_productsUpdateInput = {
    products?: productsUpdateOneRequiredWithoutR_tags_productsNestedInput
    tags?: tagsUpdateOneRequiredWithoutR_tags_productsNestedInput
  }

  export type r_tags_productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_productsCreateManyInput = {
    id?: number
    tag_id: number
    product_id: number
  }

  export type r_tags_productsUpdateManyMutationInput = {

  }

  export type r_tags_productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_projectsCreateInput = {
    projects: projectsCreateNestedOneWithoutR_tags_projectsInput
    tags: tagsCreateNestedOneWithoutR_tags_projectsInput
  }

  export type r_tags_projectsUncheckedCreateInput = {
    id?: number
    tag_id: number
    project_id: number
  }

  export type r_tags_projectsUpdateInput = {
    projects?: projectsUpdateOneRequiredWithoutR_tags_projectsNestedInput
    tags?: tagsUpdateOneRequiredWithoutR_tags_projectsNestedInput
  }

  export type r_tags_projectsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_projectsCreateManyInput = {
    id?: number
    tag_id: number
    project_id: number
  }

  export type r_tags_projectsUpdateManyMutationInput = {

  }

  export type r_tags_projectsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
  }

  export type sectionsCreateInput = {
    number: string
    floors?: floorsCreateNestedManyWithoutSectionsInput
    objects: objectsCreateNestedOneWithoutSectionsInput
  }

  export type sectionsUncheckedCreateInput = {
    id?: number
    number: string
    object_id: number
    floors?: floorsUncheckedCreateNestedManyWithoutSectionsInput
  }

  export type sectionsUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    floors?: floorsUpdateManyWithoutSectionsNestedInput
    objects?: objectsUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type sectionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    object_id?: IntFieldUpdateOperationsInput | number
    floors?: floorsUncheckedUpdateManyWithoutSectionsNestedInput
  }

  export type sectionsCreateManyInput = {
    id?: number
    number: string
    object_id: number
  }

  export type sectionsUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
  }

  export type sectionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    object_id?: IntFieldUpdateOperationsInput | number
  }

  export type tagsCreateInput = {
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsCreateNestedManyWithoutTagsInput
  }

  export type tagsUncheckedCreateInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type tagsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUpdateManyWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type tagsCreateManyInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
  }

  export type tagsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type tagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type FloorsRelationFilter = {
    is?: floorsWhereInput
    isNot?: floorsWhereInput
  }

  export type Product_typesRelationFilter = {
    is?: product_typesWhereInput
    isNot?: product_typesWhereInput
  }

  export type floor_pricing_rulesProduct_type_idFloor_idCompoundUniqueInput = {
    product_type_id: number
    floor_id: number
  }

  export type floor_pricing_rulesCountOrderByAggregateInput = {
    id?: SortOrder
    floor_id?: SortOrder
    product_type_id?: SortOrder
    price_per_square_meter?: SortOrder
  }

  export type floor_pricing_rulesAvgOrderByAggregateInput = {
    id?: SortOrder
    floor_id?: SortOrder
    product_type_id?: SortOrder
    price_per_square_meter?: SortOrder
  }

  export type floor_pricing_rulesMaxOrderByAggregateInput = {
    id?: SortOrder
    floor_id?: SortOrder
    product_type_id?: SortOrder
    price_per_square_meter?: SortOrder
  }

  export type floor_pricing_rulesMinOrderByAggregateInput = {
    id?: SortOrder
    floor_id?: SortOrder
    product_type_id?: SortOrder
    price_per_square_meter?: SortOrder
  }

  export type floor_pricing_rulesSumOrderByAggregateInput = {
    id?: SortOrder
    floor_id?: SortOrder
    product_type_id?: SortOrder
    price_per_square_meter?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Floor_pricing_rulesListRelationFilter = {
    every?: floor_pricing_rulesWhereInput
    some?: floor_pricing_rulesWhereInput
    none?: floor_pricing_rulesWhereInput
  }

  export type SectionsRelationFilter = {
    is?: sectionsWhereInput
    isNot?: sectionsWhereInput
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type floor_pricing_rulesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type floorsCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    section_id?: SortOrder
  }

  export type floorsAvgOrderByAggregateInput = {
    id?: SortOrder
    section_id?: SortOrder
  }

  export type floorsMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    section_id?: SortOrder
  }

  export type floorsMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    section_id?: SortOrder
  }

  export type floorsSumOrderByAggregateInput = {
    id?: SortOrder
    section_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntegrationsListRelationFilter = {
    every?: integrationsWhereInput
    some?: integrationsWhereInput
    none?: integrationsWhereInput
  }

  export type integrationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type integration_sourcesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type integration_sourcesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type integration_sourcesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type integration_sourcesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type integration_sourcesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type Integration_sourcesRelationFilter = {
    is?: integration_sourcesWhereInput
    isNot?: integration_sourcesWhereInput
  }

  export type integrationsProduct_idSource_idSource_product_idCompoundUniqueInput = {
    product_id: number
    source_id: number
    source_product_id: string
  }

  export type integrationsCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    source_id?: SortOrder
    source_product_id?: SortOrder
  }

  export type integrationsAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    source_id?: SortOrder
  }

  export type integrationsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    source_id?: SortOrder
    source_product_id?: SortOrder
  }

  export type integrationsMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    source_id?: SortOrder
    source_product_id?: SortOrder
  }

  export type integrationsSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    source_id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Product_typesListRelationFilter = {
    every?: product_typesWhereInput
    some?: product_typesWhereInput
    none?: product_typesWhereInput
  }

  export type R_tags_objectsListRelationFilter = {
    every?: r_tags_objectsWhereInput
    some?: r_tags_objectsWhereInput
    none?: r_tags_objectsWhereInput
  }

  export type SectionsListRelationFilter = {
    every?: sectionsWhereInput
    some?: sectionsWhereInput
    none?: sectionsWhereInput
  }

  export type product_typesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type r_tags_objectsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sectionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type objectsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    common_db_object_id?: SortOrder
  }

  export type objectsAvgOrderByAggregateInput = {
    id?: SortOrder
    common_db_object_id?: SortOrder
  }

  export type objectsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    common_db_object_id?: SortOrder
  }

  export type objectsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    common_db_object_id?: SortOrder
  }

  export type objectsSumOrderByAggregateInput = {
    id?: SortOrder
    common_db_object_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type R_tags_categoriesListRelationFilter = {
    every?: r_tags_categoriesWhereInput
    some?: r_tags_categoriesWhereInput
    none?: r_tags_categoriesWhereInput
  }

  export type r_tags_categoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type product_categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type product_categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type product_categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type product_categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumproduct_files_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.product_files_type | Enumproduct_files_typeFieldRefInput<$PrismaModel>
    in?: $Enums.product_files_type[]
    notIn?: $Enums.product_files_type[]
    not?: NestedEnumproduct_files_typeFilter<$PrismaModel> | $Enums.product_files_type
  }

  export type product_filesCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    type?: SortOrder
    path?: SortOrder
  }

  export type product_filesAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type product_filesMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    type?: SortOrder
    path?: SortOrder
  }

  export type product_filesMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    type?: SortOrder
    path?: SortOrder
  }

  export type product_filesSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type Enumproduct_files_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.product_files_type | Enumproduct_files_typeFieldRefInput<$PrismaModel>
    in?: $Enums.product_files_type[]
    notIn?: $Enums.product_files_type[]
    not?: NestedEnumproduct_files_typeWithAggregatesFilter<$PrismaModel> | $Enums.product_files_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumproduct_files_typeFilter<$PrismaModel>
    _max?: NestedEnumproduct_files_typeFilter<$PrismaModel>
  }

  export type product_meter_numbersCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    electricity?: SortOrder
    heating?: SortOrder
    hot_water?: SortOrder
    cold_water?: SortOrder
  }

  export type product_meter_numbersAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type product_meter_numbersMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    electricity?: SortOrder
    heating?: SortOrder
    hot_water?: SortOrder
    cold_water?: SortOrder
  }

  export type product_meter_numbersMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    electricity?: SortOrder
    heating?: SortOrder
    hot_water?: SortOrder
    cold_water?: SortOrder
  }

  export type product_meter_numbersSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type product_price_historyCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
  }

  export type product_price_historyAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    price?: SortOrder
  }

  export type product_price_historyMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
  }

  export type product_price_historyMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
  }

  export type product_price_historySumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    price?: SortOrder
  }

  export type product_pricing_rulesProduct_type_idStep_numberCompoundUniqueInput = {
    product_type_id: number
    step_number: number
  }

  export type product_pricing_rulesCountOrderByAggregateInput = {
    id?: SortOrder
    product_type_id?: SortOrder
    step_number?: SortOrder
    price_per_square_meter?: SortOrder
    flats_percent?: SortOrder
    planned_days?: SortOrder
  }

  export type product_pricing_rulesAvgOrderByAggregateInput = {
    id?: SortOrder
    product_type_id?: SortOrder
    step_number?: SortOrder
    price_per_square_meter?: SortOrder
    flats_percent?: SortOrder
    planned_days?: SortOrder
  }

  export type product_pricing_rulesMaxOrderByAggregateInput = {
    id?: SortOrder
    product_type_id?: SortOrder
    step_number?: SortOrder
    price_per_square_meter?: SortOrder
    flats_percent?: SortOrder
    planned_days?: SortOrder
  }

  export type product_pricing_rulesMinOrderByAggregateInput = {
    id?: SortOrder
    product_type_id?: SortOrder
    step_number?: SortOrder
    price_per_square_meter?: SortOrder
    flats_percent?: SortOrder
    planned_days?: SortOrder
  }

  export type product_pricing_rulesSumOrderByAggregateInput = {
    id?: SortOrder
    product_type_id?: SortOrder
    step_number?: SortOrder
    price_per_square_meter?: SortOrder
    flats_percent?: SortOrder
    planned_days?: SortOrder
  }

  export type Product_pricing_rulesListRelationFilter = {
    every?: product_pricing_rulesWhereInput
    some?: product_pricing_rulesWhereInput
    none?: product_pricing_rulesWhereInput
  }

  export type ObjectsRelationFilter = {
    is?: objectsWhereInput
    isNot?: objectsWhereInput
  }

  export type R_tags_product_typesListRelationFilter = {
    every?: r_tags_product_typesWhereInput
    some?: r_tags_product_typesWhereInput
    none?: r_tags_product_typesWhereInput
  }

  export type product_pricing_rulesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type r_tags_product_typesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_typesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
  }

  export type product_typesAvgOrderByAggregateInput = {
    id?: SortOrder
    object_id?: SortOrder
  }

  export type product_typesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
  }

  export type product_typesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
  }

  export type product_typesSumOrderByAggregateInput = {
    id?: SortOrder
    object_id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type Product_filesListRelationFilter = {
    every?: product_filesWhereInput
    some?: product_filesWhereInput
    none?: product_filesWhereInput
  }

  export type Product_meter_numbersNullableRelationFilter = {
    is?: product_meter_numbersWhereInput | null
    isNot?: product_meter_numbersWhereInput | null
  }

  export type Product_price_historyListRelationFilter = {
    every?: product_price_historyWhereInput
    some?: product_price_historyWhereInput
    none?: product_price_historyWhereInput
  }

  export type FloorsNullableRelationFilter = {
    is?: floorsWhereInput | null
    isNot?: floorsWhereInput | null
  }

  export type Product_categoriesRelationFilter = {
    is?: product_categoriesWhereInput
    isNot?: product_categoriesWhereInput
  }

  export type Product_typesNullableRelationFilter = {
    is?: product_typesWhereInput | null
    isNot?: product_typesWhereInput | null
  }

  export type R_product_tagsListRelationFilter = {
    every?: r_product_tagsWhereInput
    some?: r_product_tagsWhereInput
    none?: r_product_tagsWhereInput
  }

  export type R_tags_productsListRelationFilter = {
    every?: r_tags_productsWhereInput
    some?: r_tags_productsWhereInput
    none?: r_tags_productsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type product_filesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type product_price_historyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type r_product_tagsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type r_tags_productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    area?: SortOrder
    price?: SortOrder
    one_gt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
    product_type_id?: SortOrder
    category_id?: SortOrder
    floor_id?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
    price?: SortOrder
    object_id?: SortOrder
    product_type_id?: SortOrder
    category_id?: SortOrder
    floor_id?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    area?: SortOrder
    price?: SortOrder
    one_gt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
    product_type_id?: SortOrder
    category_id?: SortOrder
    floor_id?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    area?: SortOrder
    price?: SortOrder
    one_gt_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    object_id?: SortOrder
    product_type_id?: SortOrder
    category_id?: SortOrder
    floor_id?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
    price?: SortOrder
    object_id?: SortOrder
    product_type_id?: SortOrder
    category_id?: SortOrder
    floor_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type R_tags_projectsListRelationFilter = {
    every?: r_tags_projectsWhereInput
    some?: r_tags_projectsWhereInput
    none?: r_tags_projectsWhereInput
  }

  export type r_tags_projectsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type projectsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type projectsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type projectsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type projectsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type projectsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagsRelationFilter = {
    is?: tagsWhereInput
    isNot?: tagsWhereInput
  }

  export type r_product_tagsCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    tag_id?: SortOrder
  }

  export type r_product_tagsAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    tag_id?: SortOrder
  }

  export type r_product_tagsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    tag_id?: SortOrder
  }

  export type r_product_tagsMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    tag_id?: SortOrder
  }

  export type r_product_tagsSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    tag_id?: SortOrder
  }

  export type r_tags_categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    category_id?: SortOrder
  }

  export type r_tags_categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    category_id?: SortOrder
  }

  export type r_tags_categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    category_id?: SortOrder
  }

  export type r_tags_categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    category_id?: SortOrder
  }

  export type r_tags_categoriesSumOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    category_id?: SortOrder
  }

  export type r_tags_objectsCountOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    object_id?: SortOrder
  }

  export type r_tags_objectsAvgOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    object_id?: SortOrder
  }

  export type r_tags_objectsMaxOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    object_id?: SortOrder
  }

  export type r_tags_objectsMinOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    object_id?: SortOrder
  }

  export type r_tags_objectsSumOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    object_id?: SortOrder
  }

  export type r_tags_product_typesCountOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type r_tags_product_typesAvgOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type r_tags_product_typesMaxOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type r_tags_product_typesMinOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type r_tags_product_typesSumOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_type_id?: SortOrder
  }

  export type r_tags_productsCountOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_id?: SortOrder
  }

  export type r_tags_productsAvgOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_id?: SortOrder
  }

  export type r_tags_productsMaxOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_id?: SortOrder
  }

  export type r_tags_productsMinOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_id?: SortOrder
  }

  export type r_tags_productsSumOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    product_id?: SortOrder
  }

  export type ProjectsRelationFilter = {
    is?: projectsWhereInput
    isNot?: projectsWhereInput
  }

  export type r_tags_projectsCountOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    project_id?: SortOrder
  }

  export type r_tags_projectsAvgOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    project_id?: SortOrder
  }

  export type r_tags_projectsMaxOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    project_id?: SortOrder
  }

  export type r_tags_projectsMinOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    project_id?: SortOrder
  }

  export type r_tags_projectsSumOrderByAggregateInput = {
    id?: SortOrder
    tag_id?: SortOrder
    project_id?: SortOrder
  }

  export type FloorsListRelationFilter = {
    every?: floorsWhereInput
    some?: floorsWhereInput
    none?: floorsWhereInput
  }

  export type floorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sectionsCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    object_id?: SortOrder
  }

  export type sectionsAvgOrderByAggregateInput = {
    id?: SortOrder
    object_id?: SortOrder
  }

  export type sectionsMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    object_id?: SortOrder
  }

  export type sectionsMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    object_id?: SortOrder
  }

  export type sectionsSumOrderByAggregateInput = {
    id?: SortOrder
    object_id?: SortOrder
  }

  export type tagsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type tagsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type tagsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type tagsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
  }

  export type tagsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type floorsCreateNestedOneWithoutFloor_pricing_rulesInput = {
    create?: XOR<floorsCreateWithoutFloor_pricing_rulesInput, floorsUncheckedCreateWithoutFloor_pricing_rulesInput>
    connectOrCreate?: floorsCreateOrConnectWithoutFloor_pricing_rulesInput
    connect?: floorsWhereUniqueInput
  }

  export type product_typesCreateNestedOneWithoutFloor_pricing_rulesInput = {
    create?: XOR<product_typesCreateWithoutFloor_pricing_rulesInput, product_typesUncheckedCreateWithoutFloor_pricing_rulesInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutFloor_pricing_rulesInput
    connect?: product_typesWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type floorsUpdateOneRequiredWithoutFloor_pricing_rulesNestedInput = {
    create?: XOR<floorsCreateWithoutFloor_pricing_rulesInput, floorsUncheckedCreateWithoutFloor_pricing_rulesInput>
    connectOrCreate?: floorsCreateOrConnectWithoutFloor_pricing_rulesInput
    upsert?: floorsUpsertWithoutFloor_pricing_rulesInput
    connect?: floorsWhereUniqueInput
    update?: XOR<XOR<floorsUpdateToOneWithWhereWithoutFloor_pricing_rulesInput, floorsUpdateWithoutFloor_pricing_rulesInput>, floorsUncheckedUpdateWithoutFloor_pricing_rulesInput>
  }

  export type product_typesUpdateOneRequiredWithoutFloor_pricing_rulesNestedInput = {
    create?: XOR<product_typesCreateWithoutFloor_pricing_rulesInput, product_typesUncheckedCreateWithoutFloor_pricing_rulesInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutFloor_pricing_rulesInput
    upsert?: product_typesUpsertWithoutFloor_pricing_rulesInput
    connect?: product_typesWhereUniqueInput
    update?: XOR<XOR<product_typesUpdateToOneWithWhereWithoutFloor_pricing_rulesInput, product_typesUpdateWithoutFloor_pricing_rulesInput>, product_typesUncheckedUpdateWithoutFloor_pricing_rulesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type floor_pricing_rulesCreateNestedManyWithoutFloorsInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutFloorsInput, floor_pricing_rulesUncheckedCreateWithoutFloorsInput> | floor_pricing_rulesCreateWithoutFloorsInput[] | floor_pricing_rulesUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutFloorsInput | floor_pricing_rulesCreateOrConnectWithoutFloorsInput[]
    createMany?: floor_pricing_rulesCreateManyFloorsInputEnvelope
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
  }

  export type sectionsCreateNestedOneWithoutFloorsInput = {
    create?: XOR<sectionsCreateWithoutFloorsInput, sectionsUncheckedCreateWithoutFloorsInput>
    connectOrCreate?: sectionsCreateOrConnectWithoutFloorsInput
    connect?: sectionsWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutFloorsInput = {
    create?: XOR<productsCreateWithoutFloorsInput, productsUncheckedCreateWithoutFloorsInput> | productsCreateWithoutFloorsInput[] | productsUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutFloorsInput | productsCreateOrConnectWithoutFloorsInput[]
    createMany?: productsCreateManyFloorsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type floor_pricing_rulesUncheckedCreateNestedManyWithoutFloorsInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutFloorsInput, floor_pricing_rulesUncheckedCreateWithoutFloorsInput> | floor_pricing_rulesCreateWithoutFloorsInput[] | floor_pricing_rulesUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutFloorsInput | floor_pricing_rulesCreateOrConnectWithoutFloorsInput[]
    createMany?: floor_pricing_rulesCreateManyFloorsInputEnvelope
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutFloorsInput = {
    create?: XOR<productsCreateWithoutFloorsInput, productsUncheckedCreateWithoutFloorsInput> | productsCreateWithoutFloorsInput[] | productsUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutFloorsInput | productsCreateOrConnectWithoutFloorsInput[]
    createMany?: productsCreateManyFloorsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type floor_pricing_rulesUpdateManyWithoutFloorsNestedInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutFloorsInput, floor_pricing_rulesUncheckedCreateWithoutFloorsInput> | floor_pricing_rulesCreateWithoutFloorsInput[] | floor_pricing_rulesUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutFloorsInput | floor_pricing_rulesCreateOrConnectWithoutFloorsInput[]
    upsert?: floor_pricing_rulesUpsertWithWhereUniqueWithoutFloorsInput | floor_pricing_rulesUpsertWithWhereUniqueWithoutFloorsInput[]
    createMany?: floor_pricing_rulesCreateManyFloorsInputEnvelope
    set?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    disconnect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    delete?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    update?: floor_pricing_rulesUpdateWithWhereUniqueWithoutFloorsInput | floor_pricing_rulesUpdateWithWhereUniqueWithoutFloorsInput[]
    updateMany?: floor_pricing_rulesUpdateManyWithWhereWithoutFloorsInput | floor_pricing_rulesUpdateManyWithWhereWithoutFloorsInput[]
    deleteMany?: floor_pricing_rulesScalarWhereInput | floor_pricing_rulesScalarWhereInput[]
  }

  export type sectionsUpdateOneRequiredWithoutFloorsNestedInput = {
    create?: XOR<sectionsCreateWithoutFloorsInput, sectionsUncheckedCreateWithoutFloorsInput>
    connectOrCreate?: sectionsCreateOrConnectWithoutFloorsInput
    upsert?: sectionsUpsertWithoutFloorsInput
    connect?: sectionsWhereUniqueInput
    update?: XOR<XOR<sectionsUpdateToOneWithWhereWithoutFloorsInput, sectionsUpdateWithoutFloorsInput>, sectionsUncheckedUpdateWithoutFloorsInput>
  }

  export type productsUpdateManyWithoutFloorsNestedInput = {
    create?: XOR<productsCreateWithoutFloorsInput, productsUncheckedCreateWithoutFloorsInput> | productsCreateWithoutFloorsInput[] | productsUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutFloorsInput | productsCreateOrConnectWithoutFloorsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutFloorsInput | productsUpsertWithWhereUniqueWithoutFloorsInput[]
    createMany?: productsCreateManyFloorsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutFloorsInput | productsUpdateWithWhereUniqueWithoutFloorsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutFloorsInput | productsUpdateManyWithWhereWithoutFloorsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type floor_pricing_rulesUncheckedUpdateManyWithoutFloorsNestedInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutFloorsInput, floor_pricing_rulesUncheckedCreateWithoutFloorsInput> | floor_pricing_rulesCreateWithoutFloorsInput[] | floor_pricing_rulesUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutFloorsInput | floor_pricing_rulesCreateOrConnectWithoutFloorsInput[]
    upsert?: floor_pricing_rulesUpsertWithWhereUniqueWithoutFloorsInput | floor_pricing_rulesUpsertWithWhereUniqueWithoutFloorsInput[]
    createMany?: floor_pricing_rulesCreateManyFloorsInputEnvelope
    set?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    disconnect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    delete?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    update?: floor_pricing_rulesUpdateWithWhereUniqueWithoutFloorsInput | floor_pricing_rulesUpdateWithWhereUniqueWithoutFloorsInput[]
    updateMany?: floor_pricing_rulesUpdateManyWithWhereWithoutFloorsInput | floor_pricing_rulesUpdateManyWithWhereWithoutFloorsInput[]
    deleteMany?: floor_pricing_rulesScalarWhereInput | floor_pricing_rulesScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutFloorsNestedInput = {
    create?: XOR<productsCreateWithoutFloorsInput, productsUncheckedCreateWithoutFloorsInput> | productsCreateWithoutFloorsInput[] | productsUncheckedCreateWithoutFloorsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutFloorsInput | productsCreateOrConnectWithoutFloorsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutFloorsInput | productsUpsertWithWhereUniqueWithoutFloorsInput[]
    createMany?: productsCreateManyFloorsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutFloorsInput | productsUpdateWithWhereUniqueWithoutFloorsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutFloorsInput | productsUpdateManyWithWhereWithoutFloorsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type integrationsCreateNestedManyWithoutIntegration_sourcesInput = {
    create?: XOR<integrationsCreateWithoutIntegration_sourcesInput, integrationsUncheckedCreateWithoutIntegration_sourcesInput> | integrationsCreateWithoutIntegration_sourcesInput[] | integrationsUncheckedCreateWithoutIntegration_sourcesInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutIntegration_sourcesInput | integrationsCreateOrConnectWithoutIntegration_sourcesInput[]
    createMany?: integrationsCreateManyIntegration_sourcesInputEnvelope
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
  }

  export type integrationsUncheckedCreateNestedManyWithoutIntegration_sourcesInput = {
    create?: XOR<integrationsCreateWithoutIntegration_sourcesInput, integrationsUncheckedCreateWithoutIntegration_sourcesInput> | integrationsCreateWithoutIntegration_sourcesInput[] | integrationsUncheckedCreateWithoutIntegration_sourcesInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutIntegration_sourcesInput | integrationsCreateOrConnectWithoutIntegration_sourcesInput[]
    createMany?: integrationsCreateManyIntegration_sourcesInputEnvelope
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
  }

  export type integrationsUpdateManyWithoutIntegration_sourcesNestedInput = {
    create?: XOR<integrationsCreateWithoutIntegration_sourcesInput, integrationsUncheckedCreateWithoutIntegration_sourcesInput> | integrationsCreateWithoutIntegration_sourcesInput[] | integrationsUncheckedCreateWithoutIntegration_sourcesInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutIntegration_sourcesInput | integrationsCreateOrConnectWithoutIntegration_sourcesInput[]
    upsert?: integrationsUpsertWithWhereUniqueWithoutIntegration_sourcesInput | integrationsUpsertWithWhereUniqueWithoutIntegration_sourcesInput[]
    createMany?: integrationsCreateManyIntegration_sourcesInputEnvelope
    set?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    disconnect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    delete?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    update?: integrationsUpdateWithWhereUniqueWithoutIntegration_sourcesInput | integrationsUpdateWithWhereUniqueWithoutIntegration_sourcesInput[]
    updateMany?: integrationsUpdateManyWithWhereWithoutIntegration_sourcesInput | integrationsUpdateManyWithWhereWithoutIntegration_sourcesInput[]
    deleteMany?: integrationsScalarWhereInput | integrationsScalarWhereInput[]
  }

  export type integrationsUncheckedUpdateManyWithoutIntegration_sourcesNestedInput = {
    create?: XOR<integrationsCreateWithoutIntegration_sourcesInput, integrationsUncheckedCreateWithoutIntegration_sourcesInput> | integrationsCreateWithoutIntegration_sourcesInput[] | integrationsUncheckedCreateWithoutIntegration_sourcesInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutIntegration_sourcesInput | integrationsCreateOrConnectWithoutIntegration_sourcesInput[]
    upsert?: integrationsUpsertWithWhereUniqueWithoutIntegration_sourcesInput | integrationsUpsertWithWhereUniqueWithoutIntegration_sourcesInput[]
    createMany?: integrationsCreateManyIntegration_sourcesInputEnvelope
    set?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    disconnect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    delete?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    update?: integrationsUpdateWithWhereUniqueWithoutIntegration_sourcesInput | integrationsUpdateWithWhereUniqueWithoutIntegration_sourcesInput[]
    updateMany?: integrationsUpdateManyWithWhereWithoutIntegration_sourcesInput | integrationsUpdateManyWithWhereWithoutIntegration_sourcesInput[]
    deleteMany?: integrationsScalarWhereInput | integrationsScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutIntegrationsInput = {
    create?: XOR<productsCreateWithoutIntegrationsInput, productsUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: productsCreateOrConnectWithoutIntegrationsInput
    connect?: productsWhereUniqueInput
  }

  export type integration_sourcesCreateNestedOneWithoutIntegrationsInput = {
    create?: XOR<integration_sourcesCreateWithoutIntegrationsInput, integration_sourcesUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: integration_sourcesCreateOrConnectWithoutIntegrationsInput
    connect?: integration_sourcesWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutIntegrationsNestedInput = {
    create?: XOR<productsCreateWithoutIntegrationsInput, productsUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: productsCreateOrConnectWithoutIntegrationsInput
    upsert?: productsUpsertWithoutIntegrationsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutIntegrationsInput, productsUpdateWithoutIntegrationsInput>, productsUncheckedUpdateWithoutIntegrationsInput>
  }

  export type integration_sourcesUpdateOneRequiredWithoutIntegrationsNestedInput = {
    create?: XOR<integration_sourcesCreateWithoutIntegrationsInput, integration_sourcesUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: integration_sourcesCreateOrConnectWithoutIntegrationsInput
    upsert?: integration_sourcesUpsertWithoutIntegrationsInput
    connect?: integration_sourcesWhereUniqueInput
    update?: XOR<XOR<integration_sourcesUpdateToOneWithWhereWithoutIntegrationsInput, integration_sourcesUpdateWithoutIntegrationsInput>, integration_sourcesUncheckedUpdateWithoutIntegrationsInput>
  }

  export type product_typesCreateNestedManyWithoutObjectsInput = {
    create?: XOR<product_typesCreateWithoutObjectsInput, product_typesUncheckedCreateWithoutObjectsInput> | product_typesCreateWithoutObjectsInput[] | product_typesUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: product_typesCreateOrConnectWithoutObjectsInput | product_typesCreateOrConnectWithoutObjectsInput[]
    createMany?: product_typesCreateManyObjectsInputEnvelope
    connect?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
  }

  export type productsCreateNestedManyWithoutObjectsInput = {
    create?: XOR<productsCreateWithoutObjectsInput, productsUncheckedCreateWithoutObjectsInput> | productsCreateWithoutObjectsInput[] | productsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutObjectsInput | productsCreateOrConnectWithoutObjectsInput[]
    createMany?: productsCreateManyObjectsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type r_tags_objectsCreateNestedManyWithoutObjectsInput = {
    create?: XOR<r_tags_objectsCreateWithoutObjectsInput, r_tags_objectsUncheckedCreateWithoutObjectsInput> | r_tags_objectsCreateWithoutObjectsInput[] | r_tags_objectsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutObjectsInput | r_tags_objectsCreateOrConnectWithoutObjectsInput[]
    createMany?: r_tags_objectsCreateManyObjectsInputEnvelope
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
  }

  export type sectionsCreateNestedManyWithoutObjectsInput = {
    create?: XOR<sectionsCreateWithoutObjectsInput, sectionsUncheckedCreateWithoutObjectsInput> | sectionsCreateWithoutObjectsInput[] | sectionsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: sectionsCreateOrConnectWithoutObjectsInput | sectionsCreateOrConnectWithoutObjectsInput[]
    createMany?: sectionsCreateManyObjectsInputEnvelope
    connect?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
  }

  export type product_typesUncheckedCreateNestedManyWithoutObjectsInput = {
    create?: XOR<product_typesCreateWithoutObjectsInput, product_typesUncheckedCreateWithoutObjectsInput> | product_typesCreateWithoutObjectsInput[] | product_typesUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: product_typesCreateOrConnectWithoutObjectsInput | product_typesCreateOrConnectWithoutObjectsInput[]
    createMany?: product_typesCreateManyObjectsInputEnvelope
    connect?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutObjectsInput = {
    create?: XOR<productsCreateWithoutObjectsInput, productsUncheckedCreateWithoutObjectsInput> | productsCreateWithoutObjectsInput[] | productsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutObjectsInput | productsCreateOrConnectWithoutObjectsInput[]
    createMany?: productsCreateManyObjectsInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type r_tags_objectsUncheckedCreateNestedManyWithoutObjectsInput = {
    create?: XOR<r_tags_objectsCreateWithoutObjectsInput, r_tags_objectsUncheckedCreateWithoutObjectsInput> | r_tags_objectsCreateWithoutObjectsInput[] | r_tags_objectsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutObjectsInput | r_tags_objectsCreateOrConnectWithoutObjectsInput[]
    createMany?: r_tags_objectsCreateManyObjectsInputEnvelope
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
  }

  export type sectionsUncheckedCreateNestedManyWithoutObjectsInput = {
    create?: XOR<sectionsCreateWithoutObjectsInput, sectionsUncheckedCreateWithoutObjectsInput> | sectionsCreateWithoutObjectsInput[] | sectionsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: sectionsCreateOrConnectWithoutObjectsInput | sectionsCreateOrConnectWithoutObjectsInput[]
    createMany?: sectionsCreateManyObjectsInputEnvelope
    connect?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type product_typesUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<product_typesCreateWithoutObjectsInput, product_typesUncheckedCreateWithoutObjectsInput> | product_typesCreateWithoutObjectsInput[] | product_typesUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: product_typesCreateOrConnectWithoutObjectsInput | product_typesCreateOrConnectWithoutObjectsInput[]
    upsert?: product_typesUpsertWithWhereUniqueWithoutObjectsInput | product_typesUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: product_typesCreateManyObjectsInputEnvelope
    set?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    disconnect?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    delete?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    connect?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    update?: product_typesUpdateWithWhereUniqueWithoutObjectsInput | product_typesUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: product_typesUpdateManyWithWhereWithoutObjectsInput | product_typesUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: product_typesScalarWhereInput | product_typesScalarWhereInput[]
  }

  export type productsUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<productsCreateWithoutObjectsInput, productsUncheckedCreateWithoutObjectsInput> | productsCreateWithoutObjectsInput[] | productsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutObjectsInput | productsCreateOrConnectWithoutObjectsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutObjectsInput | productsUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: productsCreateManyObjectsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutObjectsInput | productsUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutObjectsInput | productsUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type r_tags_objectsUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<r_tags_objectsCreateWithoutObjectsInput, r_tags_objectsUncheckedCreateWithoutObjectsInput> | r_tags_objectsCreateWithoutObjectsInput[] | r_tags_objectsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutObjectsInput | r_tags_objectsCreateOrConnectWithoutObjectsInput[]
    upsert?: r_tags_objectsUpsertWithWhereUniqueWithoutObjectsInput | r_tags_objectsUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: r_tags_objectsCreateManyObjectsInputEnvelope
    set?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    disconnect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    delete?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    update?: r_tags_objectsUpdateWithWhereUniqueWithoutObjectsInput | r_tags_objectsUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: r_tags_objectsUpdateManyWithWhereWithoutObjectsInput | r_tags_objectsUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: r_tags_objectsScalarWhereInput | r_tags_objectsScalarWhereInput[]
  }

  export type sectionsUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<sectionsCreateWithoutObjectsInput, sectionsUncheckedCreateWithoutObjectsInput> | sectionsCreateWithoutObjectsInput[] | sectionsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: sectionsCreateOrConnectWithoutObjectsInput | sectionsCreateOrConnectWithoutObjectsInput[]
    upsert?: sectionsUpsertWithWhereUniqueWithoutObjectsInput | sectionsUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: sectionsCreateManyObjectsInputEnvelope
    set?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    disconnect?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    delete?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    connect?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    update?: sectionsUpdateWithWhereUniqueWithoutObjectsInput | sectionsUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: sectionsUpdateManyWithWhereWithoutObjectsInput | sectionsUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: sectionsScalarWhereInput | sectionsScalarWhereInput[]
  }

  export type product_typesUncheckedUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<product_typesCreateWithoutObjectsInput, product_typesUncheckedCreateWithoutObjectsInput> | product_typesCreateWithoutObjectsInput[] | product_typesUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: product_typesCreateOrConnectWithoutObjectsInput | product_typesCreateOrConnectWithoutObjectsInput[]
    upsert?: product_typesUpsertWithWhereUniqueWithoutObjectsInput | product_typesUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: product_typesCreateManyObjectsInputEnvelope
    set?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    disconnect?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    delete?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    connect?: product_typesWhereUniqueInput | product_typesWhereUniqueInput[]
    update?: product_typesUpdateWithWhereUniqueWithoutObjectsInput | product_typesUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: product_typesUpdateManyWithWhereWithoutObjectsInput | product_typesUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: product_typesScalarWhereInput | product_typesScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<productsCreateWithoutObjectsInput, productsUncheckedCreateWithoutObjectsInput> | productsCreateWithoutObjectsInput[] | productsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: productsCreateOrConnectWithoutObjectsInput | productsCreateOrConnectWithoutObjectsInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutObjectsInput | productsUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: productsCreateManyObjectsInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutObjectsInput | productsUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: productsUpdateManyWithWhereWithoutObjectsInput | productsUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type r_tags_objectsUncheckedUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<r_tags_objectsCreateWithoutObjectsInput, r_tags_objectsUncheckedCreateWithoutObjectsInput> | r_tags_objectsCreateWithoutObjectsInput[] | r_tags_objectsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutObjectsInput | r_tags_objectsCreateOrConnectWithoutObjectsInput[]
    upsert?: r_tags_objectsUpsertWithWhereUniqueWithoutObjectsInput | r_tags_objectsUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: r_tags_objectsCreateManyObjectsInputEnvelope
    set?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    disconnect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    delete?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    update?: r_tags_objectsUpdateWithWhereUniqueWithoutObjectsInput | r_tags_objectsUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: r_tags_objectsUpdateManyWithWhereWithoutObjectsInput | r_tags_objectsUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: r_tags_objectsScalarWhereInput | r_tags_objectsScalarWhereInput[]
  }

  export type sectionsUncheckedUpdateManyWithoutObjectsNestedInput = {
    create?: XOR<sectionsCreateWithoutObjectsInput, sectionsUncheckedCreateWithoutObjectsInput> | sectionsCreateWithoutObjectsInput[] | sectionsUncheckedCreateWithoutObjectsInput[]
    connectOrCreate?: sectionsCreateOrConnectWithoutObjectsInput | sectionsCreateOrConnectWithoutObjectsInput[]
    upsert?: sectionsUpsertWithWhereUniqueWithoutObjectsInput | sectionsUpsertWithWhereUniqueWithoutObjectsInput[]
    createMany?: sectionsCreateManyObjectsInputEnvelope
    set?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    disconnect?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    delete?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    connect?: sectionsWhereUniqueInput | sectionsWhereUniqueInput[]
    update?: sectionsUpdateWithWhereUniqueWithoutObjectsInput | sectionsUpdateWithWhereUniqueWithoutObjectsInput[]
    updateMany?: sectionsUpdateManyWithWhereWithoutObjectsInput | sectionsUpdateManyWithWhereWithoutObjectsInput[]
    deleteMany?: sectionsScalarWhereInput | sectionsScalarWhereInput[]
  }

  export type productsCreateNestedManyWithoutProduct_categoriesInput = {
    create?: XOR<productsCreateWithoutProduct_categoriesInput, productsUncheckedCreateWithoutProduct_categoriesInput> | productsCreateWithoutProduct_categoriesInput[] | productsUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_categoriesInput | productsCreateOrConnectWithoutProduct_categoriesInput[]
    createMany?: productsCreateManyProduct_categoriesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type r_tags_categoriesCreateNestedManyWithoutProduct_categoriesInput = {
    create?: XOR<r_tags_categoriesCreateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput> | r_tags_categoriesCreateWithoutProduct_categoriesInput[] | r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput | r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput[]
    createMany?: r_tags_categoriesCreateManyProduct_categoriesInputEnvelope
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutProduct_categoriesInput = {
    create?: XOR<productsCreateWithoutProduct_categoriesInput, productsUncheckedCreateWithoutProduct_categoriesInput> | productsCreateWithoutProduct_categoriesInput[] | productsUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_categoriesInput | productsCreateOrConnectWithoutProduct_categoriesInput[]
    createMany?: productsCreateManyProduct_categoriesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type r_tags_categoriesUncheckedCreateNestedManyWithoutProduct_categoriesInput = {
    create?: XOR<r_tags_categoriesCreateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput> | r_tags_categoriesCreateWithoutProduct_categoriesInput[] | r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput | r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput[]
    createMany?: r_tags_categoriesCreateManyProduct_categoriesInputEnvelope
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
  }

  export type productsUpdateManyWithoutProduct_categoriesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_categoriesInput, productsUncheckedCreateWithoutProduct_categoriesInput> | productsCreateWithoutProduct_categoriesInput[] | productsUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_categoriesInput | productsCreateOrConnectWithoutProduct_categoriesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutProduct_categoriesInput | productsUpsertWithWhereUniqueWithoutProduct_categoriesInput[]
    createMany?: productsCreateManyProduct_categoriesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutProduct_categoriesInput | productsUpdateWithWhereUniqueWithoutProduct_categoriesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutProduct_categoriesInput | productsUpdateManyWithWhereWithoutProduct_categoriesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type r_tags_categoriesUpdateManyWithoutProduct_categoriesNestedInput = {
    create?: XOR<r_tags_categoriesCreateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput> | r_tags_categoriesCreateWithoutProduct_categoriesInput[] | r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput | r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput[]
    upsert?: r_tags_categoriesUpsertWithWhereUniqueWithoutProduct_categoriesInput | r_tags_categoriesUpsertWithWhereUniqueWithoutProduct_categoriesInput[]
    createMany?: r_tags_categoriesCreateManyProduct_categoriesInputEnvelope
    set?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    disconnect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    delete?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    update?: r_tags_categoriesUpdateWithWhereUniqueWithoutProduct_categoriesInput | r_tags_categoriesUpdateWithWhereUniqueWithoutProduct_categoriesInput[]
    updateMany?: r_tags_categoriesUpdateManyWithWhereWithoutProduct_categoriesInput | r_tags_categoriesUpdateManyWithWhereWithoutProduct_categoriesInput[]
    deleteMany?: r_tags_categoriesScalarWhereInput | r_tags_categoriesScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutProduct_categoriesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_categoriesInput, productsUncheckedCreateWithoutProduct_categoriesInput> | productsCreateWithoutProduct_categoriesInput[] | productsUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_categoriesInput | productsCreateOrConnectWithoutProduct_categoriesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutProduct_categoriesInput | productsUpsertWithWhereUniqueWithoutProduct_categoriesInput[]
    createMany?: productsCreateManyProduct_categoriesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutProduct_categoriesInput | productsUpdateWithWhereUniqueWithoutProduct_categoriesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutProduct_categoriesInput | productsUpdateManyWithWhereWithoutProduct_categoriesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type r_tags_categoriesUncheckedUpdateManyWithoutProduct_categoriesNestedInput = {
    create?: XOR<r_tags_categoriesCreateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput> | r_tags_categoriesCreateWithoutProduct_categoriesInput[] | r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput | r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput[]
    upsert?: r_tags_categoriesUpsertWithWhereUniqueWithoutProduct_categoriesInput | r_tags_categoriesUpsertWithWhereUniqueWithoutProduct_categoriesInput[]
    createMany?: r_tags_categoriesCreateManyProduct_categoriesInputEnvelope
    set?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    disconnect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    delete?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    update?: r_tags_categoriesUpdateWithWhereUniqueWithoutProduct_categoriesInput | r_tags_categoriesUpdateWithWhereUniqueWithoutProduct_categoriesInput[]
    updateMany?: r_tags_categoriesUpdateManyWithWhereWithoutProduct_categoriesInput | r_tags_categoriesUpdateManyWithWhereWithoutProduct_categoriesInput[]
    deleteMany?: r_tags_categoriesScalarWhereInput | r_tags_categoriesScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutProduct_filesInput = {
    create?: XOR<productsCreateWithoutProduct_filesInput, productsUncheckedCreateWithoutProduct_filesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_filesInput
    connect?: productsWhereUniqueInput
  }

  export type Enumproduct_files_typeFieldUpdateOperationsInput = {
    set?: $Enums.product_files_type
  }

  export type productsUpdateOneRequiredWithoutProduct_filesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_filesInput, productsUncheckedCreateWithoutProduct_filesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_filesInput
    upsert?: productsUpsertWithoutProduct_filesInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutProduct_filesInput, productsUpdateWithoutProduct_filesInput>, productsUncheckedUpdateWithoutProduct_filesInput>
  }

  export type productsCreateNestedOneWithoutProduct_meter_numbersInput = {
    create?: XOR<productsCreateWithoutProduct_meter_numbersInput, productsUncheckedCreateWithoutProduct_meter_numbersInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_meter_numbersInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutProduct_meter_numbersNestedInput = {
    create?: XOR<productsCreateWithoutProduct_meter_numbersInput, productsUncheckedCreateWithoutProduct_meter_numbersInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_meter_numbersInput
    upsert?: productsUpsertWithoutProduct_meter_numbersInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutProduct_meter_numbersInput, productsUpdateWithoutProduct_meter_numbersInput>, productsUncheckedUpdateWithoutProduct_meter_numbersInput>
  }

  export type productsCreateNestedOneWithoutProduct_price_historyInput = {
    create?: XOR<productsCreateWithoutProduct_price_historyInput, productsUncheckedCreateWithoutProduct_price_historyInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_price_historyInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutProduct_price_historyNestedInput = {
    create?: XOR<productsCreateWithoutProduct_price_historyInput, productsUncheckedCreateWithoutProduct_price_historyInput>
    connectOrCreate?: productsCreateOrConnectWithoutProduct_price_historyInput
    upsert?: productsUpsertWithoutProduct_price_historyInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutProduct_price_historyInput, productsUpdateWithoutProduct_price_historyInput>, productsUncheckedUpdateWithoutProduct_price_historyInput>
  }

  export type product_typesCreateNestedOneWithoutProduct_pricing_rulesInput = {
    create?: XOR<product_typesCreateWithoutProduct_pricing_rulesInput, product_typesUncheckedCreateWithoutProduct_pricing_rulesInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProduct_pricing_rulesInput
    connect?: product_typesWhereUniqueInput
  }

  export type product_typesUpdateOneRequiredWithoutProduct_pricing_rulesNestedInput = {
    create?: XOR<product_typesCreateWithoutProduct_pricing_rulesInput, product_typesUncheckedCreateWithoutProduct_pricing_rulesInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProduct_pricing_rulesInput
    upsert?: product_typesUpsertWithoutProduct_pricing_rulesInput
    connect?: product_typesWhereUniqueInput
    update?: XOR<XOR<product_typesUpdateToOneWithWhereWithoutProduct_pricing_rulesInput, product_typesUpdateWithoutProduct_pricing_rulesInput>, product_typesUncheckedUpdateWithoutProduct_pricing_rulesInput>
  }

  export type floor_pricing_rulesCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutProduct_typesInput, floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | floor_pricing_rulesCreateWithoutProduct_typesInput[] | floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput | floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    createMany?: floor_pricing_rulesCreateManyProduct_typesInputEnvelope
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
  }

  export type product_pricing_rulesCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<product_pricing_rulesCreateWithoutProduct_typesInput, product_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | product_pricing_rulesCreateWithoutProduct_typesInput[] | product_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: product_pricing_rulesCreateOrConnectWithoutProduct_typesInput | product_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    createMany?: product_pricing_rulesCreateManyProduct_typesInputEnvelope
    connect?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
  }

  export type objectsCreateNestedOneWithoutProduct_typesInput = {
    create?: XOR<objectsCreateWithoutProduct_typesInput, objectsUncheckedCreateWithoutProduct_typesInput>
    connectOrCreate?: objectsCreateOrConnectWithoutProduct_typesInput
    connect?: objectsWhereUniqueInput
  }

  export type productsCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type r_tags_product_typesCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<r_tags_product_typesCreateWithoutProduct_typesInput, r_tags_product_typesUncheckedCreateWithoutProduct_typesInput> | r_tags_product_typesCreateWithoutProduct_typesInput[] | r_tags_product_typesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutProduct_typesInput | r_tags_product_typesCreateOrConnectWithoutProduct_typesInput[]
    createMany?: r_tags_product_typesCreateManyProduct_typesInputEnvelope
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
  }

  export type floor_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutProduct_typesInput, floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | floor_pricing_rulesCreateWithoutProduct_typesInput[] | floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput | floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    createMany?: floor_pricing_rulesCreateManyProduct_typesInputEnvelope
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
  }

  export type product_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<product_pricing_rulesCreateWithoutProduct_typesInput, product_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | product_pricing_rulesCreateWithoutProduct_typesInput[] | product_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: product_pricing_rulesCreateOrConnectWithoutProduct_typesInput | product_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    createMany?: product_pricing_rulesCreateManyProduct_typesInputEnvelope
    connect?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type r_tags_product_typesUncheckedCreateNestedManyWithoutProduct_typesInput = {
    create?: XOR<r_tags_product_typesCreateWithoutProduct_typesInput, r_tags_product_typesUncheckedCreateWithoutProduct_typesInput> | r_tags_product_typesCreateWithoutProduct_typesInput[] | r_tags_product_typesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutProduct_typesInput | r_tags_product_typesCreateOrConnectWithoutProduct_typesInput[]
    createMany?: r_tags_product_typesCreateManyProduct_typesInputEnvelope
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
  }

  export type floor_pricing_rulesUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutProduct_typesInput, floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | floor_pricing_rulesCreateWithoutProduct_typesInput[] | floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput | floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    upsert?: floor_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput | floor_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: floor_pricing_rulesCreateManyProduct_typesInputEnvelope
    set?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    disconnect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    delete?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    update?: floor_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput | floor_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: floor_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput | floor_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: floor_pricing_rulesScalarWhereInput | floor_pricing_rulesScalarWhereInput[]
  }

  export type product_pricing_rulesUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<product_pricing_rulesCreateWithoutProduct_typesInput, product_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | product_pricing_rulesCreateWithoutProduct_typesInput[] | product_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: product_pricing_rulesCreateOrConnectWithoutProduct_typesInput | product_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    upsert?: product_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput | product_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: product_pricing_rulesCreateManyProduct_typesInputEnvelope
    set?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    disconnect?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    delete?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    connect?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    update?: product_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput | product_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: product_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput | product_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: product_pricing_rulesScalarWhereInput | product_pricing_rulesScalarWhereInput[]
  }

  export type objectsUpdateOneRequiredWithoutProduct_typesNestedInput = {
    create?: XOR<objectsCreateWithoutProduct_typesInput, objectsUncheckedCreateWithoutProduct_typesInput>
    connectOrCreate?: objectsCreateOrConnectWithoutProduct_typesInput
    upsert?: objectsUpsertWithoutProduct_typesInput
    connect?: objectsWhereUniqueInput
    update?: XOR<XOR<objectsUpdateToOneWithWhereWithoutProduct_typesInput, objectsUpdateWithoutProduct_typesInput>, objectsUncheckedUpdateWithoutProduct_typesInput>
  }

  export type productsUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutProduct_typesInput | productsUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutProduct_typesInput | productsUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutProduct_typesInput | productsUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type r_tags_product_typesUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<r_tags_product_typesCreateWithoutProduct_typesInput, r_tags_product_typesUncheckedCreateWithoutProduct_typesInput> | r_tags_product_typesCreateWithoutProduct_typesInput[] | r_tags_product_typesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutProduct_typesInput | r_tags_product_typesCreateOrConnectWithoutProduct_typesInput[]
    upsert?: r_tags_product_typesUpsertWithWhereUniqueWithoutProduct_typesInput | r_tags_product_typesUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: r_tags_product_typesCreateManyProduct_typesInputEnvelope
    set?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    disconnect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    delete?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    update?: r_tags_product_typesUpdateWithWhereUniqueWithoutProduct_typesInput | r_tags_product_typesUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: r_tags_product_typesUpdateManyWithWhereWithoutProduct_typesInput | r_tags_product_typesUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: r_tags_product_typesScalarWhereInput | r_tags_product_typesScalarWhereInput[]
  }

  export type floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<floor_pricing_rulesCreateWithoutProduct_typesInput, floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | floor_pricing_rulesCreateWithoutProduct_typesInput[] | floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput | floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    upsert?: floor_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput | floor_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: floor_pricing_rulesCreateManyProduct_typesInputEnvelope
    set?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    disconnect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    delete?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    connect?: floor_pricing_rulesWhereUniqueInput | floor_pricing_rulesWhereUniqueInput[]
    update?: floor_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput | floor_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: floor_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput | floor_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: floor_pricing_rulesScalarWhereInput | floor_pricing_rulesScalarWhereInput[]
  }

  export type product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<product_pricing_rulesCreateWithoutProduct_typesInput, product_pricing_rulesUncheckedCreateWithoutProduct_typesInput> | product_pricing_rulesCreateWithoutProduct_typesInput[] | product_pricing_rulesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: product_pricing_rulesCreateOrConnectWithoutProduct_typesInput | product_pricing_rulesCreateOrConnectWithoutProduct_typesInput[]
    upsert?: product_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput | product_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: product_pricing_rulesCreateManyProduct_typesInputEnvelope
    set?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    disconnect?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    delete?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    connect?: product_pricing_rulesWhereUniqueInput | product_pricing_rulesWhereUniqueInput[]
    update?: product_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput | product_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: product_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput | product_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: product_pricing_rulesScalarWhereInput | product_pricing_rulesScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput> | productsCreateWithoutProduct_typesInput[] | productsUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: productsCreateOrConnectWithoutProduct_typesInput | productsCreateOrConnectWithoutProduct_typesInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutProduct_typesInput | productsUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: productsCreateManyProduct_typesInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutProduct_typesInput | productsUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: productsUpdateManyWithWhereWithoutProduct_typesInput | productsUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesNestedInput = {
    create?: XOR<r_tags_product_typesCreateWithoutProduct_typesInput, r_tags_product_typesUncheckedCreateWithoutProduct_typesInput> | r_tags_product_typesCreateWithoutProduct_typesInput[] | r_tags_product_typesUncheckedCreateWithoutProduct_typesInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutProduct_typesInput | r_tags_product_typesCreateOrConnectWithoutProduct_typesInput[]
    upsert?: r_tags_product_typesUpsertWithWhereUniqueWithoutProduct_typesInput | r_tags_product_typesUpsertWithWhereUniqueWithoutProduct_typesInput[]
    createMany?: r_tags_product_typesCreateManyProduct_typesInputEnvelope
    set?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    disconnect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    delete?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    update?: r_tags_product_typesUpdateWithWhereUniqueWithoutProduct_typesInput | r_tags_product_typesUpdateWithWhereUniqueWithoutProduct_typesInput[]
    updateMany?: r_tags_product_typesUpdateManyWithWhereWithoutProduct_typesInput | r_tags_product_typesUpdateManyWithWhereWithoutProduct_typesInput[]
    deleteMany?: r_tags_product_typesScalarWhereInput | r_tags_product_typesScalarWhereInput[]
  }

  export type integrationsCreateNestedManyWithoutProductsInput = {
    create?: XOR<integrationsCreateWithoutProductsInput, integrationsUncheckedCreateWithoutProductsInput> | integrationsCreateWithoutProductsInput[] | integrationsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutProductsInput | integrationsCreateOrConnectWithoutProductsInput[]
    createMany?: integrationsCreateManyProductsInputEnvelope
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
  }

  export type product_filesCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_filesCreateWithoutProductsInput, product_filesUncheckedCreateWithoutProductsInput> | product_filesCreateWithoutProductsInput[] | product_filesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_filesCreateOrConnectWithoutProductsInput | product_filesCreateOrConnectWithoutProductsInput[]
    createMany?: product_filesCreateManyProductsInputEnvelope
    connect?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
  }

  export type product_meter_numbersCreateNestedOneWithoutProductsInput = {
    create?: XOR<product_meter_numbersCreateWithoutProductsInput, product_meter_numbersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_meter_numbersCreateOrConnectWithoutProductsInput
    connect?: product_meter_numbersWhereUniqueInput
  }

  export type product_price_historyCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_price_historyCreateWithoutProductsInput, product_price_historyUncheckedCreateWithoutProductsInput> | product_price_historyCreateWithoutProductsInput[] | product_price_historyUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_price_historyCreateOrConnectWithoutProductsInput | product_price_historyCreateOrConnectWithoutProductsInput[]
    createMany?: product_price_historyCreateManyProductsInputEnvelope
    connect?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
  }

  export type floorsCreateNestedOneWithoutProductsInput = {
    create?: XOR<floorsCreateWithoutProductsInput, floorsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: floorsCreateOrConnectWithoutProductsInput
    connect?: floorsWhereUniqueInput
  }

  export type product_categoriesCreateNestedOneWithoutProductsInput = {
    create?: XOR<product_categoriesCreateWithoutProductsInput, product_categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_categoriesCreateOrConnectWithoutProductsInput
    connect?: product_categoriesWhereUniqueInput
  }

  export type objectsCreateNestedOneWithoutProductsInput = {
    create?: XOR<objectsCreateWithoutProductsInput, objectsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: objectsCreateOrConnectWithoutProductsInput
    connect?: objectsWhereUniqueInput
  }

  export type product_typesCreateNestedOneWithoutProductsInput = {
    create?: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProductsInput
    connect?: product_typesWhereUniqueInput
  }

  export type r_product_tagsCreateNestedManyWithoutProductsInput = {
    create?: XOR<r_product_tagsCreateWithoutProductsInput, r_product_tagsUncheckedCreateWithoutProductsInput> | r_product_tagsCreateWithoutProductsInput[] | r_product_tagsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutProductsInput | r_product_tagsCreateOrConnectWithoutProductsInput[]
    createMany?: r_product_tagsCreateManyProductsInputEnvelope
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
  }

  export type r_tags_productsCreateNestedManyWithoutProductsInput = {
    create?: XOR<r_tags_productsCreateWithoutProductsInput, r_tags_productsUncheckedCreateWithoutProductsInput> | r_tags_productsCreateWithoutProductsInput[] | r_tags_productsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutProductsInput | r_tags_productsCreateOrConnectWithoutProductsInput[]
    createMany?: r_tags_productsCreateManyProductsInputEnvelope
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
  }

  export type integrationsUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<integrationsCreateWithoutProductsInput, integrationsUncheckedCreateWithoutProductsInput> | integrationsCreateWithoutProductsInput[] | integrationsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutProductsInput | integrationsCreateOrConnectWithoutProductsInput[]
    createMany?: integrationsCreateManyProductsInputEnvelope
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
  }

  export type product_filesUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_filesCreateWithoutProductsInput, product_filesUncheckedCreateWithoutProductsInput> | product_filesCreateWithoutProductsInput[] | product_filesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_filesCreateOrConnectWithoutProductsInput | product_filesCreateOrConnectWithoutProductsInput[]
    createMany?: product_filesCreateManyProductsInputEnvelope
    connect?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
  }

  export type product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput = {
    create?: XOR<product_meter_numbersCreateWithoutProductsInput, product_meter_numbersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_meter_numbersCreateOrConnectWithoutProductsInput
    connect?: product_meter_numbersWhereUniqueInput
  }

  export type product_price_historyUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<product_price_historyCreateWithoutProductsInput, product_price_historyUncheckedCreateWithoutProductsInput> | product_price_historyCreateWithoutProductsInput[] | product_price_historyUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_price_historyCreateOrConnectWithoutProductsInput | product_price_historyCreateOrConnectWithoutProductsInput[]
    createMany?: product_price_historyCreateManyProductsInputEnvelope
    connect?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
  }

  export type r_product_tagsUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<r_product_tagsCreateWithoutProductsInput, r_product_tagsUncheckedCreateWithoutProductsInput> | r_product_tagsCreateWithoutProductsInput[] | r_product_tagsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutProductsInput | r_product_tagsCreateOrConnectWithoutProductsInput[]
    createMany?: r_product_tagsCreateManyProductsInputEnvelope
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
  }

  export type r_tags_productsUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<r_tags_productsCreateWithoutProductsInput, r_tags_productsUncheckedCreateWithoutProductsInput> | r_tags_productsCreateWithoutProductsInput[] | r_tags_productsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutProductsInput | r_tags_productsCreateOrConnectWithoutProductsInput[]
    createMany?: r_tags_productsCreateManyProductsInputEnvelope
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type integrationsUpdateManyWithoutProductsNestedInput = {
    create?: XOR<integrationsCreateWithoutProductsInput, integrationsUncheckedCreateWithoutProductsInput> | integrationsCreateWithoutProductsInput[] | integrationsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutProductsInput | integrationsCreateOrConnectWithoutProductsInput[]
    upsert?: integrationsUpsertWithWhereUniqueWithoutProductsInput | integrationsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: integrationsCreateManyProductsInputEnvelope
    set?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    disconnect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    delete?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    update?: integrationsUpdateWithWhereUniqueWithoutProductsInput | integrationsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: integrationsUpdateManyWithWhereWithoutProductsInput | integrationsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: integrationsScalarWhereInput | integrationsScalarWhereInput[]
  }

  export type product_filesUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_filesCreateWithoutProductsInput, product_filesUncheckedCreateWithoutProductsInput> | product_filesCreateWithoutProductsInput[] | product_filesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_filesCreateOrConnectWithoutProductsInput | product_filesCreateOrConnectWithoutProductsInput[]
    upsert?: product_filesUpsertWithWhereUniqueWithoutProductsInput | product_filesUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_filesCreateManyProductsInputEnvelope
    set?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    disconnect?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    delete?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    connect?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    update?: product_filesUpdateWithWhereUniqueWithoutProductsInput | product_filesUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_filesUpdateManyWithWhereWithoutProductsInput | product_filesUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_filesScalarWhereInput | product_filesScalarWhereInput[]
  }

  export type product_meter_numbersUpdateOneWithoutProductsNestedInput = {
    create?: XOR<product_meter_numbersCreateWithoutProductsInput, product_meter_numbersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_meter_numbersCreateOrConnectWithoutProductsInput
    upsert?: product_meter_numbersUpsertWithoutProductsInput
    disconnect?: product_meter_numbersWhereInput | boolean
    delete?: product_meter_numbersWhereInput | boolean
    connect?: product_meter_numbersWhereUniqueInput
    update?: XOR<XOR<product_meter_numbersUpdateToOneWithWhereWithoutProductsInput, product_meter_numbersUpdateWithoutProductsInput>, product_meter_numbersUncheckedUpdateWithoutProductsInput>
  }

  export type product_price_historyUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_price_historyCreateWithoutProductsInput, product_price_historyUncheckedCreateWithoutProductsInput> | product_price_historyCreateWithoutProductsInput[] | product_price_historyUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_price_historyCreateOrConnectWithoutProductsInput | product_price_historyCreateOrConnectWithoutProductsInput[]
    upsert?: product_price_historyUpsertWithWhereUniqueWithoutProductsInput | product_price_historyUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_price_historyCreateManyProductsInputEnvelope
    set?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    disconnect?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    delete?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    connect?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    update?: product_price_historyUpdateWithWhereUniqueWithoutProductsInput | product_price_historyUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_price_historyUpdateManyWithWhereWithoutProductsInput | product_price_historyUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_price_historyScalarWhereInput | product_price_historyScalarWhereInput[]
  }

  export type floorsUpdateOneWithoutProductsNestedInput = {
    create?: XOR<floorsCreateWithoutProductsInput, floorsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: floorsCreateOrConnectWithoutProductsInput
    upsert?: floorsUpsertWithoutProductsInput
    disconnect?: floorsWhereInput | boolean
    delete?: floorsWhereInput | boolean
    connect?: floorsWhereUniqueInput
    update?: XOR<XOR<floorsUpdateToOneWithWhereWithoutProductsInput, floorsUpdateWithoutProductsInput>, floorsUncheckedUpdateWithoutProductsInput>
  }

  export type product_categoriesUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<product_categoriesCreateWithoutProductsInput, product_categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_categoriesCreateOrConnectWithoutProductsInput
    upsert?: product_categoriesUpsertWithoutProductsInput
    connect?: product_categoriesWhereUniqueInput
    update?: XOR<XOR<product_categoriesUpdateToOneWithWhereWithoutProductsInput, product_categoriesUpdateWithoutProductsInput>, product_categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type objectsUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<objectsCreateWithoutProductsInput, objectsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: objectsCreateOrConnectWithoutProductsInput
    upsert?: objectsUpsertWithoutProductsInput
    connect?: objectsWhereUniqueInput
    update?: XOR<XOR<objectsUpdateToOneWithWhereWithoutProductsInput, objectsUpdateWithoutProductsInput>, objectsUncheckedUpdateWithoutProductsInput>
  }

  export type product_typesUpdateOneWithoutProductsNestedInput = {
    create?: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutProductsInput
    upsert?: product_typesUpsertWithoutProductsInput
    disconnect?: product_typesWhereInput | boolean
    delete?: product_typesWhereInput | boolean
    connect?: product_typesWhereUniqueInput
    update?: XOR<XOR<product_typesUpdateToOneWithWhereWithoutProductsInput, product_typesUpdateWithoutProductsInput>, product_typesUncheckedUpdateWithoutProductsInput>
  }

  export type r_product_tagsUpdateManyWithoutProductsNestedInput = {
    create?: XOR<r_product_tagsCreateWithoutProductsInput, r_product_tagsUncheckedCreateWithoutProductsInput> | r_product_tagsCreateWithoutProductsInput[] | r_product_tagsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutProductsInput | r_product_tagsCreateOrConnectWithoutProductsInput[]
    upsert?: r_product_tagsUpsertWithWhereUniqueWithoutProductsInput | r_product_tagsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: r_product_tagsCreateManyProductsInputEnvelope
    set?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    disconnect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    delete?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    update?: r_product_tagsUpdateWithWhereUniqueWithoutProductsInput | r_product_tagsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: r_product_tagsUpdateManyWithWhereWithoutProductsInput | r_product_tagsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: r_product_tagsScalarWhereInput | r_product_tagsScalarWhereInput[]
  }

  export type r_tags_productsUpdateManyWithoutProductsNestedInput = {
    create?: XOR<r_tags_productsCreateWithoutProductsInput, r_tags_productsUncheckedCreateWithoutProductsInput> | r_tags_productsCreateWithoutProductsInput[] | r_tags_productsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutProductsInput | r_tags_productsCreateOrConnectWithoutProductsInput[]
    upsert?: r_tags_productsUpsertWithWhereUniqueWithoutProductsInput | r_tags_productsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: r_tags_productsCreateManyProductsInputEnvelope
    set?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    disconnect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    delete?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    update?: r_tags_productsUpdateWithWhereUniqueWithoutProductsInput | r_tags_productsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: r_tags_productsUpdateManyWithWhereWithoutProductsInput | r_tags_productsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: r_tags_productsScalarWhereInput | r_tags_productsScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type integrationsUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<integrationsCreateWithoutProductsInput, integrationsUncheckedCreateWithoutProductsInput> | integrationsCreateWithoutProductsInput[] | integrationsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: integrationsCreateOrConnectWithoutProductsInput | integrationsCreateOrConnectWithoutProductsInput[]
    upsert?: integrationsUpsertWithWhereUniqueWithoutProductsInput | integrationsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: integrationsCreateManyProductsInputEnvelope
    set?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    disconnect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    delete?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    connect?: integrationsWhereUniqueInput | integrationsWhereUniqueInput[]
    update?: integrationsUpdateWithWhereUniqueWithoutProductsInput | integrationsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: integrationsUpdateManyWithWhereWithoutProductsInput | integrationsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: integrationsScalarWhereInput | integrationsScalarWhereInput[]
  }

  export type product_filesUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_filesCreateWithoutProductsInput, product_filesUncheckedCreateWithoutProductsInput> | product_filesCreateWithoutProductsInput[] | product_filesUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_filesCreateOrConnectWithoutProductsInput | product_filesCreateOrConnectWithoutProductsInput[]
    upsert?: product_filesUpsertWithWhereUniqueWithoutProductsInput | product_filesUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_filesCreateManyProductsInputEnvelope
    set?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    disconnect?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    delete?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    connect?: product_filesWhereUniqueInput | product_filesWhereUniqueInput[]
    update?: product_filesUpdateWithWhereUniqueWithoutProductsInput | product_filesUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_filesUpdateManyWithWhereWithoutProductsInput | product_filesUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_filesScalarWhereInput | product_filesScalarWhereInput[]
  }

  export type product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput = {
    create?: XOR<product_meter_numbersCreateWithoutProductsInput, product_meter_numbersUncheckedCreateWithoutProductsInput>
    connectOrCreate?: product_meter_numbersCreateOrConnectWithoutProductsInput
    upsert?: product_meter_numbersUpsertWithoutProductsInput
    disconnect?: product_meter_numbersWhereInput | boolean
    delete?: product_meter_numbersWhereInput | boolean
    connect?: product_meter_numbersWhereUniqueInput
    update?: XOR<XOR<product_meter_numbersUpdateToOneWithWhereWithoutProductsInput, product_meter_numbersUpdateWithoutProductsInput>, product_meter_numbersUncheckedUpdateWithoutProductsInput>
  }

  export type product_price_historyUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<product_price_historyCreateWithoutProductsInput, product_price_historyUncheckedCreateWithoutProductsInput> | product_price_historyCreateWithoutProductsInput[] | product_price_historyUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: product_price_historyCreateOrConnectWithoutProductsInput | product_price_historyCreateOrConnectWithoutProductsInput[]
    upsert?: product_price_historyUpsertWithWhereUniqueWithoutProductsInput | product_price_historyUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: product_price_historyCreateManyProductsInputEnvelope
    set?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    disconnect?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    delete?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    connect?: product_price_historyWhereUniqueInput | product_price_historyWhereUniqueInput[]
    update?: product_price_historyUpdateWithWhereUniqueWithoutProductsInput | product_price_historyUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: product_price_historyUpdateManyWithWhereWithoutProductsInput | product_price_historyUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: product_price_historyScalarWhereInput | product_price_historyScalarWhereInput[]
  }

  export type r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<r_product_tagsCreateWithoutProductsInput, r_product_tagsUncheckedCreateWithoutProductsInput> | r_product_tagsCreateWithoutProductsInput[] | r_product_tagsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutProductsInput | r_product_tagsCreateOrConnectWithoutProductsInput[]
    upsert?: r_product_tagsUpsertWithWhereUniqueWithoutProductsInput | r_product_tagsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: r_product_tagsCreateManyProductsInputEnvelope
    set?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    disconnect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    delete?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    update?: r_product_tagsUpdateWithWhereUniqueWithoutProductsInput | r_product_tagsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: r_product_tagsUpdateManyWithWhereWithoutProductsInput | r_product_tagsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: r_product_tagsScalarWhereInput | r_product_tagsScalarWhereInput[]
  }

  export type r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput = {
    create?: XOR<r_tags_productsCreateWithoutProductsInput, r_tags_productsUncheckedCreateWithoutProductsInput> | r_tags_productsCreateWithoutProductsInput[] | r_tags_productsUncheckedCreateWithoutProductsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutProductsInput | r_tags_productsCreateOrConnectWithoutProductsInput[]
    upsert?: r_tags_productsUpsertWithWhereUniqueWithoutProductsInput | r_tags_productsUpsertWithWhereUniqueWithoutProductsInput[]
    createMany?: r_tags_productsCreateManyProductsInputEnvelope
    set?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    disconnect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    delete?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    update?: r_tags_productsUpdateWithWhereUniqueWithoutProductsInput | r_tags_productsUpdateWithWhereUniqueWithoutProductsInput[]
    updateMany?: r_tags_productsUpdateManyWithWhereWithoutProductsInput | r_tags_productsUpdateManyWithWhereWithoutProductsInput[]
    deleteMany?: r_tags_productsScalarWhereInput | r_tags_productsScalarWhereInput[]
  }

  export type r_tags_projectsCreateNestedManyWithoutProjectsInput = {
    create?: XOR<r_tags_projectsCreateWithoutProjectsInput, r_tags_projectsUncheckedCreateWithoutProjectsInput> | r_tags_projectsCreateWithoutProjectsInput[] | r_tags_projectsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutProjectsInput | r_tags_projectsCreateOrConnectWithoutProjectsInput[]
    createMany?: r_tags_projectsCreateManyProjectsInputEnvelope
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
  }

  export type r_tags_projectsUncheckedCreateNestedManyWithoutProjectsInput = {
    create?: XOR<r_tags_projectsCreateWithoutProjectsInput, r_tags_projectsUncheckedCreateWithoutProjectsInput> | r_tags_projectsCreateWithoutProjectsInput[] | r_tags_projectsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutProjectsInput | r_tags_projectsCreateOrConnectWithoutProjectsInput[]
    createMany?: r_tags_projectsCreateManyProjectsInputEnvelope
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
  }

  export type r_tags_projectsUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<r_tags_projectsCreateWithoutProjectsInput, r_tags_projectsUncheckedCreateWithoutProjectsInput> | r_tags_projectsCreateWithoutProjectsInput[] | r_tags_projectsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutProjectsInput | r_tags_projectsCreateOrConnectWithoutProjectsInput[]
    upsert?: r_tags_projectsUpsertWithWhereUniqueWithoutProjectsInput | r_tags_projectsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: r_tags_projectsCreateManyProjectsInputEnvelope
    set?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    disconnect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    delete?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    update?: r_tags_projectsUpdateWithWhereUniqueWithoutProjectsInput | r_tags_projectsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: r_tags_projectsUpdateManyWithWhereWithoutProjectsInput | r_tags_projectsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: r_tags_projectsScalarWhereInput | r_tags_projectsScalarWhereInput[]
  }

  export type r_tags_projectsUncheckedUpdateManyWithoutProjectsNestedInput = {
    create?: XOR<r_tags_projectsCreateWithoutProjectsInput, r_tags_projectsUncheckedCreateWithoutProjectsInput> | r_tags_projectsCreateWithoutProjectsInput[] | r_tags_projectsUncheckedCreateWithoutProjectsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutProjectsInput | r_tags_projectsCreateOrConnectWithoutProjectsInput[]
    upsert?: r_tags_projectsUpsertWithWhereUniqueWithoutProjectsInput | r_tags_projectsUpsertWithWhereUniqueWithoutProjectsInput[]
    createMany?: r_tags_projectsCreateManyProjectsInputEnvelope
    set?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    disconnect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    delete?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    update?: r_tags_projectsUpdateWithWhereUniqueWithoutProjectsInput | r_tags_projectsUpdateWithWhereUniqueWithoutProjectsInput[]
    updateMany?: r_tags_projectsUpdateManyWithWhereWithoutProjectsInput | r_tags_projectsUpdateManyWithWhereWithoutProjectsInput[]
    deleteMany?: r_tags_projectsScalarWhereInput | r_tags_projectsScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutR_product_tagsInput = {
    create?: XOR<productsCreateWithoutR_product_tagsInput, productsUncheckedCreateWithoutR_product_tagsInput>
    connectOrCreate?: productsCreateOrConnectWithoutR_product_tagsInput
    connect?: productsWhereUniqueInput
  }

  export type tagsCreateNestedOneWithoutR_product_tagsInput = {
    create?: XOR<tagsCreateWithoutR_product_tagsInput, tagsUncheckedCreateWithoutR_product_tagsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_product_tagsInput
    connect?: tagsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutR_product_tagsNestedInput = {
    create?: XOR<productsCreateWithoutR_product_tagsInput, productsUncheckedCreateWithoutR_product_tagsInput>
    connectOrCreate?: productsCreateOrConnectWithoutR_product_tagsInput
    upsert?: productsUpsertWithoutR_product_tagsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutR_product_tagsInput, productsUpdateWithoutR_product_tagsInput>, productsUncheckedUpdateWithoutR_product_tagsInput>
  }

  export type tagsUpdateOneRequiredWithoutR_product_tagsNestedInput = {
    create?: XOR<tagsCreateWithoutR_product_tagsInput, tagsUncheckedCreateWithoutR_product_tagsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_product_tagsInput
    upsert?: tagsUpsertWithoutR_product_tagsInput
    connect?: tagsWhereUniqueInput
    update?: XOR<XOR<tagsUpdateToOneWithWhereWithoutR_product_tagsInput, tagsUpdateWithoutR_product_tagsInput>, tagsUncheckedUpdateWithoutR_product_tagsInput>
  }

  export type product_categoriesCreateNestedOneWithoutR_tags_categoriesInput = {
    create?: XOR<product_categoriesCreateWithoutR_tags_categoriesInput, product_categoriesUncheckedCreateWithoutR_tags_categoriesInput>
    connectOrCreate?: product_categoriesCreateOrConnectWithoutR_tags_categoriesInput
    connect?: product_categoriesWhereUniqueInput
  }

  export type tagsCreateNestedOneWithoutR_tags_categoriesInput = {
    create?: XOR<tagsCreateWithoutR_tags_categoriesInput, tagsUncheckedCreateWithoutR_tags_categoriesInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_categoriesInput
    connect?: tagsWhereUniqueInput
  }

  export type product_categoriesUpdateOneRequiredWithoutR_tags_categoriesNestedInput = {
    create?: XOR<product_categoriesCreateWithoutR_tags_categoriesInput, product_categoriesUncheckedCreateWithoutR_tags_categoriesInput>
    connectOrCreate?: product_categoriesCreateOrConnectWithoutR_tags_categoriesInput
    upsert?: product_categoriesUpsertWithoutR_tags_categoriesInput
    connect?: product_categoriesWhereUniqueInput
    update?: XOR<XOR<product_categoriesUpdateToOneWithWhereWithoutR_tags_categoriesInput, product_categoriesUpdateWithoutR_tags_categoriesInput>, product_categoriesUncheckedUpdateWithoutR_tags_categoriesInput>
  }

  export type tagsUpdateOneRequiredWithoutR_tags_categoriesNestedInput = {
    create?: XOR<tagsCreateWithoutR_tags_categoriesInput, tagsUncheckedCreateWithoutR_tags_categoriesInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_categoriesInput
    upsert?: tagsUpsertWithoutR_tags_categoriesInput
    connect?: tagsWhereUniqueInput
    update?: XOR<XOR<tagsUpdateToOneWithWhereWithoutR_tags_categoriesInput, tagsUpdateWithoutR_tags_categoriesInput>, tagsUncheckedUpdateWithoutR_tags_categoriesInput>
  }

  export type objectsCreateNestedOneWithoutR_tags_objectsInput = {
    create?: XOR<objectsCreateWithoutR_tags_objectsInput, objectsUncheckedCreateWithoutR_tags_objectsInput>
    connectOrCreate?: objectsCreateOrConnectWithoutR_tags_objectsInput
    connect?: objectsWhereUniqueInput
  }

  export type tagsCreateNestedOneWithoutR_tags_objectsInput = {
    create?: XOR<tagsCreateWithoutR_tags_objectsInput, tagsUncheckedCreateWithoutR_tags_objectsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_objectsInput
    connect?: tagsWhereUniqueInput
  }

  export type objectsUpdateOneRequiredWithoutR_tags_objectsNestedInput = {
    create?: XOR<objectsCreateWithoutR_tags_objectsInput, objectsUncheckedCreateWithoutR_tags_objectsInput>
    connectOrCreate?: objectsCreateOrConnectWithoutR_tags_objectsInput
    upsert?: objectsUpsertWithoutR_tags_objectsInput
    connect?: objectsWhereUniqueInput
    update?: XOR<XOR<objectsUpdateToOneWithWhereWithoutR_tags_objectsInput, objectsUpdateWithoutR_tags_objectsInput>, objectsUncheckedUpdateWithoutR_tags_objectsInput>
  }

  export type tagsUpdateOneRequiredWithoutR_tags_objectsNestedInput = {
    create?: XOR<tagsCreateWithoutR_tags_objectsInput, tagsUncheckedCreateWithoutR_tags_objectsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_objectsInput
    upsert?: tagsUpsertWithoutR_tags_objectsInput
    connect?: tagsWhereUniqueInput
    update?: XOR<XOR<tagsUpdateToOneWithWhereWithoutR_tags_objectsInput, tagsUpdateWithoutR_tags_objectsInput>, tagsUncheckedUpdateWithoutR_tags_objectsInput>
  }

  export type product_typesCreateNestedOneWithoutR_tags_product_typesInput = {
    create?: XOR<product_typesCreateWithoutR_tags_product_typesInput, product_typesUncheckedCreateWithoutR_tags_product_typesInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutR_tags_product_typesInput
    connect?: product_typesWhereUniqueInput
  }

  export type tagsCreateNestedOneWithoutR_tags_product_typesInput = {
    create?: XOR<tagsCreateWithoutR_tags_product_typesInput, tagsUncheckedCreateWithoutR_tags_product_typesInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_product_typesInput
    connect?: tagsWhereUniqueInput
  }

  export type product_typesUpdateOneRequiredWithoutR_tags_product_typesNestedInput = {
    create?: XOR<product_typesCreateWithoutR_tags_product_typesInput, product_typesUncheckedCreateWithoutR_tags_product_typesInput>
    connectOrCreate?: product_typesCreateOrConnectWithoutR_tags_product_typesInput
    upsert?: product_typesUpsertWithoutR_tags_product_typesInput
    connect?: product_typesWhereUniqueInput
    update?: XOR<XOR<product_typesUpdateToOneWithWhereWithoutR_tags_product_typesInput, product_typesUpdateWithoutR_tags_product_typesInput>, product_typesUncheckedUpdateWithoutR_tags_product_typesInput>
  }

  export type tagsUpdateOneRequiredWithoutR_tags_product_typesNestedInput = {
    create?: XOR<tagsCreateWithoutR_tags_product_typesInput, tagsUncheckedCreateWithoutR_tags_product_typesInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_product_typesInput
    upsert?: tagsUpsertWithoutR_tags_product_typesInput
    connect?: tagsWhereUniqueInput
    update?: XOR<XOR<tagsUpdateToOneWithWhereWithoutR_tags_product_typesInput, tagsUpdateWithoutR_tags_product_typesInput>, tagsUncheckedUpdateWithoutR_tags_product_typesInput>
  }

  export type productsCreateNestedOneWithoutR_tags_productsInput = {
    create?: XOR<productsCreateWithoutR_tags_productsInput, productsUncheckedCreateWithoutR_tags_productsInput>
    connectOrCreate?: productsCreateOrConnectWithoutR_tags_productsInput
    connect?: productsWhereUniqueInput
  }

  export type tagsCreateNestedOneWithoutR_tags_productsInput = {
    create?: XOR<tagsCreateWithoutR_tags_productsInput, tagsUncheckedCreateWithoutR_tags_productsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_productsInput
    connect?: tagsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutR_tags_productsNestedInput = {
    create?: XOR<productsCreateWithoutR_tags_productsInput, productsUncheckedCreateWithoutR_tags_productsInput>
    connectOrCreate?: productsCreateOrConnectWithoutR_tags_productsInput
    upsert?: productsUpsertWithoutR_tags_productsInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutR_tags_productsInput, productsUpdateWithoutR_tags_productsInput>, productsUncheckedUpdateWithoutR_tags_productsInput>
  }

  export type tagsUpdateOneRequiredWithoutR_tags_productsNestedInput = {
    create?: XOR<tagsCreateWithoutR_tags_productsInput, tagsUncheckedCreateWithoutR_tags_productsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_productsInput
    upsert?: tagsUpsertWithoutR_tags_productsInput
    connect?: tagsWhereUniqueInput
    update?: XOR<XOR<tagsUpdateToOneWithWhereWithoutR_tags_productsInput, tagsUpdateWithoutR_tags_productsInput>, tagsUncheckedUpdateWithoutR_tags_productsInput>
  }

  export type projectsCreateNestedOneWithoutR_tags_projectsInput = {
    create?: XOR<projectsCreateWithoutR_tags_projectsInput, projectsUncheckedCreateWithoutR_tags_projectsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutR_tags_projectsInput
    connect?: projectsWhereUniqueInput
  }

  export type tagsCreateNestedOneWithoutR_tags_projectsInput = {
    create?: XOR<tagsCreateWithoutR_tags_projectsInput, tagsUncheckedCreateWithoutR_tags_projectsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_projectsInput
    connect?: tagsWhereUniqueInput
  }

  export type projectsUpdateOneRequiredWithoutR_tags_projectsNestedInput = {
    create?: XOR<projectsCreateWithoutR_tags_projectsInput, projectsUncheckedCreateWithoutR_tags_projectsInput>
    connectOrCreate?: projectsCreateOrConnectWithoutR_tags_projectsInput
    upsert?: projectsUpsertWithoutR_tags_projectsInput
    connect?: projectsWhereUniqueInput
    update?: XOR<XOR<projectsUpdateToOneWithWhereWithoutR_tags_projectsInput, projectsUpdateWithoutR_tags_projectsInput>, projectsUncheckedUpdateWithoutR_tags_projectsInput>
  }

  export type tagsUpdateOneRequiredWithoutR_tags_projectsNestedInput = {
    create?: XOR<tagsCreateWithoutR_tags_projectsInput, tagsUncheckedCreateWithoutR_tags_projectsInput>
    connectOrCreate?: tagsCreateOrConnectWithoutR_tags_projectsInput
    upsert?: tagsUpsertWithoutR_tags_projectsInput
    connect?: tagsWhereUniqueInput
    update?: XOR<XOR<tagsUpdateToOneWithWhereWithoutR_tags_projectsInput, tagsUpdateWithoutR_tags_projectsInput>, tagsUncheckedUpdateWithoutR_tags_projectsInput>
  }

  export type floorsCreateNestedManyWithoutSectionsInput = {
    create?: XOR<floorsCreateWithoutSectionsInput, floorsUncheckedCreateWithoutSectionsInput> | floorsCreateWithoutSectionsInput[] | floorsUncheckedCreateWithoutSectionsInput[]
    connectOrCreate?: floorsCreateOrConnectWithoutSectionsInput | floorsCreateOrConnectWithoutSectionsInput[]
    createMany?: floorsCreateManySectionsInputEnvelope
    connect?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
  }

  export type objectsCreateNestedOneWithoutSectionsInput = {
    create?: XOR<objectsCreateWithoutSectionsInput, objectsUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: objectsCreateOrConnectWithoutSectionsInput
    connect?: objectsWhereUniqueInput
  }

  export type floorsUncheckedCreateNestedManyWithoutSectionsInput = {
    create?: XOR<floorsCreateWithoutSectionsInput, floorsUncheckedCreateWithoutSectionsInput> | floorsCreateWithoutSectionsInput[] | floorsUncheckedCreateWithoutSectionsInput[]
    connectOrCreate?: floorsCreateOrConnectWithoutSectionsInput | floorsCreateOrConnectWithoutSectionsInput[]
    createMany?: floorsCreateManySectionsInputEnvelope
    connect?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
  }

  export type floorsUpdateManyWithoutSectionsNestedInput = {
    create?: XOR<floorsCreateWithoutSectionsInput, floorsUncheckedCreateWithoutSectionsInput> | floorsCreateWithoutSectionsInput[] | floorsUncheckedCreateWithoutSectionsInput[]
    connectOrCreate?: floorsCreateOrConnectWithoutSectionsInput | floorsCreateOrConnectWithoutSectionsInput[]
    upsert?: floorsUpsertWithWhereUniqueWithoutSectionsInput | floorsUpsertWithWhereUniqueWithoutSectionsInput[]
    createMany?: floorsCreateManySectionsInputEnvelope
    set?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    disconnect?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    delete?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    connect?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    update?: floorsUpdateWithWhereUniqueWithoutSectionsInput | floorsUpdateWithWhereUniqueWithoutSectionsInput[]
    updateMany?: floorsUpdateManyWithWhereWithoutSectionsInput | floorsUpdateManyWithWhereWithoutSectionsInput[]
    deleteMany?: floorsScalarWhereInput | floorsScalarWhereInput[]
  }

  export type objectsUpdateOneRequiredWithoutSectionsNestedInput = {
    create?: XOR<objectsCreateWithoutSectionsInput, objectsUncheckedCreateWithoutSectionsInput>
    connectOrCreate?: objectsCreateOrConnectWithoutSectionsInput
    upsert?: objectsUpsertWithoutSectionsInput
    connect?: objectsWhereUniqueInput
    update?: XOR<XOR<objectsUpdateToOneWithWhereWithoutSectionsInput, objectsUpdateWithoutSectionsInput>, objectsUncheckedUpdateWithoutSectionsInput>
  }

  export type floorsUncheckedUpdateManyWithoutSectionsNestedInput = {
    create?: XOR<floorsCreateWithoutSectionsInput, floorsUncheckedCreateWithoutSectionsInput> | floorsCreateWithoutSectionsInput[] | floorsUncheckedCreateWithoutSectionsInput[]
    connectOrCreate?: floorsCreateOrConnectWithoutSectionsInput | floorsCreateOrConnectWithoutSectionsInput[]
    upsert?: floorsUpsertWithWhereUniqueWithoutSectionsInput | floorsUpsertWithWhereUniqueWithoutSectionsInput[]
    createMany?: floorsCreateManySectionsInputEnvelope
    set?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    disconnect?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    delete?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    connect?: floorsWhereUniqueInput | floorsWhereUniqueInput[]
    update?: floorsUpdateWithWhereUniqueWithoutSectionsInput | floorsUpdateWithWhereUniqueWithoutSectionsInput[]
    updateMany?: floorsUpdateManyWithWhereWithoutSectionsInput | floorsUpdateManyWithWhereWithoutSectionsInput[]
    deleteMany?: floorsScalarWhereInput | floorsScalarWhereInput[]
  }

  export type r_product_tagsCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_product_tagsCreateWithoutTagsInput, r_product_tagsUncheckedCreateWithoutTagsInput> | r_product_tagsCreateWithoutTagsInput[] | r_product_tagsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutTagsInput | r_product_tagsCreateOrConnectWithoutTagsInput[]
    createMany?: r_product_tagsCreateManyTagsInputEnvelope
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
  }

  export type r_tags_categoriesCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_categoriesCreateWithoutTagsInput, r_tags_categoriesUncheckedCreateWithoutTagsInput> | r_tags_categoriesCreateWithoutTagsInput[] | r_tags_categoriesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutTagsInput | r_tags_categoriesCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_categoriesCreateManyTagsInputEnvelope
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
  }

  export type r_tags_objectsCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_objectsCreateWithoutTagsInput, r_tags_objectsUncheckedCreateWithoutTagsInput> | r_tags_objectsCreateWithoutTagsInput[] | r_tags_objectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutTagsInput | r_tags_objectsCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_objectsCreateManyTagsInputEnvelope
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
  }

  export type r_tags_product_typesCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_product_typesCreateWithoutTagsInput, r_tags_product_typesUncheckedCreateWithoutTagsInput> | r_tags_product_typesCreateWithoutTagsInput[] | r_tags_product_typesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutTagsInput | r_tags_product_typesCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_product_typesCreateManyTagsInputEnvelope
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
  }

  export type r_tags_productsCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_productsCreateWithoutTagsInput, r_tags_productsUncheckedCreateWithoutTagsInput> | r_tags_productsCreateWithoutTagsInput[] | r_tags_productsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutTagsInput | r_tags_productsCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_productsCreateManyTagsInputEnvelope
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
  }

  export type r_tags_projectsCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_projectsCreateWithoutTagsInput, r_tags_projectsUncheckedCreateWithoutTagsInput> | r_tags_projectsCreateWithoutTagsInput[] | r_tags_projectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutTagsInput | r_tags_projectsCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_projectsCreateManyTagsInputEnvelope
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
  }

  export type r_product_tagsUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_product_tagsCreateWithoutTagsInput, r_product_tagsUncheckedCreateWithoutTagsInput> | r_product_tagsCreateWithoutTagsInput[] | r_product_tagsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutTagsInput | r_product_tagsCreateOrConnectWithoutTagsInput[]
    createMany?: r_product_tagsCreateManyTagsInputEnvelope
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
  }

  export type r_tags_categoriesUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_categoriesCreateWithoutTagsInput, r_tags_categoriesUncheckedCreateWithoutTagsInput> | r_tags_categoriesCreateWithoutTagsInput[] | r_tags_categoriesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutTagsInput | r_tags_categoriesCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_categoriesCreateManyTagsInputEnvelope
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
  }

  export type r_tags_objectsUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_objectsCreateWithoutTagsInput, r_tags_objectsUncheckedCreateWithoutTagsInput> | r_tags_objectsCreateWithoutTagsInput[] | r_tags_objectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutTagsInput | r_tags_objectsCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_objectsCreateManyTagsInputEnvelope
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
  }

  export type r_tags_product_typesUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_product_typesCreateWithoutTagsInput, r_tags_product_typesUncheckedCreateWithoutTagsInput> | r_tags_product_typesCreateWithoutTagsInput[] | r_tags_product_typesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutTagsInput | r_tags_product_typesCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_product_typesCreateManyTagsInputEnvelope
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
  }

  export type r_tags_productsUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_productsCreateWithoutTagsInput, r_tags_productsUncheckedCreateWithoutTagsInput> | r_tags_productsCreateWithoutTagsInput[] | r_tags_productsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutTagsInput | r_tags_productsCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_productsCreateManyTagsInputEnvelope
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
  }

  export type r_tags_projectsUncheckedCreateNestedManyWithoutTagsInput = {
    create?: XOR<r_tags_projectsCreateWithoutTagsInput, r_tags_projectsUncheckedCreateWithoutTagsInput> | r_tags_projectsCreateWithoutTagsInput[] | r_tags_projectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutTagsInput | r_tags_projectsCreateOrConnectWithoutTagsInput[]
    createMany?: r_tags_projectsCreateManyTagsInputEnvelope
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
  }

  export type r_product_tagsUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_product_tagsCreateWithoutTagsInput, r_product_tagsUncheckedCreateWithoutTagsInput> | r_product_tagsCreateWithoutTagsInput[] | r_product_tagsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutTagsInput | r_product_tagsCreateOrConnectWithoutTagsInput[]
    upsert?: r_product_tagsUpsertWithWhereUniqueWithoutTagsInput | r_product_tagsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_product_tagsCreateManyTagsInputEnvelope
    set?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    disconnect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    delete?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    update?: r_product_tagsUpdateWithWhereUniqueWithoutTagsInput | r_product_tagsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_product_tagsUpdateManyWithWhereWithoutTagsInput | r_product_tagsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_product_tagsScalarWhereInput | r_product_tagsScalarWhereInput[]
  }

  export type r_tags_categoriesUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_categoriesCreateWithoutTagsInput, r_tags_categoriesUncheckedCreateWithoutTagsInput> | r_tags_categoriesCreateWithoutTagsInput[] | r_tags_categoriesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutTagsInput | r_tags_categoriesCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_categoriesUpsertWithWhereUniqueWithoutTagsInput | r_tags_categoriesUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_categoriesCreateManyTagsInputEnvelope
    set?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    disconnect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    delete?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    update?: r_tags_categoriesUpdateWithWhereUniqueWithoutTagsInput | r_tags_categoriesUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_categoriesUpdateManyWithWhereWithoutTagsInput | r_tags_categoriesUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_categoriesScalarWhereInput | r_tags_categoriesScalarWhereInput[]
  }

  export type r_tags_objectsUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_objectsCreateWithoutTagsInput, r_tags_objectsUncheckedCreateWithoutTagsInput> | r_tags_objectsCreateWithoutTagsInput[] | r_tags_objectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutTagsInput | r_tags_objectsCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_objectsUpsertWithWhereUniqueWithoutTagsInput | r_tags_objectsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_objectsCreateManyTagsInputEnvelope
    set?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    disconnect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    delete?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    update?: r_tags_objectsUpdateWithWhereUniqueWithoutTagsInput | r_tags_objectsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_objectsUpdateManyWithWhereWithoutTagsInput | r_tags_objectsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_objectsScalarWhereInput | r_tags_objectsScalarWhereInput[]
  }

  export type r_tags_product_typesUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_product_typesCreateWithoutTagsInput, r_tags_product_typesUncheckedCreateWithoutTagsInput> | r_tags_product_typesCreateWithoutTagsInput[] | r_tags_product_typesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutTagsInput | r_tags_product_typesCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_product_typesUpsertWithWhereUniqueWithoutTagsInput | r_tags_product_typesUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_product_typesCreateManyTagsInputEnvelope
    set?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    disconnect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    delete?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    update?: r_tags_product_typesUpdateWithWhereUniqueWithoutTagsInput | r_tags_product_typesUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_product_typesUpdateManyWithWhereWithoutTagsInput | r_tags_product_typesUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_product_typesScalarWhereInput | r_tags_product_typesScalarWhereInput[]
  }

  export type r_tags_productsUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_productsCreateWithoutTagsInput, r_tags_productsUncheckedCreateWithoutTagsInput> | r_tags_productsCreateWithoutTagsInput[] | r_tags_productsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutTagsInput | r_tags_productsCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_productsUpsertWithWhereUniqueWithoutTagsInput | r_tags_productsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_productsCreateManyTagsInputEnvelope
    set?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    disconnect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    delete?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    update?: r_tags_productsUpdateWithWhereUniqueWithoutTagsInput | r_tags_productsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_productsUpdateManyWithWhereWithoutTagsInput | r_tags_productsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_productsScalarWhereInput | r_tags_productsScalarWhereInput[]
  }

  export type r_tags_projectsUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_projectsCreateWithoutTagsInput, r_tags_projectsUncheckedCreateWithoutTagsInput> | r_tags_projectsCreateWithoutTagsInput[] | r_tags_projectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutTagsInput | r_tags_projectsCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_projectsUpsertWithWhereUniqueWithoutTagsInput | r_tags_projectsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_projectsCreateManyTagsInputEnvelope
    set?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    disconnect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    delete?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    update?: r_tags_projectsUpdateWithWhereUniqueWithoutTagsInput | r_tags_projectsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_projectsUpdateManyWithWhereWithoutTagsInput | r_tags_projectsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_projectsScalarWhereInput | r_tags_projectsScalarWhereInput[]
  }

  export type r_product_tagsUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_product_tagsCreateWithoutTagsInput, r_product_tagsUncheckedCreateWithoutTagsInput> | r_product_tagsCreateWithoutTagsInput[] | r_product_tagsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_product_tagsCreateOrConnectWithoutTagsInput | r_product_tagsCreateOrConnectWithoutTagsInput[]
    upsert?: r_product_tagsUpsertWithWhereUniqueWithoutTagsInput | r_product_tagsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_product_tagsCreateManyTagsInputEnvelope
    set?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    disconnect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    delete?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    connect?: r_product_tagsWhereUniqueInput | r_product_tagsWhereUniqueInput[]
    update?: r_product_tagsUpdateWithWhereUniqueWithoutTagsInput | r_product_tagsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_product_tagsUpdateManyWithWhereWithoutTagsInput | r_product_tagsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_product_tagsScalarWhereInput | r_product_tagsScalarWhereInput[]
  }

  export type r_tags_categoriesUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_categoriesCreateWithoutTagsInput, r_tags_categoriesUncheckedCreateWithoutTagsInput> | r_tags_categoriesCreateWithoutTagsInput[] | r_tags_categoriesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_categoriesCreateOrConnectWithoutTagsInput | r_tags_categoriesCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_categoriesUpsertWithWhereUniqueWithoutTagsInput | r_tags_categoriesUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_categoriesCreateManyTagsInputEnvelope
    set?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    disconnect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    delete?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    connect?: r_tags_categoriesWhereUniqueInput | r_tags_categoriesWhereUniqueInput[]
    update?: r_tags_categoriesUpdateWithWhereUniqueWithoutTagsInput | r_tags_categoriesUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_categoriesUpdateManyWithWhereWithoutTagsInput | r_tags_categoriesUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_categoriesScalarWhereInput | r_tags_categoriesScalarWhereInput[]
  }

  export type r_tags_objectsUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_objectsCreateWithoutTagsInput, r_tags_objectsUncheckedCreateWithoutTagsInput> | r_tags_objectsCreateWithoutTagsInput[] | r_tags_objectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_objectsCreateOrConnectWithoutTagsInput | r_tags_objectsCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_objectsUpsertWithWhereUniqueWithoutTagsInput | r_tags_objectsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_objectsCreateManyTagsInputEnvelope
    set?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    disconnect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    delete?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    connect?: r_tags_objectsWhereUniqueInput | r_tags_objectsWhereUniqueInput[]
    update?: r_tags_objectsUpdateWithWhereUniqueWithoutTagsInput | r_tags_objectsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_objectsUpdateManyWithWhereWithoutTagsInput | r_tags_objectsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_objectsScalarWhereInput | r_tags_objectsScalarWhereInput[]
  }

  export type r_tags_product_typesUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_product_typesCreateWithoutTagsInput, r_tags_product_typesUncheckedCreateWithoutTagsInput> | r_tags_product_typesCreateWithoutTagsInput[] | r_tags_product_typesUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_product_typesCreateOrConnectWithoutTagsInput | r_tags_product_typesCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_product_typesUpsertWithWhereUniqueWithoutTagsInput | r_tags_product_typesUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_product_typesCreateManyTagsInputEnvelope
    set?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    disconnect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    delete?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    connect?: r_tags_product_typesWhereUniqueInput | r_tags_product_typesWhereUniqueInput[]
    update?: r_tags_product_typesUpdateWithWhereUniqueWithoutTagsInput | r_tags_product_typesUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_product_typesUpdateManyWithWhereWithoutTagsInput | r_tags_product_typesUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_product_typesScalarWhereInput | r_tags_product_typesScalarWhereInput[]
  }

  export type r_tags_productsUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_productsCreateWithoutTagsInput, r_tags_productsUncheckedCreateWithoutTagsInput> | r_tags_productsCreateWithoutTagsInput[] | r_tags_productsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_productsCreateOrConnectWithoutTagsInput | r_tags_productsCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_productsUpsertWithWhereUniqueWithoutTagsInput | r_tags_productsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_productsCreateManyTagsInputEnvelope
    set?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    disconnect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    delete?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    connect?: r_tags_productsWhereUniqueInput | r_tags_productsWhereUniqueInput[]
    update?: r_tags_productsUpdateWithWhereUniqueWithoutTagsInput | r_tags_productsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_productsUpdateManyWithWhereWithoutTagsInput | r_tags_productsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_productsScalarWhereInput | r_tags_productsScalarWhereInput[]
  }

  export type r_tags_projectsUncheckedUpdateManyWithoutTagsNestedInput = {
    create?: XOR<r_tags_projectsCreateWithoutTagsInput, r_tags_projectsUncheckedCreateWithoutTagsInput> | r_tags_projectsCreateWithoutTagsInput[] | r_tags_projectsUncheckedCreateWithoutTagsInput[]
    connectOrCreate?: r_tags_projectsCreateOrConnectWithoutTagsInput | r_tags_projectsCreateOrConnectWithoutTagsInput[]
    upsert?: r_tags_projectsUpsertWithWhereUniqueWithoutTagsInput | r_tags_projectsUpsertWithWhereUniqueWithoutTagsInput[]
    createMany?: r_tags_projectsCreateManyTagsInputEnvelope
    set?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    disconnect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    delete?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    connect?: r_tags_projectsWhereUniqueInput | r_tags_projectsWhereUniqueInput[]
    update?: r_tags_projectsUpdateWithWhereUniqueWithoutTagsInput | r_tags_projectsUpdateWithWhereUniqueWithoutTagsInput[]
    updateMany?: r_tags_projectsUpdateManyWithWhereWithoutTagsInput | r_tags_projectsUpdateManyWithWhereWithoutTagsInput[]
    deleteMany?: r_tags_projectsScalarWhereInput | r_tags_projectsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumproduct_files_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.product_files_type | Enumproduct_files_typeFieldRefInput<$PrismaModel>
    in?: $Enums.product_files_type[]
    notIn?: $Enums.product_files_type[]
    not?: NestedEnumproduct_files_typeFilter<$PrismaModel> | $Enums.product_files_type
  }

  export type NestedEnumproduct_files_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.product_files_type | Enumproduct_files_typeFieldRefInput<$PrismaModel>
    in?: $Enums.product_files_type[]
    notIn?: $Enums.product_files_type[]
    not?: NestedEnumproduct_files_typeWithAggregatesFilter<$PrismaModel> | $Enums.product_files_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumproduct_files_typeFilter<$PrismaModel>
    _max?: NestedEnumproduct_files_typeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type floorsCreateWithoutFloor_pricing_rulesInput = {
    number: string
    sections: sectionsCreateNestedOneWithoutFloorsInput
    products?: productsCreateNestedManyWithoutFloorsInput
  }

  export type floorsUncheckedCreateWithoutFloor_pricing_rulesInput = {
    id?: number
    number: string
    section_id: number
    products?: productsUncheckedCreateNestedManyWithoutFloorsInput
  }

  export type floorsCreateOrConnectWithoutFloor_pricing_rulesInput = {
    where: floorsWhereUniqueInput
    create: XOR<floorsCreateWithoutFloor_pricing_rulesInput, floorsUncheckedCreateWithoutFloor_pricing_rulesInput>
  }

  export type product_typesCreateWithoutFloor_pricing_rulesInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    product_pricing_rules?: product_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    objects: objectsCreateNestedOneWithoutProduct_typesInput
    products?: productsCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateWithoutFloor_pricing_rulesInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_pricing_rules?: product_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    products?: productsUncheckedCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesCreateOrConnectWithoutFloor_pricing_rulesInput = {
    where: product_typesWhereUniqueInput
    create: XOR<product_typesCreateWithoutFloor_pricing_rulesInput, product_typesUncheckedCreateWithoutFloor_pricing_rulesInput>
  }

  export type floorsUpsertWithoutFloor_pricing_rulesInput = {
    update: XOR<floorsUpdateWithoutFloor_pricing_rulesInput, floorsUncheckedUpdateWithoutFloor_pricing_rulesInput>
    create: XOR<floorsCreateWithoutFloor_pricing_rulesInput, floorsUncheckedCreateWithoutFloor_pricing_rulesInput>
    where?: floorsWhereInput
  }

  export type floorsUpdateToOneWithWhereWithoutFloor_pricing_rulesInput = {
    where?: floorsWhereInput
    data: XOR<floorsUpdateWithoutFloor_pricing_rulesInput, floorsUncheckedUpdateWithoutFloor_pricing_rulesInput>
  }

  export type floorsUpdateWithoutFloor_pricing_rulesInput = {
    number?: StringFieldUpdateOperationsInput | string
    sections?: sectionsUpdateOneRequiredWithoutFloorsNestedInput
    products?: productsUpdateManyWithoutFloorsNestedInput
  }

  export type floorsUncheckedUpdateWithoutFloor_pricing_rulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    section_id?: IntFieldUpdateOperationsInput | number
    products?: productsUncheckedUpdateManyWithoutFloorsNestedInput
  }

  export type product_typesUpsertWithoutFloor_pricing_rulesInput = {
    update: XOR<product_typesUpdateWithoutFloor_pricing_rulesInput, product_typesUncheckedUpdateWithoutFloor_pricing_rulesInput>
    create: XOR<product_typesCreateWithoutFloor_pricing_rulesInput, product_typesUncheckedCreateWithoutFloor_pricing_rulesInput>
    where?: product_typesWhereInput
  }

  export type product_typesUpdateToOneWithWhereWithoutFloor_pricing_rulesInput = {
    where?: product_typesWhereInput
    data: XOR<product_typesUpdateWithoutFloor_pricing_rulesInput, product_typesUncheckedUpdateWithoutFloor_pricing_rulesInput>
  }

  export type product_typesUpdateWithoutFloor_pricing_rulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_pricing_rules?: product_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    objects?: objectsUpdateOneRequiredWithoutProduct_typesNestedInput
    products?: productsUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateWithoutFloor_pricing_rulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_pricing_rules?: product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    products?: productsUncheckedUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type floor_pricing_rulesCreateWithoutFloorsInput = {
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
    product_types: product_typesCreateNestedOneWithoutFloor_pricing_rulesInput
  }

  export type floor_pricing_rulesUncheckedCreateWithoutFloorsInput = {
    id?: number
    product_type_id: number
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesCreateOrConnectWithoutFloorsInput = {
    where: floor_pricing_rulesWhereUniqueInput
    create: XOR<floor_pricing_rulesCreateWithoutFloorsInput, floor_pricing_rulesUncheckedCreateWithoutFloorsInput>
  }

  export type floor_pricing_rulesCreateManyFloorsInputEnvelope = {
    data: floor_pricing_rulesCreateManyFloorsInput | floor_pricing_rulesCreateManyFloorsInput[]
    skipDuplicates?: boolean
  }

  export type sectionsCreateWithoutFloorsInput = {
    number: string
    objects: objectsCreateNestedOneWithoutSectionsInput
  }

  export type sectionsUncheckedCreateWithoutFloorsInput = {
    id?: number
    number: string
    object_id: number
  }

  export type sectionsCreateOrConnectWithoutFloorsInput = {
    where: sectionsWhereUniqueInput
    create: XOR<sectionsCreateWithoutFloorsInput, sectionsUncheckedCreateWithoutFloorsInput>
  }

  export type productsCreateWithoutFloorsInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutFloorsInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutFloorsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutFloorsInput, productsUncheckedCreateWithoutFloorsInput>
  }

  export type productsCreateManyFloorsInputEnvelope = {
    data: productsCreateManyFloorsInput | productsCreateManyFloorsInput[]
    skipDuplicates?: boolean
  }

  export type floor_pricing_rulesUpsertWithWhereUniqueWithoutFloorsInput = {
    where: floor_pricing_rulesWhereUniqueInput
    update: XOR<floor_pricing_rulesUpdateWithoutFloorsInput, floor_pricing_rulesUncheckedUpdateWithoutFloorsInput>
    create: XOR<floor_pricing_rulesCreateWithoutFloorsInput, floor_pricing_rulesUncheckedCreateWithoutFloorsInput>
  }

  export type floor_pricing_rulesUpdateWithWhereUniqueWithoutFloorsInput = {
    where: floor_pricing_rulesWhereUniqueInput
    data: XOR<floor_pricing_rulesUpdateWithoutFloorsInput, floor_pricing_rulesUncheckedUpdateWithoutFloorsInput>
  }

  export type floor_pricing_rulesUpdateManyWithWhereWithoutFloorsInput = {
    where: floor_pricing_rulesScalarWhereInput
    data: XOR<floor_pricing_rulesUpdateManyMutationInput, floor_pricing_rulesUncheckedUpdateManyWithoutFloorsInput>
  }

  export type floor_pricing_rulesScalarWhereInput = {
    AND?: floor_pricing_rulesScalarWhereInput | floor_pricing_rulesScalarWhereInput[]
    OR?: floor_pricing_rulesScalarWhereInput[]
    NOT?: floor_pricing_rulesScalarWhereInput | floor_pricing_rulesScalarWhereInput[]
    id?: IntFilter<"floor_pricing_rules"> | number
    floor_id?: IntFilter<"floor_pricing_rules"> | number
    product_type_id?: IntFilter<"floor_pricing_rules"> | number
    price_per_square_meter?: DecimalFilter<"floor_pricing_rules"> | Decimal | DecimalJsLike | number | string
  }

  export type sectionsUpsertWithoutFloorsInput = {
    update: XOR<sectionsUpdateWithoutFloorsInput, sectionsUncheckedUpdateWithoutFloorsInput>
    create: XOR<sectionsCreateWithoutFloorsInput, sectionsUncheckedCreateWithoutFloorsInput>
    where?: sectionsWhereInput
  }

  export type sectionsUpdateToOneWithWhereWithoutFloorsInput = {
    where?: sectionsWhereInput
    data: XOR<sectionsUpdateWithoutFloorsInput, sectionsUncheckedUpdateWithoutFloorsInput>
  }

  export type sectionsUpdateWithoutFloorsInput = {
    number?: StringFieldUpdateOperationsInput | string
    objects?: objectsUpdateOneRequiredWithoutSectionsNestedInput
  }

  export type sectionsUncheckedUpdateWithoutFloorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    object_id?: IntFieldUpdateOperationsInput | number
  }

  export type productsUpsertWithWhereUniqueWithoutFloorsInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutFloorsInput, productsUncheckedUpdateWithoutFloorsInput>
    create: XOR<productsCreateWithoutFloorsInput, productsUncheckedCreateWithoutFloorsInput>
  }

  export type productsUpdateWithWhereUniqueWithoutFloorsInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutFloorsInput, productsUncheckedUpdateWithoutFloorsInput>
  }

  export type productsUpdateManyWithWhereWithoutFloorsInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutFloorsInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: IntFilter<"products"> | number
    number?: StringFilter<"products"> | string
    area?: DecimalFilter<"products"> | Decimal | DecimalJsLike | number | string
    price?: DecimalFilter<"products"> | Decimal | DecimalJsLike | number | string
    one_gt_id?: StringNullableFilter<"products"> | string | null
    created_at?: DateTimeFilter<"products"> | Date | string
    updated_at?: DateTimeFilter<"products"> | Date | string
    object_id?: IntFilter<"products"> | number
    product_type_id?: IntNullableFilter<"products"> | number | null
    category_id?: IntFilter<"products"> | number
    floor_id?: IntNullableFilter<"products"> | number | null
  }

  export type integrationsCreateWithoutIntegration_sourcesInput = {
    source_product_id: string
    products: productsCreateNestedOneWithoutIntegrationsInput
  }

  export type integrationsUncheckedCreateWithoutIntegration_sourcesInput = {
    id?: number
    product_id: number
    source_product_id: string
  }

  export type integrationsCreateOrConnectWithoutIntegration_sourcesInput = {
    where: integrationsWhereUniqueInput
    create: XOR<integrationsCreateWithoutIntegration_sourcesInput, integrationsUncheckedCreateWithoutIntegration_sourcesInput>
  }

  export type integrationsCreateManyIntegration_sourcesInputEnvelope = {
    data: integrationsCreateManyIntegration_sourcesInput | integrationsCreateManyIntegration_sourcesInput[]
    skipDuplicates?: boolean
  }

  export type integrationsUpsertWithWhereUniqueWithoutIntegration_sourcesInput = {
    where: integrationsWhereUniqueInput
    update: XOR<integrationsUpdateWithoutIntegration_sourcesInput, integrationsUncheckedUpdateWithoutIntegration_sourcesInput>
    create: XOR<integrationsCreateWithoutIntegration_sourcesInput, integrationsUncheckedCreateWithoutIntegration_sourcesInput>
  }

  export type integrationsUpdateWithWhereUniqueWithoutIntegration_sourcesInput = {
    where: integrationsWhereUniqueInput
    data: XOR<integrationsUpdateWithoutIntegration_sourcesInput, integrationsUncheckedUpdateWithoutIntegration_sourcesInput>
  }

  export type integrationsUpdateManyWithWhereWithoutIntegration_sourcesInput = {
    where: integrationsScalarWhereInput
    data: XOR<integrationsUpdateManyMutationInput, integrationsUncheckedUpdateManyWithoutIntegration_sourcesInput>
  }

  export type integrationsScalarWhereInput = {
    AND?: integrationsScalarWhereInput | integrationsScalarWhereInput[]
    OR?: integrationsScalarWhereInput[]
    NOT?: integrationsScalarWhereInput | integrationsScalarWhereInput[]
    id?: IntFilter<"integrations"> | number
    product_id?: IntFilter<"integrations"> | number
    source_id?: IntFilter<"integrations"> | number
    source_product_id?: StringFilter<"integrations"> | string
  }

  export type productsCreateWithoutIntegrationsInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutIntegrationsInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutIntegrationsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutIntegrationsInput, productsUncheckedCreateWithoutIntegrationsInput>
  }

  export type integration_sourcesCreateWithoutIntegrationsInput = {
    name: string
  }

  export type integration_sourcesUncheckedCreateWithoutIntegrationsInput = {
    id?: number
    name: string
  }

  export type integration_sourcesCreateOrConnectWithoutIntegrationsInput = {
    where: integration_sourcesWhereUniqueInput
    create: XOR<integration_sourcesCreateWithoutIntegrationsInput, integration_sourcesUncheckedCreateWithoutIntegrationsInput>
  }

  export type productsUpsertWithoutIntegrationsInput = {
    update: XOR<productsUpdateWithoutIntegrationsInput, productsUncheckedUpdateWithoutIntegrationsInput>
    create: XOR<productsCreateWithoutIntegrationsInput, productsUncheckedCreateWithoutIntegrationsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutIntegrationsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutIntegrationsInput, productsUncheckedUpdateWithoutIntegrationsInput>
  }

  export type productsUpdateWithoutIntegrationsInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutIntegrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type integration_sourcesUpsertWithoutIntegrationsInput = {
    update: XOR<integration_sourcesUpdateWithoutIntegrationsInput, integration_sourcesUncheckedUpdateWithoutIntegrationsInput>
    create: XOR<integration_sourcesCreateWithoutIntegrationsInput, integration_sourcesUncheckedCreateWithoutIntegrationsInput>
    where?: integration_sourcesWhereInput
  }

  export type integration_sourcesUpdateToOneWithWhereWithoutIntegrationsInput = {
    where?: integration_sourcesWhereInput
    data: XOR<integration_sourcesUpdateWithoutIntegrationsInput, integration_sourcesUncheckedUpdateWithoutIntegrationsInput>
  }

  export type integration_sourcesUpdateWithoutIntegrationsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type integration_sourcesUncheckedUpdateWithoutIntegrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type product_typesCreateWithoutObjectsInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    products?: productsCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateWithoutObjectsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    products?: productsUncheckedCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesCreateOrConnectWithoutObjectsInput = {
    where: product_typesWhereUniqueInput
    create: XOR<product_typesCreateWithoutObjectsInput, product_typesUncheckedCreateWithoutObjectsInput>
  }

  export type product_typesCreateManyObjectsInputEnvelope = {
    data: product_typesCreateManyObjectsInput | product_typesCreateManyObjectsInput[]
    skipDuplicates?: boolean
  }

  export type productsCreateWithoutObjectsInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutObjectsInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutObjectsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutObjectsInput, productsUncheckedCreateWithoutObjectsInput>
  }

  export type productsCreateManyObjectsInputEnvelope = {
    data: productsCreateManyObjectsInput | productsCreateManyObjectsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_objectsCreateWithoutObjectsInput = {
    tags: tagsCreateNestedOneWithoutR_tags_objectsInput
  }

  export type r_tags_objectsUncheckedCreateWithoutObjectsInput = {
    id?: number
    tag_id: number
  }

  export type r_tags_objectsCreateOrConnectWithoutObjectsInput = {
    where: r_tags_objectsWhereUniqueInput
    create: XOR<r_tags_objectsCreateWithoutObjectsInput, r_tags_objectsUncheckedCreateWithoutObjectsInput>
  }

  export type r_tags_objectsCreateManyObjectsInputEnvelope = {
    data: r_tags_objectsCreateManyObjectsInput | r_tags_objectsCreateManyObjectsInput[]
    skipDuplicates?: boolean
  }

  export type sectionsCreateWithoutObjectsInput = {
    number: string
    floors?: floorsCreateNestedManyWithoutSectionsInput
  }

  export type sectionsUncheckedCreateWithoutObjectsInput = {
    id?: number
    number: string
    floors?: floorsUncheckedCreateNestedManyWithoutSectionsInput
  }

  export type sectionsCreateOrConnectWithoutObjectsInput = {
    where: sectionsWhereUniqueInput
    create: XOR<sectionsCreateWithoutObjectsInput, sectionsUncheckedCreateWithoutObjectsInput>
  }

  export type sectionsCreateManyObjectsInputEnvelope = {
    data: sectionsCreateManyObjectsInput | sectionsCreateManyObjectsInput[]
    skipDuplicates?: boolean
  }

  export type product_typesUpsertWithWhereUniqueWithoutObjectsInput = {
    where: product_typesWhereUniqueInput
    update: XOR<product_typesUpdateWithoutObjectsInput, product_typesUncheckedUpdateWithoutObjectsInput>
    create: XOR<product_typesCreateWithoutObjectsInput, product_typesUncheckedCreateWithoutObjectsInput>
  }

  export type product_typesUpdateWithWhereUniqueWithoutObjectsInput = {
    where: product_typesWhereUniqueInput
    data: XOR<product_typesUpdateWithoutObjectsInput, product_typesUncheckedUpdateWithoutObjectsInput>
  }

  export type product_typesUpdateManyWithWhereWithoutObjectsInput = {
    where: product_typesScalarWhereInput
    data: XOR<product_typesUpdateManyMutationInput, product_typesUncheckedUpdateManyWithoutObjectsInput>
  }

  export type product_typesScalarWhereInput = {
    AND?: product_typesScalarWhereInput | product_typesScalarWhereInput[]
    OR?: product_typesScalarWhereInput[]
    NOT?: product_typesScalarWhereInput | product_typesScalarWhereInput[]
    id?: IntFilter<"product_types"> | number
    name?: StringFilter<"product_types"> | string
    created_at?: DateTimeFilter<"product_types"> | Date | string
    updated_at?: DateTimeFilter<"product_types"> | Date | string
    object_id?: IntFilter<"product_types"> | number
  }

  export type productsUpsertWithWhereUniqueWithoutObjectsInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutObjectsInput, productsUncheckedUpdateWithoutObjectsInput>
    create: XOR<productsCreateWithoutObjectsInput, productsUncheckedCreateWithoutObjectsInput>
  }

  export type productsUpdateWithWhereUniqueWithoutObjectsInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutObjectsInput, productsUncheckedUpdateWithoutObjectsInput>
  }

  export type productsUpdateManyWithWhereWithoutObjectsInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutObjectsInput>
  }

  export type r_tags_objectsUpsertWithWhereUniqueWithoutObjectsInput = {
    where: r_tags_objectsWhereUniqueInput
    update: XOR<r_tags_objectsUpdateWithoutObjectsInput, r_tags_objectsUncheckedUpdateWithoutObjectsInput>
    create: XOR<r_tags_objectsCreateWithoutObjectsInput, r_tags_objectsUncheckedCreateWithoutObjectsInput>
  }

  export type r_tags_objectsUpdateWithWhereUniqueWithoutObjectsInput = {
    where: r_tags_objectsWhereUniqueInput
    data: XOR<r_tags_objectsUpdateWithoutObjectsInput, r_tags_objectsUncheckedUpdateWithoutObjectsInput>
  }

  export type r_tags_objectsUpdateManyWithWhereWithoutObjectsInput = {
    where: r_tags_objectsScalarWhereInput
    data: XOR<r_tags_objectsUpdateManyMutationInput, r_tags_objectsUncheckedUpdateManyWithoutObjectsInput>
  }

  export type r_tags_objectsScalarWhereInput = {
    AND?: r_tags_objectsScalarWhereInput | r_tags_objectsScalarWhereInput[]
    OR?: r_tags_objectsScalarWhereInput[]
    NOT?: r_tags_objectsScalarWhereInput | r_tags_objectsScalarWhereInput[]
    id?: IntFilter<"r_tags_objects"> | number
    tag_id?: IntFilter<"r_tags_objects"> | number
    object_id?: IntFilter<"r_tags_objects"> | number
  }

  export type sectionsUpsertWithWhereUniqueWithoutObjectsInput = {
    where: sectionsWhereUniqueInput
    update: XOR<sectionsUpdateWithoutObjectsInput, sectionsUncheckedUpdateWithoutObjectsInput>
    create: XOR<sectionsCreateWithoutObjectsInput, sectionsUncheckedCreateWithoutObjectsInput>
  }

  export type sectionsUpdateWithWhereUniqueWithoutObjectsInput = {
    where: sectionsWhereUniqueInput
    data: XOR<sectionsUpdateWithoutObjectsInput, sectionsUncheckedUpdateWithoutObjectsInput>
  }

  export type sectionsUpdateManyWithWhereWithoutObjectsInput = {
    where: sectionsScalarWhereInput
    data: XOR<sectionsUpdateManyMutationInput, sectionsUncheckedUpdateManyWithoutObjectsInput>
  }

  export type sectionsScalarWhereInput = {
    AND?: sectionsScalarWhereInput | sectionsScalarWhereInput[]
    OR?: sectionsScalarWhereInput[]
    NOT?: sectionsScalarWhereInput | sectionsScalarWhereInput[]
    id?: IntFilter<"sections"> | number
    number?: StringFilter<"sections"> | string
    object_id?: IntFilter<"sections"> | number
  }

  export type productsCreateWithoutProduct_categoriesInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_categoriesInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProduct_categoriesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_categoriesInput, productsUncheckedCreateWithoutProduct_categoriesInput>
  }

  export type productsCreateManyProduct_categoriesInputEnvelope = {
    data: productsCreateManyProduct_categoriesInput | productsCreateManyProduct_categoriesInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_categoriesCreateWithoutProduct_categoriesInput = {
    tags: tagsCreateNestedOneWithoutR_tags_categoriesInput
  }

  export type r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput = {
    id?: number
    tag_id: number
  }

  export type r_tags_categoriesCreateOrConnectWithoutProduct_categoriesInput = {
    where: r_tags_categoriesWhereUniqueInput
    create: XOR<r_tags_categoriesCreateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput>
  }

  export type r_tags_categoriesCreateManyProduct_categoriesInputEnvelope = {
    data: r_tags_categoriesCreateManyProduct_categoriesInput | r_tags_categoriesCreateManyProduct_categoriesInput[]
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutProduct_categoriesInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutProduct_categoriesInput, productsUncheckedUpdateWithoutProduct_categoriesInput>
    create: XOR<productsCreateWithoutProduct_categoriesInput, productsUncheckedCreateWithoutProduct_categoriesInput>
  }

  export type productsUpdateWithWhereUniqueWithoutProduct_categoriesInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutProduct_categoriesInput, productsUncheckedUpdateWithoutProduct_categoriesInput>
  }

  export type productsUpdateManyWithWhereWithoutProduct_categoriesInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutProduct_categoriesInput>
  }

  export type r_tags_categoriesUpsertWithWhereUniqueWithoutProduct_categoriesInput = {
    where: r_tags_categoriesWhereUniqueInput
    update: XOR<r_tags_categoriesUpdateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedUpdateWithoutProduct_categoriesInput>
    create: XOR<r_tags_categoriesCreateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedCreateWithoutProduct_categoriesInput>
  }

  export type r_tags_categoriesUpdateWithWhereUniqueWithoutProduct_categoriesInput = {
    where: r_tags_categoriesWhereUniqueInput
    data: XOR<r_tags_categoriesUpdateWithoutProduct_categoriesInput, r_tags_categoriesUncheckedUpdateWithoutProduct_categoriesInput>
  }

  export type r_tags_categoriesUpdateManyWithWhereWithoutProduct_categoriesInput = {
    where: r_tags_categoriesScalarWhereInput
    data: XOR<r_tags_categoriesUpdateManyMutationInput, r_tags_categoriesUncheckedUpdateManyWithoutProduct_categoriesInput>
  }

  export type r_tags_categoriesScalarWhereInput = {
    AND?: r_tags_categoriesScalarWhereInput | r_tags_categoriesScalarWhereInput[]
    OR?: r_tags_categoriesScalarWhereInput[]
    NOT?: r_tags_categoriesScalarWhereInput | r_tags_categoriesScalarWhereInput[]
    id?: IntFilter<"r_tags_categories"> | number
    tag_id?: IntFilter<"r_tags_categories"> | number
    category_id?: IntFilter<"r_tags_categories"> | number
  }

  export type productsCreateWithoutProduct_filesInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_filesInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProduct_filesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_filesInput, productsUncheckedCreateWithoutProduct_filesInput>
  }

  export type productsUpsertWithoutProduct_filesInput = {
    update: XOR<productsUpdateWithoutProduct_filesInput, productsUncheckedUpdateWithoutProduct_filesInput>
    create: XOR<productsCreateWithoutProduct_filesInput, productsUncheckedCreateWithoutProduct_filesInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutProduct_filesInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutProduct_filesInput, productsUncheckedUpdateWithoutProduct_filesInput>
  }

  export type productsUpdateWithoutProduct_filesInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_filesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsCreateWithoutProduct_meter_numbersInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_meter_numbersInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProduct_meter_numbersInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_meter_numbersInput, productsUncheckedCreateWithoutProduct_meter_numbersInput>
  }

  export type productsUpsertWithoutProduct_meter_numbersInput = {
    update: XOR<productsUpdateWithoutProduct_meter_numbersInput, productsUncheckedUpdateWithoutProduct_meter_numbersInput>
    create: XOR<productsCreateWithoutProduct_meter_numbersInput, productsUncheckedCreateWithoutProduct_meter_numbersInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutProduct_meter_numbersInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutProduct_meter_numbersInput, productsUncheckedUpdateWithoutProduct_meter_numbersInput>
  }

  export type productsUpdateWithoutProduct_meter_numbersInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_meter_numbersInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsCreateWithoutProduct_price_historyInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_price_historyInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProduct_price_historyInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_price_historyInput, productsUncheckedCreateWithoutProduct_price_historyInput>
  }

  export type productsUpsertWithoutProduct_price_historyInput = {
    update: XOR<productsUpdateWithoutProduct_price_historyInput, productsUncheckedUpdateWithoutProduct_price_historyInput>
    create: XOR<productsCreateWithoutProduct_price_historyInput, productsUncheckedCreateWithoutProduct_price_historyInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutProduct_price_historyInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutProduct_price_historyInput, productsUncheckedUpdateWithoutProduct_price_historyInput>
  }

  export type productsUpdateWithoutProduct_price_historyInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_price_historyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type product_typesCreateWithoutProduct_pricing_rulesInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    objects: objectsCreateNestedOneWithoutProduct_typesInput
    products?: productsCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateWithoutProduct_pricing_rulesInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    products?: productsUncheckedCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesCreateOrConnectWithoutProduct_pricing_rulesInput = {
    where: product_typesWhereUniqueInput
    create: XOR<product_typesCreateWithoutProduct_pricing_rulesInput, product_typesUncheckedCreateWithoutProduct_pricing_rulesInput>
  }

  export type product_typesUpsertWithoutProduct_pricing_rulesInput = {
    update: XOR<product_typesUpdateWithoutProduct_pricing_rulesInput, product_typesUncheckedUpdateWithoutProduct_pricing_rulesInput>
    create: XOR<product_typesCreateWithoutProduct_pricing_rulesInput, product_typesUncheckedCreateWithoutProduct_pricing_rulesInput>
    where?: product_typesWhereInput
  }

  export type product_typesUpdateToOneWithWhereWithoutProduct_pricing_rulesInput = {
    where?: product_typesWhereInput
    data: XOR<product_typesUpdateWithoutProduct_pricing_rulesInput, product_typesUncheckedUpdateWithoutProduct_pricing_rulesInput>
  }

  export type product_typesUpdateWithoutProduct_pricing_rulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    objects?: objectsUpdateOneRequiredWithoutProduct_typesNestedInput
    products?: productsUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateWithoutProduct_pricing_rulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    products?: productsUncheckedUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type floor_pricing_rulesCreateWithoutProduct_typesInput = {
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
    floors: floorsCreateNestedOneWithoutFloor_pricing_rulesInput
  }

  export type floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput = {
    id?: number
    floor_id: number
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesCreateOrConnectWithoutProduct_typesInput = {
    where: floor_pricing_rulesWhereUniqueInput
    create: XOR<floor_pricing_rulesCreateWithoutProduct_typesInput, floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput>
  }

  export type floor_pricing_rulesCreateManyProduct_typesInputEnvelope = {
    data: floor_pricing_rulesCreateManyProduct_typesInput | floor_pricing_rulesCreateManyProduct_typesInput[]
    skipDuplicates?: boolean
  }

  export type product_pricing_rulesCreateWithoutProduct_typesInput = {
    step_number: number
    price_per_square_meter: Decimal | DecimalJsLike | number | string
    flats_percent: Decimal | DecimalJsLike | number | string
    planned_days: number
  }

  export type product_pricing_rulesUncheckedCreateWithoutProduct_typesInput = {
    id?: number
    step_number: number
    price_per_square_meter: Decimal | DecimalJsLike | number | string
    flats_percent: Decimal | DecimalJsLike | number | string
    planned_days: number
  }

  export type product_pricing_rulesCreateOrConnectWithoutProduct_typesInput = {
    where: product_pricing_rulesWhereUniqueInput
    create: XOR<product_pricing_rulesCreateWithoutProduct_typesInput, product_pricing_rulesUncheckedCreateWithoutProduct_typesInput>
  }

  export type product_pricing_rulesCreateManyProduct_typesInputEnvelope = {
    data: product_pricing_rulesCreateManyProduct_typesInput | product_pricing_rulesCreateManyProduct_typesInput[]
    skipDuplicates?: boolean
  }

  export type objectsCreateWithoutProduct_typesInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    products?: productsCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutObjectsInput
    sections?: sectionsCreateNestedManyWithoutObjectsInput
  }

  export type objectsUncheckedCreateWithoutProduct_typesInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    products?: productsUncheckedCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutObjectsInput
    sections?: sectionsUncheckedCreateNestedManyWithoutObjectsInput
  }

  export type objectsCreateOrConnectWithoutProduct_typesInput = {
    where: objectsWhereUniqueInput
    create: XOR<objectsCreateWithoutProduct_typesInput, objectsUncheckedCreateWithoutProduct_typesInput>
  }

  export type productsCreateWithoutProduct_typesInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutProduct_typesInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutProduct_typesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput>
  }

  export type productsCreateManyProduct_typesInputEnvelope = {
    data: productsCreateManyProduct_typesInput | productsCreateManyProduct_typesInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_product_typesCreateWithoutProduct_typesInput = {
    tags: tagsCreateNestedOneWithoutR_tags_product_typesInput
  }

  export type r_tags_product_typesUncheckedCreateWithoutProduct_typesInput = {
    id?: number
    tag_id: number
  }

  export type r_tags_product_typesCreateOrConnectWithoutProduct_typesInput = {
    where: r_tags_product_typesWhereUniqueInput
    create: XOR<r_tags_product_typesCreateWithoutProduct_typesInput, r_tags_product_typesUncheckedCreateWithoutProduct_typesInput>
  }

  export type r_tags_product_typesCreateManyProduct_typesInputEnvelope = {
    data: r_tags_product_typesCreateManyProduct_typesInput | r_tags_product_typesCreateManyProduct_typesInput[]
    skipDuplicates?: boolean
  }

  export type floor_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput = {
    where: floor_pricing_rulesWhereUniqueInput
    update: XOR<floor_pricing_rulesUpdateWithoutProduct_typesInput, floor_pricing_rulesUncheckedUpdateWithoutProduct_typesInput>
    create: XOR<floor_pricing_rulesCreateWithoutProduct_typesInput, floor_pricing_rulesUncheckedCreateWithoutProduct_typesInput>
  }

  export type floor_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput = {
    where: floor_pricing_rulesWhereUniqueInput
    data: XOR<floor_pricing_rulesUpdateWithoutProduct_typesInput, floor_pricing_rulesUncheckedUpdateWithoutProduct_typesInput>
  }

  export type floor_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput = {
    where: floor_pricing_rulesScalarWhereInput
    data: XOR<floor_pricing_rulesUpdateManyMutationInput, floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesInput>
  }

  export type product_pricing_rulesUpsertWithWhereUniqueWithoutProduct_typesInput = {
    where: product_pricing_rulesWhereUniqueInput
    update: XOR<product_pricing_rulesUpdateWithoutProduct_typesInput, product_pricing_rulesUncheckedUpdateWithoutProduct_typesInput>
    create: XOR<product_pricing_rulesCreateWithoutProduct_typesInput, product_pricing_rulesUncheckedCreateWithoutProduct_typesInput>
  }

  export type product_pricing_rulesUpdateWithWhereUniqueWithoutProduct_typesInput = {
    where: product_pricing_rulesWhereUniqueInput
    data: XOR<product_pricing_rulesUpdateWithoutProduct_typesInput, product_pricing_rulesUncheckedUpdateWithoutProduct_typesInput>
  }

  export type product_pricing_rulesUpdateManyWithWhereWithoutProduct_typesInput = {
    where: product_pricing_rulesScalarWhereInput
    data: XOR<product_pricing_rulesUpdateManyMutationInput, product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesInput>
  }

  export type product_pricing_rulesScalarWhereInput = {
    AND?: product_pricing_rulesScalarWhereInput | product_pricing_rulesScalarWhereInput[]
    OR?: product_pricing_rulesScalarWhereInput[]
    NOT?: product_pricing_rulesScalarWhereInput | product_pricing_rulesScalarWhereInput[]
    id?: IntFilter<"product_pricing_rules"> | number
    product_type_id?: IntFilter<"product_pricing_rules"> | number
    step_number?: IntFilter<"product_pricing_rules"> | number
    price_per_square_meter?: DecimalFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFilter<"product_pricing_rules"> | Decimal | DecimalJsLike | number | string
    planned_days?: IntFilter<"product_pricing_rules"> | number
  }

  export type objectsUpsertWithoutProduct_typesInput = {
    update: XOR<objectsUpdateWithoutProduct_typesInput, objectsUncheckedUpdateWithoutProduct_typesInput>
    create: XOR<objectsCreateWithoutProduct_typesInput, objectsUncheckedCreateWithoutProduct_typesInput>
    where?: objectsWhereInput
  }

  export type objectsUpdateToOneWithWhereWithoutProduct_typesInput = {
    where?: objectsWhereInput
    data: XOR<objectsUpdateWithoutProduct_typesInput, objectsUncheckedUpdateWithoutProduct_typesInput>
  }

  export type objectsUpdateWithoutProduct_typesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    products?: productsUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUpdateManyWithoutObjectsNestedInput
  }

  export type objectsUncheckedUpdateWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    products?: productsUncheckedUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUncheckedUpdateManyWithoutObjectsNestedInput
  }

  export type productsUpsertWithWhereUniqueWithoutProduct_typesInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutProduct_typesInput, productsUncheckedUpdateWithoutProduct_typesInput>
    create: XOR<productsCreateWithoutProduct_typesInput, productsUncheckedCreateWithoutProduct_typesInput>
  }

  export type productsUpdateWithWhereUniqueWithoutProduct_typesInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutProduct_typesInput, productsUncheckedUpdateWithoutProduct_typesInput>
  }

  export type productsUpdateManyWithWhereWithoutProduct_typesInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutProduct_typesInput>
  }

  export type r_tags_product_typesUpsertWithWhereUniqueWithoutProduct_typesInput = {
    where: r_tags_product_typesWhereUniqueInput
    update: XOR<r_tags_product_typesUpdateWithoutProduct_typesInput, r_tags_product_typesUncheckedUpdateWithoutProduct_typesInput>
    create: XOR<r_tags_product_typesCreateWithoutProduct_typesInput, r_tags_product_typesUncheckedCreateWithoutProduct_typesInput>
  }

  export type r_tags_product_typesUpdateWithWhereUniqueWithoutProduct_typesInput = {
    where: r_tags_product_typesWhereUniqueInput
    data: XOR<r_tags_product_typesUpdateWithoutProduct_typesInput, r_tags_product_typesUncheckedUpdateWithoutProduct_typesInput>
  }

  export type r_tags_product_typesUpdateManyWithWhereWithoutProduct_typesInput = {
    where: r_tags_product_typesScalarWhereInput
    data: XOR<r_tags_product_typesUpdateManyMutationInput, r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesInput>
  }

  export type r_tags_product_typesScalarWhereInput = {
    AND?: r_tags_product_typesScalarWhereInput | r_tags_product_typesScalarWhereInput[]
    OR?: r_tags_product_typesScalarWhereInput[]
    NOT?: r_tags_product_typesScalarWhereInput | r_tags_product_typesScalarWhereInput[]
    id?: IntFilter<"r_tags_product_types"> | number
    tag_id?: IntFilter<"r_tags_product_types"> | number
    product_type_id?: IntFilter<"r_tags_product_types"> | number
  }

  export type integrationsCreateWithoutProductsInput = {
    source_product_id: string
    integration_sources: integration_sourcesCreateNestedOneWithoutIntegrationsInput
  }

  export type integrationsUncheckedCreateWithoutProductsInput = {
    id?: number
    source_id: number
    source_product_id: string
  }

  export type integrationsCreateOrConnectWithoutProductsInput = {
    where: integrationsWhereUniqueInput
    create: XOR<integrationsCreateWithoutProductsInput, integrationsUncheckedCreateWithoutProductsInput>
  }

  export type integrationsCreateManyProductsInputEnvelope = {
    data: integrationsCreateManyProductsInput | integrationsCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type product_filesCreateWithoutProductsInput = {
    type: $Enums.product_files_type
    path: string
  }

  export type product_filesUncheckedCreateWithoutProductsInput = {
    id?: number
    type: $Enums.product_files_type
    path: string
  }

  export type product_filesCreateOrConnectWithoutProductsInput = {
    where: product_filesWhereUniqueInput
    create: XOR<product_filesCreateWithoutProductsInput, product_filesUncheckedCreateWithoutProductsInput>
  }

  export type product_filesCreateManyProductsInputEnvelope = {
    data: product_filesCreateManyProductsInput | product_filesCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type product_meter_numbersCreateWithoutProductsInput = {
    electricity: string
    heating: string
    hot_water: string
    cold_water: string
  }

  export type product_meter_numbersUncheckedCreateWithoutProductsInput = {
    id?: number
    electricity: string
    heating: string
    hot_water: string
    cold_water: string
  }

  export type product_meter_numbersCreateOrConnectWithoutProductsInput = {
    where: product_meter_numbersWhereUniqueInput
    create: XOR<product_meter_numbersCreateWithoutProductsInput, product_meter_numbersUncheckedCreateWithoutProductsInput>
  }

  export type product_price_historyCreateWithoutProductsInput = {
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
  }

  export type product_price_historyUncheckedCreateWithoutProductsInput = {
    id?: number
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
  }

  export type product_price_historyCreateOrConnectWithoutProductsInput = {
    where: product_price_historyWhereUniqueInput
    create: XOR<product_price_historyCreateWithoutProductsInput, product_price_historyUncheckedCreateWithoutProductsInput>
  }

  export type product_price_historyCreateManyProductsInputEnvelope = {
    data: product_price_historyCreateManyProductsInput | product_price_historyCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type floorsCreateWithoutProductsInput = {
    number: string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutFloorsInput
    sections: sectionsCreateNestedOneWithoutFloorsInput
  }

  export type floorsUncheckedCreateWithoutProductsInput = {
    id?: number
    number: string
    section_id: number
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutFloorsInput
  }

  export type floorsCreateOrConnectWithoutProductsInput = {
    where: floorsWhereUniqueInput
    create: XOR<floorsCreateWithoutProductsInput, floorsUncheckedCreateWithoutProductsInput>
  }

  export type product_categoriesCreateWithoutProductsInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutProduct_categoriesInput
  }

  export type product_categoriesUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutProduct_categoriesInput
  }

  export type product_categoriesCreateOrConnectWithoutProductsInput = {
    where: product_categoriesWhereUniqueInput
    create: XOR<product_categoriesCreateWithoutProductsInput, product_categoriesUncheckedCreateWithoutProductsInput>
  }

  export type objectsCreateWithoutProductsInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutObjectsInput
    sections?: sectionsCreateNestedManyWithoutObjectsInput
  }

  export type objectsUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesUncheckedCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutObjectsInput
    sections?: sectionsUncheckedCreateNestedManyWithoutObjectsInput
  }

  export type objectsCreateOrConnectWithoutProductsInput = {
    where: objectsWhereUniqueInput
    create: XOR<objectsCreateWithoutProductsInput, objectsUncheckedCreateWithoutProductsInput>
  }

  export type product_typesCreateWithoutProductsInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    objects: objectsCreateNestedOneWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesCreateOrConnectWithoutProductsInput = {
    where: product_typesWhereUniqueInput
    create: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
  }

  export type r_product_tagsCreateWithoutProductsInput = {
    tags: tagsCreateNestedOneWithoutR_product_tagsInput
  }

  export type r_product_tagsUncheckedCreateWithoutProductsInput = {
    id?: number
    tag_id: number
  }

  export type r_product_tagsCreateOrConnectWithoutProductsInput = {
    where: r_product_tagsWhereUniqueInput
    create: XOR<r_product_tagsCreateWithoutProductsInput, r_product_tagsUncheckedCreateWithoutProductsInput>
  }

  export type r_product_tagsCreateManyProductsInputEnvelope = {
    data: r_product_tagsCreateManyProductsInput | r_product_tagsCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_productsCreateWithoutProductsInput = {
    tags: tagsCreateNestedOneWithoutR_tags_productsInput
  }

  export type r_tags_productsUncheckedCreateWithoutProductsInput = {
    id?: number
    tag_id: number
  }

  export type r_tags_productsCreateOrConnectWithoutProductsInput = {
    where: r_tags_productsWhereUniqueInput
    create: XOR<r_tags_productsCreateWithoutProductsInput, r_tags_productsUncheckedCreateWithoutProductsInput>
  }

  export type r_tags_productsCreateManyProductsInputEnvelope = {
    data: r_tags_productsCreateManyProductsInput | r_tags_productsCreateManyProductsInput[]
    skipDuplicates?: boolean
  }

  export type integrationsUpsertWithWhereUniqueWithoutProductsInput = {
    where: integrationsWhereUniqueInput
    update: XOR<integrationsUpdateWithoutProductsInput, integrationsUncheckedUpdateWithoutProductsInput>
    create: XOR<integrationsCreateWithoutProductsInput, integrationsUncheckedCreateWithoutProductsInput>
  }

  export type integrationsUpdateWithWhereUniqueWithoutProductsInput = {
    where: integrationsWhereUniqueInput
    data: XOR<integrationsUpdateWithoutProductsInput, integrationsUncheckedUpdateWithoutProductsInput>
  }

  export type integrationsUpdateManyWithWhereWithoutProductsInput = {
    where: integrationsScalarWhereInput
    data: XOR<integrationsUpdateManyMutationInput, integrationsUncheckedUpdateManyWithoutProductsInput>
  }

  export type product_filesUpsertWithWhereUniqueWithoutProductsInput = {
    where: product_filesWhereUniqueInput
    update: XOR<product_filesUpdateWithoutProductsInput, product_filesUncheckedUpdateWithoutProductsInput>
    create: XOR<product_filesCreateWithoutProductsInput, product_filesUncheckedCreateWithoutProductsInput>
  }

  export type product_filesUpdateWithWhereUniqueWithoutProductsInput = {
    where: product_filesWhereUniqueInput
    data: XOR<product_filesUpdateWithoutProductsInput, product_filesUncheckedUpdateWithoutProductsInput>
  }

  export type product_filesUpdateManyWithWhereWithoutProductsInput = {
    where: product_filesScalarWhereInput
    data: XOR<product_filesUpdateManyMutationInput, product_filesUncheckedUpdateManyWithoutProductsInput>
  }

  export type product_filesScalarWhereInput = {
    AND?: product_filesScalarWhereInput | product_filesScalarWhereInput[]
    OR?: product_filesScalarWhereInput[]
    NOT?: product_filesScalarWhereInput | product_filesScalarWhereInput[]
    id?: IntFilter<"product_files"> | number
    product_id?: IntFilter<"product_files"> | number
    type?: Enumproduct_files_typeFilter<"product_files"> | $Enums.product_files_type
    path?: StringFilter<"product_files"> | string
  }

  export type product_meter_numbersUpsertWithoutProductsInput = {
    update: XOR<product_meter_numbersUpdateWithoutProductsInput, product_meter_numbersUncheckedUpdateWithoutProductsInput>
    create: XOR<product_meter_numbersCreateWithoutProductsInput, product_meter_numbersUncheckedCreateWithoutProductsInput>
    where?: product_meter_numbersWhereInput
  }

  export type product_meter_numbersUpdateToOneWithWhereWithoutProductsInput = {
    where?: product_meter_numbersWhereInput
    data: XOR<product_meter_numbersUpdateWithoutProductsInput, product_meter_numbersUncheckedUpdateWithoutProductsInput>
  }

  export type product_meter_numbersUpdateWithoutProductsInput = {
    electricity?: StringFieldUpdateOperationsInput | string
    heating?: StringFieldUpdateOperationsInput | string
    hot_water?: StringFieldUpdateOperationsInput | string
    cold_water?: StringFieldUpdateOperationsInput | string
  }

  export type product_meter_numbersUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    electricity?: StringFieldUpdateOperationsInput | string
    heating?: StringFieldUpdateOperationsInput | string
    hot_water?: StringFieldUpdateOperationsInput | string
    cold_water?: StringFieldUpdateOperationsInput | string
  }

  export type product_price_historyUpsertWithWhereUniqueWithoutProductsInput = {
    where: product_price_historyWhereUniqueInput
    update: XOR<product_price_historyUpdateWithoutProductsInput, product_price_historyUncheckedUpdateWithoutProductsInput>
    create: XOR<product_price_historyCreateWithoutProductsInput, product_price_historyUncheckedCreateWithoutProductsInput>
  }

  export type product_price_historyUpdateWithWhereUniqueWithoutProductsInput = {
    where: product_price_historyWhereUniqueInput
    data: XOR<product_price_historyUpdateWithoutProductsInput, product_price_historyUncheckedUpdateWithoutProductsInput>
  }

  export type product_price_historyUpdateManyWithWhereWithoutProductsInput = {
    where: product_price_historyScalarWhereInput
    data: XOR<product_price_historyUpdateManyMutationInput, product_price_historyUncheckedUpdateManyWithoutProductsInput>
  }

  export type product_price_historyScalarWhereInput = {
    AND?: product_price_historyScalarWhereInput | product_price_historyScalarWhereInput[]
    OR?: product_price_historyScalarWhereInput[]
    NOT?: product_price_historyScalarWhereInput | product_price_historyScalarWhereInput[]
    id?: IntFilter<"product_price_history"> | number
    product_id?: IntFilter<"product_price_history"> | number
    price?: DecimalFilter<"product_price_history"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"product_price_history"> | Date | string
  }

  export type floorsUpsertWithoutProductsInput = {
    update: XOR<floorsUpdateWithoutProductsInput, floorsUncheckedUpdateWithoutProductsInput>
    create: XOR<floorsCreateWithoutProductsInput, floorsUncheckedCreateWithoutProductsInput>
    where?: floorsWhereInput
  }

  export type floorsUpdateToOneWithWhereWithoutProductsInput = {
    where?: floorsWhereInput
    data: XOR<floorsUpdateWithoutProductsInput, floorsUncheckedUpdateWithoutProductsInput>
  }

  export type floorsUpdateWithoutProductsInput = {
    number?: StringFieldUpdateOperationsInput | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutFloorsNestedInput
    sections?: sectionsUpdateOneRequiredWithoutFloorsNestedInput
  }

  export type floorsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    section_id?: IntFieldUpdateOperationsInput | number
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutFloorsNestedInput
  }

  export type product_categoriesUpsertWithoutProductsInput = {
    update: XOR<product_categoriesUpdateWithoutProductsInput, product_categoriesUncheckedUpdateWithoutProductsInput>
    create: XOR<product_categoriesCreateWithoutProductsInput, product_categoriesUncheckedCreateWithoutProductsInput>
    where?: product_categoriesWhereInput
  }

  export type product_categoriesUpdateToOneWithWhereWithoutProductsInput = {
    where?: product_categoriesWhereInput
    data: XOR<product_categoriesUpdateWithoutProductsInput, product_categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type product_categoriesUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutProduct_categoriesNestedInput
  }

  export type product_categoriesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutProduct_categoriesNestedInput
  }

  export type objectsUpsertWithoutProductsInput = {
    update: XOR<objectsUpdateWithoutProductsInput, objectsUncheckedUpdateWithoutProductsInput>
    create: XOR<objectsCreateWithoutProductsInput, objectsUncheckedCreateWithoutProductsInput>
    where?: objectsWhereInput
  }

  export type objectsUpdateToOneWithWhereWithoutProductsInput = {
    where?: objectsWhereInput
    data: XOR<objectsUpdateWithoutProductsInput, objectsUncheckedUpdateWithoutProductsInput>
  }

  export type objectsUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUpdateManyWithoutObjectsNestedInput
  }

  export type objectsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUncheckedUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUncheckedUpdateManyWithoutObjectsNestedInput
  }

  export type product_typesUpsertWithoutProductsInput = {
    update: XOR<product_typesUpdateWithoutProductsInput, product_typesUncheckedUpdateWithoutProductsInput>
    create: XOR<product_typesCreateWithoutProductsInput, product_typesUncheckedCreateWithoutProductsInput>
    where?: product_typesWhereInput
  }

  export type product_typesUpdateToOneWithWhereWithoutProductsInput = {
    where?: product_typesWhereInput
    data: XOR<product_typesUpdateWithoutProductsInput, product_typesUncheckedUpdateWithoutProductsInput>
  }

  export type product_typesUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    objects?: objectsUpdateOneRequiredWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type r_product_tagsUpsertWithWhereUniqueWithoutProductsInput = {
    where: r_product_tagsWhereUniqueInput
    update: XOR<r_product_tagsUpdateWithoutProductsInput, r_product_tagsUncheckedUpdateWithoutProductsInput>
    create: XOR<r_product_tagsCreateWithoutProductsInput, r_product_tagsUncheckedCreateWithoutProductsInput>
  }

  export type r_product_tagsUpdateWithWhereUniqueWithoutProductsInput = {
    where: r_product_tagsWhereUniqueInput
    data: XOR<r_product_tagsUpdateWithoutProductsInput, r_product_tagsUncheckedUpdateWithoutProductsInput>
  }

  export type r_product_tagsUpdateManyWithWhereWithoutProductsInput = {
    where: r_product_tagsScalarWhereInput
    data: XOR<r_product_tagsUpdateManyMutationInput, r_product_tagsUncheckedUpdateManyWithoutProductsInput>
  }

  export type r_product_tagsScalarWhereInput = {
    AND?: r_product_tagsScalarWhereInput | r_product_tagsScalarWhereInput[]
    OR?: r_product_tagsScalarWhereInput[]
    NOT?: r_product_tagsScalarWhereInput | r_product_tagsScalarWhereInput[]
    id?: IntFilter<"r_product_tags"> | number
    product_id?: IntFilter<"r_product_tags"> | number
    tag_id?: IntFilter<"r_product_tags"> | number
  }

  export type r_tags_productsUpsertWithWhereUniqueWithoutProductsInput = {
    where: r_tags_productsWhereUniqueInput
    update: XOR<r_tags_productsUpdateWithoutProductsInput, r_tags_productsUncheckedUpdateWithoutProductsInput>
    create: XOR<r_tags_productsCreateWithoutProductsInput, r_tags_productsUncheckedCreateWithoutProductsInput>
  }

  export type r_tags_productsUpdateWithWhereUniqueWithoutProductsInput = {
    where: r_tags_productsWhereUniqueInput
    data: XOR<r_tags_productsUpdateWithoutProductsInput, r_tags_productsUncheckedUpdateWithoutProductsInput>
  }

  export type r_tags_productsUpdateManyWithWhereWithoutProductsInput = {
    where: r_tags_productsScalarWhereInput
    data: XOR<r_tags_productsUpdateManyMutationInput, r_tags_productsUncheckedUpdateManyWithoutProductsInput>
  }

  export type r_tags_productsScalarWhereInput = {
    AND?: r_tags_productsScalarWhereInput | r_tags_productsScalarWhereInput[]
    OR?: r_tags_productsScalarWhereInput[]
    NOT?: r_tags_productsScalarWhereInput | r_tags_productsScalarWhereInput[]
    id?: IntFilter<"r_tags_products"> | number
    tag_id?: IntFilter<"r_tags_products"> | number
    product_id?: IntFilter<"r_tags_products"> | number
  }

  export type r_tags_projectsCreateWithoutProjectsInput = {
    tags: tagsCreateNestedOneWithoutR_tags_projectsInput
  }

  export type r_tags_projectsUncheckedCreateWithoutProjectsInput = {
    id?: number
    tag_id: number
  }

  export type r_tags_projectsCreateOrConnectWithoutProjectsInput = {
    where: r_tags_projectsWhereUniqueInput
    create: XOR<r_tags_projectsCreateWithoutProjectsInput, r_tags_projectsUncheckedCreateWithoutProjectsInput>
  }

  export type r_tags_projectsCreateManyProjectsInputEnvelope = {
    data: r_tags_projectsCreateManyProjectsInput | r_tags_projectsCreateManyProjectsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_projectsUpsertWithWhereUniqueWithoutProjectsInput = {
    where: r_tags_projectsWhereUniqueInput
    update: XOR<r_tags_projectsUpdateWithoutProjectsInput, r_tags_projectsUncheckedUpdateWithoutProjectsInput>
    create: XOR<r_tags_projectsCreateWithoutProjectsInput, r_tags_projectsUncheckedCreateWithoutProjectsInput>
  }

  export type r_tags_projectsUpdateWithWhereUniqueWithoutProjectsInput = {
    where: r_tags_projectsWhereUniqueInput
    data: XOR<r_tags_projectsUpdateWithoutProjectsInput, r_tags_projectsUncheckedUpdateWithoutProjectsInput>
  }

  export type r_tags_projectsUpdateManyWithWhereWithoutProjectsInput = {
    where: r_tags_projectsScalarWhereInput
    data: XOR<r_tags_projectsUpdateManyMutationInput, r_tags_projectsUncheckedUpdateManyWithoutProjectsInput>
  }

  export type r_tags_projectsScalarWhereInput = {
    AND?: r_tags_projectsScalarWhereInput | r_tags_projectsScalarWhereInput[]
    OR?: r_tags_projectsScalarWhereInput[]
    NOT?: r_tags_projectsScalarWhereInput | r_tags_projectsScalarWhereInput[]
    id?: IntFilter<"r_tags_projects"> | number
    tag_id?: IntFilter<"r_tags_projects"> | number
    project_id?: IntFilter<"r_tags_projects"> | number
  }

  export type productsCreateWithoutR_product_tagsInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutR_product_tagsInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutR_product_tagsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutR_product_tagsInput, productsUncheckedCreateWithoutR_product_tagsInput>
  }

  export type tagsCreateWithoutR_product_tagsInput = {
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsCreateNestedManyWithoutTagsInput
  }

  export type tagsUncheckedCreateWithoutR_product_tagsInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type tagsCreateOrConnectWithoutR_product_tagsInput = {
    where: tagsWhereUniqueInput
    create: XOR<tagsCreateWithoutR_product_tagsInput, tagsUncheckedCreateWithoutR_product_tagsInput>
  }

  export type productsUpsertWithoutR_product_tagsInput = {
    update: XOR<productsUpdateWithoutR_product_tagsInput, productsUncheckedUpdateWithoutR_product_tagsInput>
    create: XOR<productsCreateWithoutR_product_tagsInput, productsUncheckedCreateWithoutR_product_tagsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutR_product_tagsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutR_product_tagsInput, productsUncheckedUpdateWithoutR_product_tagsInput>
  }

  export type productsUpdateWithoutR_product_tagsInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutR_product_tagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type tagsUpsertWithoutR_product_tagsInput = {
    update: XOR<tagsUpdateWithoutR_product_tagsInput, tagsUncheckedUpdateWithoutR_product_tagsInput>
    create: XOR<tagsCreateWithoutR_product_tagsInput, tagsUncheckedCreateWithoutR_product_tagsInput>
    where?: tagsWhereInput
  }

  export type tagsUpdateToOneWithWhereWithoutR_product_tagsInput = {
    where?: tagsWhereInput
    data: XOR<tagsUpdateWithoutR_product_tagsInput, tagsUncheckedUpdateWithoutR_product_tagsInput>
  }

  export type tagsUpdateWithoutR_product_tagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUpdateManyWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateWithoutR_product_tagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type product_categoriesCreateWithoutR_tags_categoriesInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    products?: productsCreateNestedManyWithoutProduct_categoriesInput
  }

  export type product_categoriesUncheckedCreateWithoutR_tags_categoriesInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    products?: productsUncheckedCreateNestedManyWithoutProduct_categoriesInput
  }

  export type product_categoriesCreateOrConnectWithoutR_tags_categoriesInput = {
    where: product_categoriesWhereUniqueInput
    create: XOR<product_categoriesCreateWithoutR_tags_categoriesInput, product_categoriesUncheckedCreateWithoutR_tags_categoriesInput>
  }

  export type tagsCreateWithoutR_tags_categoriesInput = {
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsCreateNestedManyWithoutTagsInput
  }

  export type tagsUncheckedCreateWithoutR_tags_categoriesInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type tagsCreateOrConnectWithoutR_tags_categoriesInput = {
    where: tagsWhereUniqueInput
    create: XOR<tagsCreateWithoutR_tags_categoriesInput, tagsUncheckedCreateWithoutR_tags_categoriesInput>
  }

  export type product_categoriesUpsertWithoutR_tags_categoriesInput = {
    update: XOR<product_categoriesUpdateWithoutR_tags_categoriesInput, product_categoriesUncheckedUpdateWithoutR_tags_categoriesInput>
    create: XOR<product_categoriesCreateWithoutR_tags_categoriesInput, product_categoriesUncheckedCreateWithoutR_tags_categoriesInput>
    where?: product_categoriesWhereInput
  }

  export type product_categoriesUpdateToOneWithWhereWithoutR_tags_categoriesInput = {
    where?: product_categoriesWhereInput
    data: XOR<product_categoriesUpdateWithoutR_tags_categoriesInput, product_categoriesUncheckedUpdateWithoutR_tags_categoriesInput>
  }

  export type product_categoriesUpdateWithoutR_tags_categoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUpdateManyWithoutProduct_categoriesNestedInput
  }

  export type product_categoriesUncheckedUpdateWithoutR_tags_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: productsUncheckedUpdateManyWithoutProduct_categoriesNestedInput
  }

  export type tagsUpsertWithoutR_tags_categoriesInput = {
    update: XOR<tagsUpdateWithoutR_tags_categoriesInput, tagsUncheckedUpdateWithoutR_tags_categoriesInput>
    create: XOR<tagsCreateWithoutR_tags_categoriesInput, tagsUncheckedCreateWithoutR_tags_categoriesInput>
    where?: tagsWhereInput
  }

  export type tagsUpdateToOneWithWhereWithoutR_tags_categoriesInput = {
    where?: tagsWhereInput
    data: XOR<tagsUpdateWithoutR_tags_categoriesInput, tagsUncheckedUpdateWithoutR_tags_categoriesInput>
  }

  export type tagsUpdateWithoutR_tags_categoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUpdateManyWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateWithoutR_tags_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type objectsCreateWithoutR_tags_objectsInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesCreateNestedManyWithoutObjectsInput
    products?: productsCreateNestedManyWithoutObjectsInput
    sections?: sectionsCreateNestedManyWithoutObjectsInput
  }

  export type objectsUncheckedCreateWithoutR_tags_objectsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesUncheckedCreateNestedManyWithoutObjectsInput
    products?: productsUncheckedCreateNestedManyWithoutObjectsInput
    sections?: sectionsUncheckedCreateNestedManyWithoutObjectsInput
  }

  export type objectsCreateOrConnectWithoutR_tags_objectsInput = {
    where: objectsWhereUniqueInput
    create: XOR<objectsCreateWithoutR_tags_objectsInput, objectsUncheckedCreateWithoutR_tags_objectsInput>
  }

  export type tagsCreateWithoutR_tags_objectsInput = {
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsCreateNestedManyWithoutTagsInput
  }

  export type tagsUncheckedCreateWithoutR_tags_objectsInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type tagsCreateOrConnectWithoutR_tags_objectsInput = {
    where: tagsWhereUniqueInput
    create: XOR<tagsCreateWithoutR_tags_objectsInput, tagsUncheckedCreateWithoutR_tags_objectsInput>
  }

  export type objectsUpsertWithoutR_tags_objectsInput = {
    update: XOR<objectsUpdateWithoutR_tags_objectsInput, objectsUncheckedUpdateWithoutR_tags_objectsInput>
    create: XOR<objectsCreateWithoutR_tags_objectsInput, objectsUncheckedCreateWithoutR_tags_objectsInput>
    where?: objectsWhereInput
  }

  export type objectsUpdateToOneWithWhereWithoutR_tags_objectsInput = {
    where?: objectsWhereInput
    data: XOR<objectsUpdateWithoutR_tags_objectsInput, objectsUncheckedUpdateWithoutR_tags_objectsInput>
  }

  export type objectsUpdateWithoutR_tags_objectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUpdateManyWithoutObjectsNestedInput
    products?: productsUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUpdateManyWithoutObjectsNestedInput
  }

  export type objectsUncheckedUpdateWithoutR_tags_objectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUncheckedUpdateManyWithoutObjectsNestedInput
    products?: productsUncheckedUpdateManyWithoutObjectsNestedInput
    sections?: sectionsUncheckedUpdateManyWithoutObjectsNestedInput
  }

  export type tagsUpsertWithoutR_tags_objectsInput = {
    update: XOR<tagsUpdateWithoutR_tags_objectsInput, tagsUncheckedUpdateWithoutR_tags_objectsInput>
    create: XOR<tagsCreateWithoutR_tags_objectsInput, tagsUncheckedCreateWithoutR_tags_objectsInput>
    where?: tagsWhereInput
  }

  export type tagsUpdateToOneWithWhereWithoutR_tags_objectsInput = {
    where?: tagsWhereInput
    data: XOR<tagsUpdateWithoutR_tags_objectsInput, tagsUncheckedUpdateWithoutR_tags_objectsInput>
  }

  export type tagsUpdateWithoutR_tags_objectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUpdateManyWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateWithoutR_tags_objectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type product_typesCreateWithoutR_tags_product_typesInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesCreateNestedManyWithoutProduct_typesInput
    objects: objectsCreateNestedOneWithoutProduct_typesInput
    products?: productsCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesUncheckedCreateWithoutR_tags_product_typesInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    product_pricing_rules?: product_pricing_rulesUncheckedCreateNestedManyWithoutProduct_typesInput
    products?: productsUncheckedCreateNestedManyWithoutProduct_typesInput
  }

  export type product_typesCreateOrConnectWithoutR_tags_product_typesInput = {
    where: product_typesWhereUniqueInput
    create: XOR<product_typesCreateWithoutR_tags_product_typesInput, product_typesUncheckedCreateWithoutR_tags_product_typesInput>
  }

  export type tagsCreateWithoutR_tags_product_typesInput = {
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsCreateNestedManyWithoutTagsInput
  }

  export type tagsUncheckedCreateWithoutR_tags_product_typesInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type tagsCreateOrConnectWithoutR_tags_product_typesInput = {
    where: tagsWhereUniqueInput
    create: XOR<tagsCreateWithoutR_tags_product_typesInput, tagsUncheckedCreateWithoutR_tags_product_typesInput>
  }

  export type product_typesUpsertWithoutR_tags_product_typesInput = {
    update: XOR<product_typesUpdateWithoutR_tags_product_typesInput, product_typesUncheckedUpdateWithoutR_tags_product_typesInput>
    create: XOR<product_typesCreateWithoutR_tags_product_typesInput, product_typesUncheckedCreateWithoutR_tags_product_typesInput>
    where?: product_typesWhereInput
  }

  export type product_typesUpdateToOneWithWhereWithoutR_tags_product_typesInput = {
    where?: product_typesWhereInput
    data: XOR<product_typesUpdateWithoutR_tags_product_typesInput, product_typesUncheckedUpdateWithoutR_tags_product_typesInput>
  }

  export type product_typesUpdateWithoutR_tags_product_typesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    objects?: objectsUpdateOneRequiredWithoutProduct_typesNestedInput
    products?: productsUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateWithoutR_tags_product_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    products?: productsUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type tagsUpsertWithoutR_tags_product_typesInput = {
    update: XOR<tagsUpdateWithoutR_tags_product_typesInput, tagsUncheckedUpdateWithoutR_tags_product_typesInput>
    create: XOR<tagsCreateWithoutR_tags_product_typesInput, tagsUncheckedCreateWithoutR_tags_product_typesInput>
    where?: tagsWhereInput
  }

  export type tagsUpdateToOneWithWhereWithoutR_tags_product_typesInput = {
    where?: tagsWhereInput
    data: XOR<tagsUpdateWithoutR_tags_product_typesInput, tagsUncheckedUpdateWithoutR_tags_product_typesInput>
  }

  export type tagsUpdateWithoutR_tags_product_typesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUpdateManyWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateWithoutR_tags_product_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type productsCreateWithoutR_tags_productsInput = {
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    integrations?: integrationsCreateNestedManyWithoutProductsInput
    product_files?: product_filesCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyCreateNestedManyWithoutProductsInput
    floors?: floorsCreateNestedOneWithoutProductsInput
    product_categories: product_categoriesCreateNestedOneWithoutProductsInput
    objects: objectsCreateNestedOneWithoutProductsInput
    product_types?: product_typesCreateNestedOneWithoutProductsInput
    r_product_tags?: r_product_tagsCreateNestedManyWithoutProductsInput
  }

  export type productsUncheckedCreateWithoutR_tags_productsInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
    integrations?: integrationsUncheckedCreateNestedManyWithoutProductsInput
    product_files?: product_filesUncheckedCreateNestedManyWithoutProductsInput
    product_meter_numbers?: product_meter_numbersUncheckedCreateNestedOneWithoutProductsInput
    product_price_history?: product_price_historyUncheckedCreateNestedManyWithoutProductsInput
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutProductsInput
  }

  export type productsCreateOrConnectWithoutR_tags_productsInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutR_tags_productsInput, productsUncheckedCreateWithoutR_tags_productsInput>
  }

  export type tagsCreateWithoutR_tags_productsInput = {
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsCreateNestedManyWithoutTagsInput
  }

  export type tagsUncheckedCreateWithoutR_tags_productsInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_projects?: r_tags_projectsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type tagsCreateOrConnectWithoutR_tags_productsInput = {
    where: tagsWhereUniqueInput
    create: XOR<tagsCreateWithoutR_tags_productsInput, tagsUncheckedCreateWithoutR_tags_productsInput>
  }

  export type productsUpsertWithoutR_tags_productsInput = {
    update: XOR<productsUpdateWithoutR_tags_productsInput, productsUncheckedUpdateWithoutR_tags_productsInput>
    create: XOR<productsCreateWithoutR_tags_productsInput, productsUncheckedCreateWithoutR_tags_productsInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutR_tags_productsInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutR_tags_productsInput, productsUncheckedUpdateWithoutR_tags_productsInput>
  }

  export type productsUpdateWithoutR_tags_productsInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutR_tags_productsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type tagsUpsertWithoutR_tags_productsInput = {
    update: XOR<tagsUpdateWithoutR_tags_productsInput, tagsUncheckedUpdateWithoutR_tags_productsInput>
    create: XOR<tagsCreateWithoutR_tags_productsInput, tagsUncheckedCreateWithoutR_tags_productsInput>
    where?: tagsWhereInput
  }

  export type tagsUpdateToOneWithWhereWithoutR_tags_productsInput = {
    where?: tagsWhereInput
    data: XOR<tagsUpdateWithoutR_tags_productsInput, tagsUncheckedUpdateWithoutR_tags_productsInput>
  }

  export type tagsUpdateWithoutR_tags_productsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUpdateManyWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateWithoutR_tags_productsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_projects?: r_tags_projectsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type projectsCreateWithoutR_tags_projectsInput = {
    name: string
  }

  export type projectsUncheckedCreateWithoutR_tags_projectsInput = {
    id?: number
    name: string
  }

  export type projectsCreateOrConnectWithoutR_tags_projectsInput = {
    where: projectsWhereUniqueInput
    create: XOR<projectsCreateWithoutR_tags_projectsInput, projectsUncheckedCreateWithoutR_tags_projectsInput>
  }

  export type tagsCreateWithoutR_tags_projectsInput = {
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsCreateNestedManyWithoutTagsInput
  }

  export type tagsUncheckedCreateWithoutR_tags_projectsInput = {
    id?: number
    name: string
    price?: Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_categories?: r_tags_categoriesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutTagsInput
    r_tags_product_types?: r_tags_product_typesUncheckedCreateNestedManyWithoutTagsInput
    r_tags_products?: r_tags_productsUncheckedCreateNestedManyWithoutTagsInput
  }

  export type tagsCreateOrConnectWithoutR_tags_projectsInput = {
    where: tagsWhereUniqueInput
    create: XOR<tagsCreateWithoutR_tags_projectsInput, tagsUncheckedCreateWithoutR_tags_projectsInput>
  }

  export type projectsUpsertWithoutR_tags_projectsInput = {
    update: XOR<projectsUpdateWithoutR_tags_projectsInput, projectsUncheckedUpdateWithoutR_tags_projectsInput>
    create: XOR<projectsCreateWithoutR_tags_projectsInput, projectsUncheckedCreateWithoutR_tags_projectsInput>
    where?: projectsWhereInput
  }

  export type projectsUpdateToOneWithWhereWithoutR_tags_projectsInput = {
    where?: projectsWhereInput
    data: XOR<projectsUpdateWithoutR_tags_projectsInput, projectsUncheckedUpdateWithoutR_tags_projectsInput>
  }

  export type projectsUpdateWithoutR_tags_projectsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type projectsUncheckedUpdateWithoutR_tags_projectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type tagsUpsertWithoutR_tags_projectsInput = {
    update: XOR<tagsUpdateWithoutR_tags_projectsInput, tagsUncheckedUpdateWithoutR_tags_projectsInput>
    create: XOR<tagsCreateWithoutR_tags_projectsInput, tagsUncheckedCreateWithoutR_tags_projectsInput>
    where?: tagsWhereInput
  }

  export type tagsUpdateToOneWithWhereWithoutR_tags_projectsInput = {
    where?: tagsWhereInput
    data: XOR<tagsUpdateWithoutR_tags_projectsInput, tagsUncheckedUpdateWithoutR_tags_projectsInput>
  }

  export type tagsUpdateWithoutR_tags_projectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutTagsNestedInput
  }

  export type tagsUncheckedUpdateWithoutR_tags_projectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_categories?: r_tags_categoriesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutTagsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutTagsNestedInput
  }

  export type floorsCreateWithoutSectionsInput = {
    number: string
    floor_pricing_rules?: floor_pricing_rulesCreateNestedManyWithoutFloorsInput
    products?: productsCreateNestedManyWithoutFloorsInput
  }

  export type floorsUncheckedCreateWithoutSectionsInput = {
    id?: number
    number: string
    floor_pricing_rules?: floor_pricing_rulesUncheckedCreateNestedManyWithoutFloorsInput
    products?: productsUncheckedCreateNestedManyWithoutFloorsInput
  }

  export type floorsCreateOrConnectWithoutSectionsInput = {
    where: floorsWhereUniqueInput
    create: XOR<floorsCreateWithoutSectionsInput, floorsUncheckedCreateWithoutSectionsInput>
  }

  export type floorsCreateManySectionsInputEnvelope = {
    data: floorsCreateManySectionsInput | floorsCreateManySectionsInput[]
    skipDuplicates?: boolean
  }

  export type objectsCreateWithoutSectionsInput = {
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesCreateNestedManyWithoutObjectsInput
    products?: productsCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsCreateNestedManyWithoutObjectsInput
  }

  export type objectsUncheckedCreateWithoutSectionsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
    common_db_object_id: number
    product_types?: product_typesUncheckedCreateNestedManyWithoutObjectsInput
    products?: productsUncheckedCreateNestedManyWithoutObjectsInput
    r_tags_objects?: r_tags_objectsUncheckedCreateNestedManyWithoutObjectsInput
  }

  export type objectsCreateOrConnectWithoutSectionsInput = {
    where: objectsWhereUniqueInput
    create: XOR<objectsCreateWithoutSectionsInput, objectsUncheckedCreateWithoutSectionsInput>
  }

  export type floorsUpsertWithWhereUniqueWithoutSectionsInput = {
    where: floorsWhereUniqueInput
    update: XOR<floorsUpdateWithoutSectionsInput, floorsUncheckedUpdateWithoutSectionsInput>
    create: XOR<floorsCreateWithoutSectionsInput, floorsUncheckedCreateWithoutSectionsInput>
  }

  export type floorsUpdateWithWhereUniqueWithoutSectionsInput = {
    where: floorsWhereUniqueInput
    data: XOR<floorsUpdateWithoutSectionsInput, floorsUncheckedUpdateWithoutSectionsInput>
  }

  export type floorsUpdateManyWithWhereWithoutSectionsInput = {
    where: floorsScalarWhereInput
    data: XOR<floorsUpdateManyMutationInput, floorsUncheckedUpdateManyWithoutSectionsInput>
  }

  export type floorsScalarWhereInput = {
    AND?: floorsScalarWhereInput | floorsScalarWhereInput[]
    OR?: floorsScalarWhereInput[]
    NOT?: floorsScalarWhereInput | floorsScalarWhereInput[]
    id?: IntFilter<"floors"> | number
    number?: StringFilter<"floors"> | string
    section_id?: IntFilter<"floors"> | number
  }

  export type objectsUpsertWithoutSectionsInput = {
    update: XOR<objectsUpdateWithoutSectionsInput, objectsUncheckedUpdateWithoutSectionsInput>
    create: XOR<objectsCreateWithoutSectionsInput, objectsUncheckedCreateWithoutSectionsInput>
    where?: objectsWhereInput
  }

  export type objectsUpdateToOneWithWhereWithoutSectionsInput = {
    where?: objectsWhereInput
    data: XOR<objectsUpdateWithoutSectionsInput, objectsUncheckedUpdateWithoutSectionsInput>
  }

  export type objectsUpdateWithoutSectionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUpdateManyWithoutObjectsNestedInput
    products?: productsUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUpdateManyWithoutObjectsNestedInput
  }

  export type objectsUncheckedUpdateWithoutSectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    common_db_object_id?: IntFieldUpdateOperationsInput | number
    product_types?: product_typesUncheckedUpdateManyWithoutObjectsNestedInput
    products?: productsUncheckedUpdateManyWithoutObjectsNestedInput
    r_tags_objects?: r_tags_objectsUncheckedUpdateManyWithoutObjectsNestedInput
  }

  export type r_product_tagsCreateWithoutTagsInput = {
    products: productsCreateNestedOneWithoutR_product_tagsInput
  }

  export type r_product_tagsUncheckedCreateWithoutTagsInput = {
    id?: number
    product_id: number
  }

  export type r_product_tagsCreateOrConnectWithoutTagsInput = {
    where: r_product_tagsWhereUniqueInput
    create: XOR<r_product_tagsCreateWithoutTagsInput, r_product_tagsUncheckedCreateWithoutTagsInput>
  }

  export type r_product_tagsCreateManyTagsInputEnvelope = {
    data: r_product_tagsCreateManyTagsInput | r_product_tagsCreateManyTagsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_categoriesCreateWithoutTagsInput = {
    product_categories: product_categoriesCreateNestedOneWithoutR_tags_categoriesInput
  }

  export type r_tags_categoriesUncheckedCreateWithoutTagsInput = {
    id?: number
    category_id: number
  }

  export type r_tags_categoriesCreateOrConnectWithoutTagsInput = {
    where: r_tags_categoriesWhereUniqueInput
    create: XOR<r_tags_categoriesCreateWithoutTagsInput, r_tags_categoriesUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_categoriesCreateManyTagsInputEnvelope = {
    data: r_tags_categoriesCreateManyTagsInput | r_tags_categoriesCreateManyTagsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_objectsCreateWithoutTagsInput = {
    objects: objectsCreateNestedOneWithoutR_tags_objectsInput
  }

  export type r_tags_objectsUncheckedCreateWithoutTagsInput = {
    id?: number
    object_id: number
  }

  export type r_tags_objectsCreateOrConnectWithoutTagsInput = {
    where: r_tags_objectsWhereUniqueInput
    create: XOR<r_tags_objectsCreateWithoutTagsInput, r_tags_objectsUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_objectsCreateManyTagsInputEnvelope = {
    data: r_tags_objectsCreateManyTagsInput | r_tags_objectsCreateManyTagsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_product_typesCreateWithoutTagsInput = {
    product_types: product_typesCreateNestedOneWithoutR_tags_product_typesInput
  }

  export type r_tags_product_typesUncheckedCreateWithoutTagsInput = {
    id?: number
    product_type_id: number
  }

  export type r_tags_product_typesCreateOrConnectWithoutTagsInput = {
    where: r_tags_product_typesWhereUniqueInput
    create: XOR<r_tags_product_typesCreateWithoutTagsInput, r_tags_product_typesUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_product_typesCreateManyTagsInputEnvelope = {
    data: r_tags_product_typesCreateManyTagsInput | r_tags_product_typesCreateManyTagsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_productsCreateWithoutTagsInput = {
    products: productsCreateNestedOneWithoutR_tags_productsInput
  }

  export type r_tags_productsUncheckedCreateWithoutTagsInput = {
    id?: number
    product_id: number
  }

  export type r_tags_productsCreateOrConnectWithoutTagsInput = {
    where: r_tags_productsWhereUniqueInput
    create: XOR<r_tags_productsCreateWithoutTagsInput, r_tags_productsUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_productsCreateManyTagsInputEnvelope = {
    data: r_tags_productsCreateManyTagsInput | r_tags_productsCreateManyTagsInput[]
    skipDuplicates?: boolean
  }

  export type r_tags_projectsCreateWithoutTagsInput = {
    projects: projectsCreateNestedOneWithoutR_tags_projectsInput
  }

  export type r_tags_projectsUncheckedCreateWithoutTagsInput = {
    id?: number
    project_id: number
  }

  export type r_tags_projectsCreateOrConnectWithoutTagsInput = {
    where: r_tags_projectsWhereUniqueInput
    create: XOR<r_tags_projectsCreateWithoutTagsInput, r_tags_projectsUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_projectsCreateManyTagsInputEnvelope = {
    data: r_tags_projectsCreateManyTagsInput | r_tags_projectsCreateManyTagsInput[]
    skipDuplicates?: boolean
  }

  export type r_product_tagsUpsertWithWhereUniqueWithoutTagsInput = {
    where: r_product_tagsWhereUniqueInput
    update: XOR<r_product_tagsUpdateWithoutTagsInput, r_product_tagsUncheckedUpdateWithoutTagsInput>
    create: XOR<r_product_tagsCreateWithoutTagsInput, r_product_tagsUncheckedCreateWithoutTagsInput>
  }

  export type r_product_tagsUpdateWithWhereUniqueWithoutTagsInput = {
    where: r_product_tagsWhereUniqueInput
    data: XOR<r_product_tagsUpdateWithoutTagsInput, r_product_tagsUncheckedUpdateWithoutTagsInput>
  }

  export type r_product_tagsUpdateManyWithWhereWithoutTagsInput = {
    where: r_product_tagsScalarWhereInput
    data: XOR<r_product_tagsUpdateManyMutationInput, r_product_tagsUncheckedUpdateManyWithoutTagsInput>
  }

  export type r_tags_categoriesUpsertWithWhereUniqueWithoutTagsInput = {
    where: r_tags_categoriesWhereUniqueInput
    update: XOR<r_tags_categoriesUpdateWithoutTagsInput, r_tags_categoriesUncheckedUpdateWithoutTagsInput>
    create: XOR<r_tags_categoriesCreateWithoutTagsInput, r_tags_categoriesUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_categoriesUpdateWithWhereUniqueWithoutTagsInput = {
    where: r_tags_categoriesWhereUniqueInput
    data: XOR<r_tags_categoriesUpdateWithoutTagsInput, r_tags_categoriesUncheckedUpdateWithoutTagsInput>
  }

  export type r_tags_categoriesUpdateManyWithWhereWithoutTagsInput = {
    where: r_tags_categoriesScalarWhereInput
    data: XOR<r_tags_categoriesUpdateManyMutationInput, r_tags_categoriesUncheckedUpdateManyWithoutTagsInput>
  }

  export type r_tags_objectsUpsertWithWhereUniqueWithoutTagsInput = {
    where: r_tags_objectsWhereUniqueInput
    update: XOR<r_tags_objectsUpdateWithoutTagsInput, r_tags_objectsUncheckedUpdateWithoutTagsInput>
    create: XOR<r_tags_objectsCreateWithoutTagsInput, r_tags_objectsUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_objectsUpdateWithWhereUniqueWithoutTagsInput = {
    where: r_tags_objectsWhereUniqueInput
    data: XOR<r_tags_objectsUpdateWithoutTagsInput, r_tags_objectsUncheckedUpdateWithoutTagsInput>
  }

  export type r_tags_objectsUpdateManyWithWhereWithoutTagsInput = {
    where: r_tags_objectsScalarWhereInput
    data: XOR<r_tags_objectsUpdateManyMutationInput, r_tags_objectsUncheckedUpdateManyWithoutTagsInput>
  }

  export type r_tags_product_typesUpsertWithWhereUniqueWithoutTagsInput = {
    where: r_tags_product_typesWhereUniqueInput
    update: XOR<r_tags_product_typesUpdateWithoutTagsInput, r_tags_product_typesUncheckedUpdateWithoutTagsInput>
    create: XOR<r_tags_product_typesCreateWithoutTagsInput, r_tags_product_typesUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_product_typesUpdateWithWhereUniqueWithoutTagsInput = {
    where: r_tags_product_typesWhereUniqueInput
    data: XOR<r_tags_product_typesUpdateWithoutTagsInput, r_tags_product_typesUncheckedUpdateWithoutTagsInput>
  }

  export type r_tags_product_typesUpdateManyWithWhereWithoutTagsInput = {
    where: r_tags_product_typesScalarWhereInput
    data: XOR<r_tags_product_typesUpdateManyMutationInput, r_tags_product_typesUncheckedUpdateManyWithoutTagsInput>
  }

  export type r_tags_productsUpsertWithWhereUniqueWithoutTagsInput = {
    where: r_tags_productsWhereUniqueInput
    update: XOR<r_tags_productsUpdateWithoutTagsInput, r_tags_productsUncheckedUpdateWithoutTagsInput>
    create: XOR<r_tags_productsCreateWithoutTagsInput, r_tags_productsUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_productsUpdateWithWhereUniqueWithoutTagsInput = {
    where: r_tags_productsWhereUniqueInput
    data: XOR<r_tags_productsUpdateWithoutTagsInput, r_tags_productsUncheckedUpdateWithoutTagsInput>
  }

  export type r_tags_productsUpdateManyWithWhereWithoutTagsInput = {
    where: r_tags_productsScalarWhereInput
    data: XOR<r_tags_productsUpdateManyMutationInput, r_tags_productsUncheckedUpdateManyWithoutTagsInput>
  }

  export type r_tags_projectsUpsertWithWhereUniqueWithoutTagsInput = {
    where: r_tags_projectsWhereUniqueInput
    update: XOR<r_tags_projectsUpdateWithoutTagsInput, r_tags_projectsUncheckedUpdateWithoutTagsInput>
    create: XOR<r_tags_projectsCreateWithoutTagsInput, r_tags_projectsUncheckedCreateWithoutTagsInput>
  }

  export type r_tags_projectsUpdateWithWhereUniqueWithoutTagsInput = {
    where: r_tags_projectsWhereUniqueInput
    data: XOR<r_tags_projectsUpdateWithoutTagsInput, r_tags_projectsUncheckedUpdateWithoutTagsInput>
  }

  export type r_tags_projectsUpdateManyWithWhereWithoutTagsInput = {
    where: r_tags_projectsScalarWhereInput
    data: XOR<r_tags_projectsUpdateManyMutationInput, r_tags_projectsUncheckedUpdateManyWithoutTagsInput>
  }

  export type floor_pricing_rulesCreateManyFloorsInput = {
    id?: number
    product_type_id: number
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
  }

  export type productsCreateManyFloorsInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    category_id: number
  }

  export type floor_pricing_rulesUpdateWithoutFloorsInput = {
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    product_types?: product_typesUpdateOneRequiredWithoutFloor_pricing_rulesNestedInput
  }

  export type floor_pricing_rulesUncheckedUpdateWithoutFloorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesUncheckedUpdateManyWithoutFloorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type productsUpdateWithoutFloorsInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutFloorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutFloorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type integrationsCreateManyIntegration_sourcesInput = {
    id?: number
    product_id: number
    source_product_id: string
  }

  export type integrationsUpdateWithoutIntegration_sourcesInput = {
    source_product_id?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateOneRequiredWithoutIntegrationsNestedInput
  }

  export type integrationsUncheckedUpdateWithoutIntegration_sourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    source_product_id?: StringFieldUpdateOperationsInput | string
  }

  export type integrationsUncheckedUpdateManyWithoutIntegration_sourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    source_product_id?: StringFieldUpdateOperationsInput | string
  }

  export type product_typesCreateManyObjectsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at: Date | string
  }

  export type productsCreateManyObjectsInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    product_type_id?: number | null
    category_id: number
    floor_id?: number | null
  }

  export type r_tags_objectsCreateManyObjectsInput = {
    id?: number
    tag_id: number
  }

  export type sectionsCreateManyObjectsInput = {
    id?: number
    number: string
  }

  export type product_typesUpdateWithoutObjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUpdateManyWithoutProduct_typesNestedInput
    products?: productsUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    product_pricing_rules?: product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesNestedInput
    products?: productsUncheckedUpdateManyWithoutProduct_typesNestedInput
    r_tags_product_types?: r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesNestedInput
  }

  export type product_typesUncheckedUpdateManyWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productsUpdateWithoutObjectsInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type r_tags_objectsUpdateWithoutObjectsInput = {
    tags?: tagsUpdateOneRequiredWithoutR_tags_objectsNestedInput
  }

  export type r_tags_objectsUncheckedUpdateWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_objectsUncheckedUpdateManyWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type sectionsUpdateWithoutObjectsInput = {
    number?: StringFieldUpdateOperationsInput | string
    floors?: floorsUpdateManyWithoutSectionsNestedInput
  }

  export type sectionsUncheckedUpdateWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    floors?: floorsUncheckedUpdateManyWithoutSectionsNestedInput
  }

  export type sectionsUncheckedUpdateManyWithoutObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateManyProduct_categoriesInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    product_type_id?: number | null
    floor_id?: number | null
  }

  export type r_tags_categoriesCreateManyProduct_categoriesInput = {
    id?: number
    tag_id: number
  }

  export type productsUpdateWithoutProduct_categoriesInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    product_types?: product_typesUpdateOneWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutProduct_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    product_type_id?: NullableIntFieldUpdateOperationsInput | number | null
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type r_tags_categoriesUpdateWithoutProduct_categoriesInput = {
    tags?: tagsUpdateOneRequiredWithoutR_tags_categoriesNestedInput
  }

  export type r_tags_categoriesUncheckedUpdateWithoutProduct_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_categoriesUncheckedUpdateManyWithoutProduct_categoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type floor_pricing_rulesCreateManyProduct_typesInput = {
    id?: number
    floor_id: number
    price_per_square_meter?: Decimal | DecimalJsLike | number | string
  }

  export type product_pricing_rulesCreateManyProduct_typesInput = {
    id?: number
    step_number: number
    price_per_square_meter: Decimal | DecimalJsLike | number | string
    flats_percent: Decimal | DecimalJsLike | number | string
    planned_days: number
  }

  export type productsCreateManyProduct_typesInput = {
    id?: number
    number: string
    area: Decimal | DecimalJsLike | number | string
    price: Decimal | DecimalJsLike | number | string
    one_gt_id?: string | null
    created_at?: Date | string
    updated_at: Date | string
    object_id: number
    category_id: number
    floor_id?: number | null
  }

  export type r_tags_product_typesCreateManyProduct_typesInput = {
    id?: number
    tag_id: number
  }

  export type floor_pricing_rulesUpdateWithoutProduct_typesInput = {
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    floors?: floorsUpdateOneRequiredWithoutFloor_pricing_rulesNestedInput
  }

  export type floor_pricing_rulesUncheckedUpdateWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    floor_id?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type floor_pricing_rulesUncheckedUpdateManyWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    floor_id?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type product_pricing_rulesUpdateWithoutProduct_typesInput = {
    step_number?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planned_days?: IntFieldUpdateOperationsInput | number
  }

  export type product_pricing_rulesUncheckedUpdateWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    step_number?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planned_days?: IntFieldUpdateOperationsInput | number
  }

  export type product_pricing_rulesUncheckedUpdateManyWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    step_number?: IntFieldUpdateOperationsInput | number
    price_per_square_meter?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    flats_percent?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    planned_days?: IntFieldUpdateOperationsInput | number
  }

  export type productsUpdateWithoutProduct_typesInput = {
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    integrations?: integrationsUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUpdateManyWithoutProductsNestedInput
    floors?: floorsUpdateOneWithoutProductsNestedInput
    product_categories?: product_categoriesUpdateOneRequiredWithoutProductsNestedInput
    objects?: objectsUpdateOneRequiredWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
    integrations?: integrationsUncheckedUpdateManyWithoutProductsNestedInput
    product_files?: product_filesUncheckedUpdateManyWithoutProductsNestedInput
    product_meter_numbers?: product_meter_numbersUncheckedUpdateOneWithoutProductsNestedInput
    product_price_history?: product_price_historyUncheckedUpdateManyWithoutProductsNestedInput
    r_product_tags?: r_product_tagsUncheckedUpdateManyWithoutProductsNestedInput
    r_tags_products?: r_tags_productsUncheckedUpdateManyWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateManyWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    area?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    one_gt_id?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    object_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    floor_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type r_tags_product_typesUpdateWithoutProduct_typesInput = {
    tags?: tagsUpdateOneRequiredWithoutR_tags_product_typesNestedInput
  }

  export type r_tags_product_typesUncheckedUpdateWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_product_typesUncheckedUpdateManyWithoutProduct_typesInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type integrationsCreateManyProductsInput = {
    id?: number
    source_id: number
    source_product_id: string
  }

  export type product_filesCreateManyProductsInput = {
    id?: number
    type: $Enums.product_files_type
    path: string
  }

  export type product_price_historyCreateManyProductsInput = {
    id?: number
    price: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
  }

  export type r_product_tagsCreateManyProductsInput = {
    id?: number
    tag_id: number
  }

  export type r_tags_productsCreateManyProductsInput = {
    id?: number
    tag_id: number
  }

  export type integrationsUpdateWithoutProductsInput = {
    source_product_id?: StringFieldUpdateOperationsInput | string
    integration_sources?: integration_sourcesUpdateOneRequiredWithoutIntegrationsNestedInput
  }

  export type integrationsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
    source_product_id?: StringFieldUpdateOperationsInput | string
  }

  export type integrationsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
    source_product_id?: StringFieldUpdateOperationsInput | string
  }

  export type product_filesUpdateWithoutProductsInput = {
    type?: Enumproduct_files_typeFieldUpdateOperationsInput | $Enums.product_files_type
    path?: StringFieldUpdateOperationsInput | string
  }

  export type product_filesUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: Enumproduct_files_typeFieldUpdateOperationsInput | $Enums.product_files_type
    path?: StringFieldUpdateOperationsInput | string
  }

  export type product_filesUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: Enumproduct_files_typeFieldUpdateOperationsInput | $Enums.product_files_type
    path?: StringFieldUpdateOperationsInput | string
  }

  export type product_price_historyUpdateWithoutProductsInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_price_historyUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type product_price_historyUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type r_product_tagsUpdateWithoutProductsInput = {
    tags?: tagsUpdateOneRequiredWithoutR_product_tagsNestedInput
  }

  export type r_product_tagsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_product_tagsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_productsUpdateWithoutProductsInput = {
    tags?: tagsUpdateOneRequiredWithoutR_tags_productsNestedInput
  }

  export type r_tags_productsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_productsUncheckedUpdateManyWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_projectsCreateManyProjectsInput = {
    id?: number
    tag_id: number
  }

  export type r_tags_projectsUpdateWithoutProjectsInput = {
    tags?: tagsUpdateOneRequiredWithoutR_tags_projectsNestedInput
  }

  export type r_tags_projectsUncheckedUpdateWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_projectsUncheckedUpdateManyWithoutProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag_id?: IntFieldUpdateOperationsInput | number
  }

  export type floorsCreateManySectionsInput = {
    id?: number
    number: string
  }

  export type floorsUpdateWithoutSectionsInput = {
    number?: StringFieldUpdateOperationsInput | string
    floor_pricing_rules?: floor_pricing_rulesUpdateManyWithoutFloorsNestedInput
    products?: productsUpdateManyWithoutFloorsNestedInput
  }

  export type floorsUncheckedUpdateWithoutSectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    floor_pricing_rules?: floor_pricing_rulesUncheckedUpdateManyWithoutFloorsNestedInput
    products?: productsUncheckedUpdateManyWithoutFloorsNestedInput
  }

  export type floorsUncheckedUpdateManyWithoutSectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
  }

  export type r_product_tagsCreateManyTagsInput = {
    id?: number
    product_id: number
  }

  export type r_tags_categoriesCreateManyTagsInput = {
    id?: number
    category_id: number
  }

  export type r_tags_objectsCreateManyTagsInput = {
    id?: number
    object_id: number
  }

  export type r_tags_product_typesCreateManyTagsInput = {
    id?: number
    product_type_id: number
  }

  export type r_tags_productsCreateManyTagsInput = {
    id?: number
    product_id: number
  }

  export type r_tags_projectsCreateManyTagsInput = {
    id?: number
    project_id: number
  }

  export type r_product_tagsUpdateWithoutTagsInput = {
    products?: productsUpdateOneRequiredWithoutR_product_tagsNestedInput
  }

  export type r_product_tagsUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_product_tagsUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_categoriesUpdateWithoutTagsInput = {
    product_categories?: product_categoriesUpdateOneRequiredWithoutR_tags_categoriesNestedInput
  }

  export type r_tags_categoriesUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_categoriesUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_objectsUpdateWithoutTagsInput = {
    objects?: objectsUpdateOneRequiredWithoutR_tags_objectsNestedInput
  }

  export type r_tags_objectsUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    object_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_objectsUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    object_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_product_typesUpdateWithoutTagsInput = {
    product_types?: product_typesUpdateOneRequiredWithoutR_tags_product_typesNestedInput
  }

  export type r_tags_product_typesUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_product_typesUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_type_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_productsUpdateWithoutTagsInput = {
    products?: productsUpdateOneRequiredWithoutR_tags_productsNestedInput
  }

  export type r_tags_productsUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_productsUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_projectsUpdateWithoutTagsInput = {
    projects?: projectsUpdateOneRequiredWithoutR_tags_projectsNestedInput
  }

  export type r_tags_projectsUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
  }

  export type r_tags_projectsUncheckedUpdateManyWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    project_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FloorsCountOutputTypeDefaultArgs instead
     */
    export type FloorsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FloorsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Integration_sourcesCountOutputTypeDefaultArgs instead
     */
    export type Integration_sourcesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Integration_sourcesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ObjectsCountOutputTypeDefaultArgs instead
     */
    export type ObjectsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObjectsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Product_categoriesCountOutputTypeDefaultArgs instead
     */
    export type Product_categoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Product_categoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Product_typesCountOutputTypeDefaultArgs instead
     */
    export type Product_typesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Product_typesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsCountOutputTypeDefaultArgs instead
     */
    export type ProductsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectsCountOutputTypeDefaultArgs instead
     */
    export type ProjectsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SectionsCountOutputTypeDefaultArgs instead
     */
    export type SectionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SectionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagsCountOutputTypeDefaultArgs instead
     */
    export type TagsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use floor_pricing_rulesDefaultArgs instead
     */
    export type floor_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = floor_pricing_rulesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use floorsDefaultArgs instead
     */
    export type floorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = floorsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use integration_sourcesDefaultArgs instead
     */
    export type integration_sourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = integration_sourcesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use integrationsDefaultArgs instead
     */
    export type integrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = integrationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use objectsDefaultArgs instead
     */
    export type objectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = objectsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_categoriesDefaultArgs instead
     */
    export type product_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_filesDefaultArgs instead
     */
    export type product_filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_filesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_meter_numbersDefaultArgs instead
     */
    export type product_meter_numbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_meter_numbersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_price_historyDefaultArgs instead
     */
    export type product_price_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_price_historyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_pricing_rulesDefaultArgs instead
     */
    export type product_pricing_rulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_pricing_rulesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use product_typesDefaultArgs instead
     */
    export type product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = product_typesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productsDefaultArgs instead
     */
    export type productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use projectsDefaultArgs instead
     */
    export type projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = projectsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use r_product_tagsDefaultArgs instead
     */
    export type r_product_tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = r_product_tagsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use r_tags_categoriesDefaultArgs instead
     */
    export type r_tags_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = r_tags_categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use r_tags_objectsDefaultArgs instead
     */
    export type r_tags_objectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = r_tags_objectsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use r_tags_product_typesDefaultArgs instead
     */
    export type r_tags_product_typesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = r_tags_product_typesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use r_tags_productsDefaultArgs instead
     */
    export type r_tags_productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = r_tags_productsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use r_tags_projectsDefaultArgs instead
     */
    export type r_tags_projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = r_tags_projectsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use sectionsDefaultArgs instead
     */
    export type sectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = sectionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tagsDefaultArgs instead
     */
    export type tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tagsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}