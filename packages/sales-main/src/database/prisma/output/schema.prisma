generator client {
  provider      = "prisma-client-js"
  output        = "output"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  DIRECTOR
  SALES_EMPLOYEE

  @@map("user_roles")
}

model User {
  id         Int      @id @default(autoincrement())
  full_name  String
  email      String
  phone      String?
  is_manager Boolean
  user_role  UserRole
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client_contracts ClientContract[]
  agency_contracts AgencyContract[]

  @@map("users")
}

enum ClientCategory {
  INDIVIDUAL
  INDIVIDUAL_MINOR
  ENTITY

  @@map("client_categories")
}

model Client {
  id              Int            @id @default(autoincrement())
  full_name       String
  inn             String?
  phone           String?
  email           String?
  address         String?
  client_category ClientCategory
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  client_individual_properties_id Int?                        @unique
  client_individual_properties    ClientIndividualProperties? @relation(fields: [client_individual_properties_id], references: [id])

  client_individual_minor_properties_id Int?                             @unique
  client_individual_minor_properties    ClientIndividualMinorProperties? @relation(fields: [client_individual_minor_properties_id], references: [id])

  client_entity_properties_id Int?                    @unique
  client_entity_properties    ClientEntityProperties? @relation(fields: [client_entity_properties_id], references: [id])

  client_contracts                              ClientContractToClient[]
  clients_to_client_individual_minor_properties ClientToClientIndividualMinorProperties[]

  @@map("clients")
}

model ClientIndividualProperties {
  id         Int       @id @default(autoincrement())
  dob        DateTime? @db.Date
  snils      String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  client Client?

  client_passport_id Int?            @unique
  client_passport    ClientPassport? @relation(fields: [client_passport_id], references: [id])

  @@map("client_individual_properties")
}

model ClientIndividualMinorProperties {
  id                Int       @id @default(autoincrement())
  dob               DateTime? @db.Date
  snils             String?
  birth_certificate String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  client Client?

  client_passport_id Int?            @unique
  client_passport    ClientPassport? @relation(fields: [client_passport_id], references: [id])

  representatives ClientToClientIndividualMinorProperties[]

  @@map("client_individual_minor_properties")
}

model ClientEntityProperties {
  id         Int      @id @default(autoincrement())
  kpp        String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client Client?

  @@map("client_entity_properties")
}

model ClientToClientIndividualMinorProperties {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client_id Int
  client    Client @relation(fields: [client_id], references: [id])

  client_individual_minor_properties_id Int
  client_individual_minor_properties    ClientIndividualMinorProperties @relation(fields: [client_individual_minor_properties_id], references: [id])

  @@id([client_id, client_individual_minor_properties_id])
  @@map("r_clients_to_client_individual_minor_properties")
}

model ClientPassport {
  id                   Int      @id @default(autoincrement())
  number               String?
  issued               String?
  code                 String?
  place_of_birth       String?
  registration_address String?
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  client_individual_properties       ClientIndividualProperties?
  client_individual_minor_properties ClientIndividualMinorProperties?

  @@map("client_passports")
}

enum ClientContractType {
  DDU
  DKP

  @@map("client_contract_types")
}

model ClientContract {
  id                   Int                @id @default(autoincrement())
  number               String
  date                 DateTime           @db.Date
  registration_date    DateTime?          @db.Date
  price                Decimal            @db.Decimal(15, 2)
  client_contract_type ClientContractType
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt

  object_id Int
  object    Object @relation(fields: [object_id], references: [id])

  product_id Int     @unique
  product    Product @relation(fields: [product_id], references: [id])

  real_estate_agent_id Int?
  real_estate_agent    RealEstateAgent? @relation(fields: [real_estate_agent_id], references: [id])

  manager_id Int?
  manager    User? @relation(fields: [manager_id], references: [id])

  bank_id Int?
  bank    Bank? @relation(fields: [bank_id], references: [id])

  ddu_client_contract_properties_id Int?                         @unique
  ddu_client_contract_properties    DDUClientContractProperties? @relation(fields: [ddu_client_contract_properties_id], references: [id])

  clients            ClientContractToClient[]
  agency_contracts   ClientContractToAgencyContract[]
  scheduled_payments ScheduledPayment[]
  actual_payment     ActualPayment[]

  @@map("client_contracts")
}

model DDUClientContractProperties {
  id                          Int       @id @default(autoincrement())
  ddu_link                    String?
  return_account              String?
  escrow_account_opening_date DateTime? @db.Date
  escrow_period               DateTime? @db.Date
  escrow_account_number       String?
  is_escrow_discount          Boolean?
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @updatedAt

  client_contract ClientContract?

  @@map("ddu_client_contract_properties")
}

model ClientContractToAgencyContract {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client_contract_id Int
  client_contract    ClientContract @relation(fields: [client_contract_id], references: [id])

  agency_contract_id Int
  agency_contract    AgencyContract @relation(fields: [agency_contract_id], references: [id])

  @@id([client_contract_id, agency_contract_id])
  @@map("r_client_contracts_to_agency_contracts")
}

model ClientContractToClient {
  is_main    Boolean
  share      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client_contract_id Int
  client_contract    ClientContract @relation(fields: [client_contract_id], references: [id])

  client_id Int
  client    Client @relation(fields: [client_id], references: [id])

  @@id([client_contract_id, client_id])
  @@map("r_client_contracts_to_clients")
}

enum ScheduledPaymentType {
  OWN
  MORTGAGE
  EXCHANGE
  MATERNITY_CAPITAL

  @@map("scheduled_payment_types")
}

model ScheduledPayment {
  id                     Int                  @id @default(autoincrement())
  payment                Decimal              @db.Decimal(15, 2)
  date                   DateTime             @db.Date
  scheduled_payment_type ScheduledPaymentType
  created_at             DateTime             @default(now())
  updated_at             DateTime             @updatedAt

  client_contract_id Int
  client_contract    ClientContract @relation(fields: [client_contract_id], references: [id])

  @@map("scheduled_payments")
}

model ActualPayment {
  id         Int      @id @default(autoincrement())
  payment    Decimal  @db.Decimal(15, 2)
  date       DateTime @db.Date
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client_contract_id Int
  client_contract    ClientContract @relation(fields: [client_contract_id], references: [id])

  @@map("actual_payments")
}

model Object {
  id                   Int      @id @default(autoincrement())
  common_db_objects_id Int      @unique
  name                 String
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  entity_id Int
  entity    Entity @relation(fields: [entity_id], references: [id])

  products         Product[]
  client_contracts ClientContract[]
  agency_contracts AgencyContract[]

  @@map("objects")
}

enum ProductCategory {
  FLAT
  OFFICE
  APARTMENT
  STORAGE_ROOM
  PARKING_SPACE

  @@map("product_categories")
}

model Product {
  id                  Int             @id @default(autoincrement())
  pricing_products_id Int             @unique
  number              String
  product_category    ProductCategory
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  client_contract ClientContract?

  object_id Int
  object    Object @relation(fields: [object_id], references: [id])

  @@map("products")
}

model Agency {
  id                       Int      @id @default(autoincrement())
  common_db_contractors_id Int      @unique
  name                     String
  inn                      String?
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  agency_contracts          AgencyContract[]
  real_estate_agents        AgencyToRealEstateAgent[]
  agency_contract_signatory AgencyContractSignatory[]

  @@map("agencies")
}

enum AgencyContractType {
  REAL_ESTATE_AGENCY_CONTRACT
  MIP_AGENCY_CONTRACT

  @@map("agency_contract_types")
}

model AgencyContract {
  id                   Int                @id @default(autoincrement())
  number               String
  date                 DateTime           @db.Date
  agency_contract_type AgencyContractType
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt

  responsible_user_id Int?
  responsible_user    User? @relation(fields: [responsible_user_id], references: [id])

  entity_id Int
  entity    Entity @relation(fields: [entity_id], references: [id])

  object_id Int
  object    Object @relation(fields: [object_id], references: [id])

  agency_id Int
  agency    Agency @relation(fields: [agency_id], references: [id])

  agency_contract_signatory_id Int?
  agency_contract_signatory    AgencyContractSignatory? @relation(fields: [agency_contract_signatory_id], references: [id])

  real_estate_agency_contract_properties_id Int?                                @unique
  real_estate_agency_contract_properties    RealEstateAgencyContractProperties? @relation(fields: [real_estate_agency_contract_properties_id], references: [id])

  mip_agency_contract_properties_id Int?                         @unique
  mip_agency_contract_properties    MIPAgencyContractProperties? @relation(fields: [mip_agency_contract_properties_id], references: [id])

  client_contracts ClientContractToAgencyContract[]

  @@map("agency_contracts")
}

model AgencyContractSignatory {
  id         Int      @id @default(autoincrement())
  full_name  String
  email      String
  phone      String
  title      String
  based_on   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  agency_id Int
  agency    Agency @relation(fields: [agency_id], references: [id])

  agency_contract AgencyContract[]

  @@map("agency_contract_signatories")
}

model RealEstateAgencyContractProperties {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  agency_contract AgencyContract?

  agency_contract_commission_id Int                      @unique
  agency_contract_commission    AgencyContractCommission @relation(fields: [agency_contract_commission_id], references: [id])

  @@map("real_estate_agency_contract_properties")
}

model MIPAgencyContractProperties {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  agency_contract AgencyContract?

  agency_contract_commission_id Int                      @unique
  agency_contract_commission    AgencyContractCommission @relation(fields: [agency_contract_commission_id], references: [id])

  @@map("mip_agency_contract_properties")
}

model AgencyContractCommission {
  id         Int      @id @default(autoincrement())
  percent    Decimal  @db.Decimal(15, 2)
  threshold  Decimal  @db.Decimal(15, 2)
  max_days   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  real_estate_agency_contract_properties RealEstateAgencyContractProperties?
  mip_agency_contract_properties         MIPAgencyContractProperties?

  @@map("agency_contract_commissions")
}

model RealEstateAgent {
  id         Int      @id @default(autoincrement())
  full_name  String
  phone      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client_contracts ClientContract[]
  agencies         AgencyToRealEstateAgent[]

  @@map("real_estate_agents")
}

model AgencyToRealEstateAgent {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  agency_id Int
  agency    Agency @relation(fields: [agency_id], references: [id])

  real_estate_agent_id Int
  real_estate_agent    RealEstateAgent @relation(fields: [real_estate_agent_id], references: [id])

  @@id([agency_id, real_estate_agent_id])
  @@map("r_agencies_to_real_estate_agents")
}

model Entity {
  id                    Int      @id @default(autoincrement())
  common_db_entities_id Int      @unique
  name                  String
  website               String?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  agency_contracts          AgencyContract[]
  objects                   Object[]
  entity_forbidden_websites EntityForbiddenWebsite[]
  entity_forbidden_brands   EntityForbiddenBrand[]

  @@map("entities")
}

model EntityForbiddenWebsite {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  entity_id Int
  entity    Entity @relation(fields: [entity_id], references: [id])

  @@map("entity_forbidden_websites")
}

model EntityForbiddenBrand {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  entity_id Int
  entity    Entity @relation(fields: [entity_id], references: [id])

  @@map("entity_forbidden_brands")
}

model Bank {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  client_contracts ClientContract[]

  @@map("banks")
}
