generator client {
  provider      = "prisma-client-js"
  output        = "output"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  DIRECTOR
  SALES_EMPLOYEE

  @@map("user_roles")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  email     String   @unique
  phone     String?
  isManager Boolean  @default(true) @map("is_manager")
  isStaff   Boolean  @default(false) @map("is_staff")
  userRole  UserRole @map("user_role")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clientContracts ClientContract[]
  agencyContracts AgencyContract[]

  @@map("users")
}

enum ClientCategory {
  INDIVIDUAL
  INDIVIDUAL_MINOR
  ENTITY

  @@map("client_categories")
}

model Client {
  id                                Int            @id @default(autoincrement())
  fullName                          String         @map("full_name")
  inn                               String?
  phone                             String?
  email                             String?
  address                           String?
  clientCategory                    ClientCategory @map("client_category")
  clientIndividualPropertiesId      Int?           @unique @map("client_individual_properties_id")
  clientIndividualMinorPropertiesId Int?           @unique @map("client_individual_minor_properties_id")
  clientEntityPropertiesId          Int?           @unique @map("client_entity_properties_id")
  createdAt                         DateTime       @default(now()) @map("created_at")
  updatedAt                         DateTime       @updatedAt @map("updated_at")

  clientIndividualProperties               ClientIndividualProperties?               @relation(fields: [clientIndividualPropertiesId], references: [id])
  clientIndividualMinorProperties          ClientIndividualMinorProperties?          @relation(fields: [clientIndividualMinorPropertiesId], references: [id])
  clientEntityProperties                   ClientEntityProperties?                   @relation(fields: [clientEntityPropertiesId], references: [id])
  assignments                              Assignment[]
  clientsToClientIndividualMinorProperties ClientToClientIndividualMinorProperties[]
  clientContractsToClients                 ClientContractToClient[]
  representatives                          Representative[]

  @@map("clients")
}

model ClientIndividualProperties {
  id               Int       @id @default(autoincrement())
  dob              DateTime? @db.Date
  snils            String?
  clientPassportId Int?      @unique @map("client_passport_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  client         Client?
  clientPassport ClientPassport? @relation(fields: [clientPassportId], references: [id])

  @@map("client_individual_properties")
}

model ClientIndividualMinorProperties {
  id               Int       @id @default(autoincrement())
  dob              DateTime? @db.Date
  snils            String?
  birthCertificate String?   @map("birth_certificate")
  clientPassportId Int?      @unique @map("client_passport_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  client                                   Client?
  clientPassport                           ClientPassport?                           @relation(fields: [clientPassportId], references: [id])
  clientsToClientIndividualMinorProperties ClientToClientIndividualMinorProperties[]

  @@map("client_individual_minor_properties")
}

model ClientEntityProperties {
  id        Int      @id @default(autoincrement())
  kpp       String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  client Client?

  @@map("client_entity_properties")
}

model ClientToClientIndividualMinorProperties {
  clientId                          Int      @map("client_id")
  clientIndividualMinorPropertiesId Int      @map("client_individual_minor_properties_id")
  createdAt                         DateTime @default(now()) @map("created_at")
  updatedAt                         DateTime @updatedAt @map("updated_at")

  client                          Client                          @relation(fields: [clientId], references: [id])
  clientIndividualMinorProperties ClientIndividualMinorProperties @relation(fields: [clientIndividualMinorPropertiesId], references: [id])

  @@id([clientId, clientIndividualMinorPropertiesId])
  @@map("r_clients_to_client_individual_minor_properties")
}

model ClientPassport {
  id                  Int      @id @default(autoincrement())
  number              String?
  issued              String?
  code                String?
  placeOfBirth        String?  @map("place_of_birth")
  registrationAddress String?  @map("registration_address")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  clientIndividualProperties      ClientIndividualProperties?
  clientIndividualMinorProperties ClientIndividualMinorProperties?

  @@map("client_passports")
}

enum ClientContractType {
  DDU
  DKP

  @@map("client_contract_types")
}

model ClientContract {
  id                            Int                @id @default(autoincrement())
  number                        String
  date                          DateTime           @db.Date
  registrationDate              DateTime?          @map("registration_date") @db.Date
  price                         Decimal            @db.Decimal(15, 2)
  clientContractType            ClientContractType @map("client_contract_type")
  isRealEstateAgencyActDisabled Boolean?           @default(false) @map("is_real_estate_agency_act_disabled")
  isTransferActDisabled         Boolean?           @default(false) @map("is_transfer_act_disabled")
  comment                       String?
  link                          String?
  uuContractId                  Int?               @map("uu_contract_id")
  dduClientContractPropertiesId Int?               @unique @map("ddu_client_contract_properties_id")
  dkpClientContractPropertiesId Int?               @unique @map("dkp_client_contract_properties_id")
  productId                     Int                @unique @map("product_id")
  objectId                      Int                @map("object_id")
  realEstateAgentId             Int?               @map("real_estate_agent_id")
  managerId                     Int?               @map("manager_id")
  bankId                        Int?               @map("bank_id")
  subsidyId                     Int?               @map("subsidy_id")
  createdAt                     DateTime           @default(now()) @map("created_at")
  updatedAt                     DateTime           @updatedAt @map("updated_at")

  transferAct                      TransferAct?
  dduClientContractProperties      DduClientContractProperties?     @relation(fields: [dduClientContractPropertiesId], references: [id])
  dkpClientContractProperties      DkpClientContractProperties?     @relation(fields: [dkpClientContractPropertiesId], references: [id])
  product                          Product                          @relation(fields: [productId], references: [id])
  object                           Object                           @relation(fields: [objectId], references: [id])
  realEstateAgent                  RealEstateAgent?                 @relation(fields: [realEstateAgentId], references: [id])
  manager                          User?                            @relation(fields: [managerId], references: [id])
  bank                             Bank?                            @relation(fields: [bankId], references: [id])
  subsidy                          Subsidy?                         @relation(fields: [subsidyId], references: [id])
  scheduledPayments                ScheduledPayment[]
  actualPayments                   ActualPayment[]
  realEstateAgencyActs             RealEstateAgencyAct[]
  assignments                      Assignment[]
  clientContractsToClients         ClientContractToClient[]
  clientContractsToAgencyContracts ClientContractToAgencyContract[]

  @@map("client_contracts")
}

model DduClientContractProperties {
  id                       Int       @id @default(autoincrement())
  dduLink                  String?   @map("ddu_link")
  returnAccount            String?   @map("return_account")
  escrowAccountOpeningDate DateTime? @map("escrow_account_opening_date") @db.Date
  escrowPeriod             DateTime? @map("escrow_period") @db.Date
  escrowAccountNumber      String?   @map("escrow_account_number")
  isEscrowDiscount         Boolean?  @map("is_escrow_discount")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  clientContract ClientContract?

  @@map("ddu_client_contract_properties")
}

model DkpClientContractProperties {
  id        Int      @id @default(autoincrement())
  dkpLink   String?  @map("dkp_link")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clientContract ClientContract?

  @@map("dkp_client_contract_properties")
}

model ClientContractToAgencyContract {
  clientContractId Int      @map("client_contract_id")
  agencyContractId Int      @map("agency_contract_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  clientContract ClientContract @relation(fields: [clientContractId], references: [id])
  agencyContract AgencyContract @relation(fields: [agencyContractId], references: [id])

  @@id([clientContractId, agencyContractId])
  @@map("r_client_contracts_to_agency_contracts")
}

model ClientContractToClient {
  isMain           Boolean  @map("is_main")
  share            Int
  clientContractId Int      @map("client_contract_id")
  clientId         Int      @map("client_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  client         Client         @relation(fields: [clientId], references: [id])
  clientContract ClientContract @relation(fields: [clientContractId], references: [id])

  @@id([clientContractId, clientId])
  @@map("r_client_contracts_to_clients")
}

enum ScheduledPaymentType {
  OWN
  MORTGAGE
  EXCHANGE
  MATERNITY_CAPITAL

  @@map("scheduled_payment_types")
}

model ScheduledPayment {
  id                   Int                  @id @default(autoincrement())
  payment              Decimal              @db.Decimal(15, 2)
  date                 DateTime             @db.Date
  scheduledPaymentType ScheduledPaymentType @map("scheduled_payment_type")
  clientContractId     Int                  @map("client_contract_id")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")

  clientContract ClientContract @relation(fields: [clientContractId], references: [id])

  @@map("scheduled_payments")
}

model ActualPayment {
  id               Int      @id @default(autoincrement())
  payment          Decimal  @db.Decimal(15, 2)
  date             DateTime @db.Date
  clientContractId Int      @map("client_contract_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  clientContract ClientContract @relation(fields: [clientContractId], references: [id])

  @@map("actual_payments")
}

model Object {
  id                Int       @id @default(autoincrement())
  commonDbObjectsId Int       @unique @map("common_db_objects_id")
  name              String
  dateIn            DateTime? @map("date_in") @db.Date
  entityId          Int       @map("entity_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  entity          Entity           @relation(fields: [entityId], references: [id])
  products        Product[]
  clientContracts ClientContract[]
  agencyContracts AgencyContract[]
  transferActs    TransferAct[]

  @@map("objects")
}

enum ProductCategory {
  FLAT
  OFFICE
  APARTMENT
  STORAGE_ROOM
  PARKING_SPACE

  @@map("product_categories")
}

model Product {
  id                Int             @id @default(autoincrement())
  pricingProductsId Int             @unique @map("pricing_products_id")
  number            String
  productCategory   ProductCategory @map("product_category")
  objectId          Int             @map("object_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  transferAct    TransferAct?
  clientContract ClientContract?
  object         Object          @relation(fields: [objectId], references: [id])

  @@map("products")
}

model Agency {
  id                    Int      @id @default(autoincrement())
  commonDbContractorsId Int      @unique @map("common_db_contractors_id")
  name                  String
  inn                   String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  agencyContracts            AgencyContract[]
  agencyContractSignatory    AgencyContractSignatory[]
  realEstateAgencyActs       RealEstateAgencyAct[]
  agenciesToRealEstateAgents AgencyToRealEstateAgent[]

  @@map("agencies")
}

enum AgencyContractType {
  REAL_ESTATE_AGENCY_CONTRACT
  MIP_AGENCY_CONTRACT

  @@map("agency_contract_types")
}

model AgencyContract {
  id                                   Int                @id @default(autoincrement())
  number                               String
  date                                 DateTime           @db.Date
  agencyContractType                   AgencyContractType @map("agency_contract_type")
  link                                 String?
  responsibleUserId                    Int?               @map("responsible_user_id")
  entityId                             Int                @map("entity_id")
  objectId                             Int                @map("object_id")
  agencyId                             Int                @map("agency_id")
  agencyContractSignatoryId            Int?               @map("agency_contract_signatory_id")
  realEstateAgencyContractPropertiesId Int?               @unique @map("real_estate_agency_contract_properties_id")
  mipAgencyContractPropertiesId        Int?               @unique @map("mip_agency_contract_properties_id")
  createdAt                            DateTime           @default(now()) @map("created_at")
  updatedAt                            DateTime           @updatedAt @map("updated_at")

  responsibleUser                    User?                               @relation(fields: [responsibleUserId], references: [id])
  entity                             Entity                              @relation(fields: [entityId], references: [id])
  object                             Object                              @relation(fields: [objectId], references: [id])
  agency                             Agency                              @relation(fields: [agencyId], references: [id])
  agencyContractSignatory            AgencyContractSignatory?            @relation(fields: [agencyContractSignatoryId], references: [id])
  realEstateAgencyContractProperties RealEstateAgencyContractProperties? @relation(fields: [realEstateAgencyContractPropertiesId], references: [id])
  mipAgencyContractProperties        MipAgencyContractProperties?        @relation(fields: [mipAgencyContractPropertiesId], references: [id])
  realEstateAgencyAct                RealEstateAgencyAct[]
  clientContractsToAgencyContracts   ClientContractToAgencyContract[]

  @@map("agency_contracts")
}

model AgencyContractSignatory {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  basedOn   String?  @map("based_on")
  title     String?
  agencyId  Int      @map("agency_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  agency          Agency           @relation(fields: [agencyId], references: [id])
  agencyContracts AgencyContract[]

  @@map("agency_contract_signatories")
}

model RealEstateAgencyContractProperties {
  id                         Int      @id @default(autoincrement())
  agencyContractCommissionId Int      @unique @map("agency_contract_commission_id")
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")

  agencyContract           AgencyContract?
  agencyContractCommission AgencyContractCommission @relation(fields: [agencyContractCommissionId], references: [id])

  @@map("real_estate_agency_contract_properties")
}

model MipAgencyContractProperties {
  id                         Int      @id @default(autoincrement())
  agencyContractCommissionId Int      @unique @map("agency_contract_commission_id")
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")

  agencyContract           AgencyContract?
  agencyContractCommission AgencyContractCommission @relation(fields: [agencyContractCommissionId], references: [id])

  @@map("mip_agency_contract_properties")
}

model AgencyContractCommission {
  id        Int      @id @default(autoincrement())
  percent   Decimal  @db.Decimal(15, 2)
  threshold Decimal  @db.Decimal(15, 2)
  maxDays   Int      @map("max_days")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  realEstateAgencyContractProperties RealEstateAgencyContractProperties?
  mipAgencyContractProperties        MipAgencyContractProperties?

  @@map("agency_contract_commissions")
}

model RealEstateAgent {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  phone     String?
  oneGtId   Int?     @unique @map("one_gt_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clientContracts            ClientContract[]
  agenciesToRealEstateAgents AgencyToRealEstateAgent[]

  @@map("real_estate_agents")
}

model AgencyToRealEstateAgent {
  agencyId          Int      @map("agency_id")
  realEstateAgentId Int      @map("real_estate_agent_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  agency          Agency          @relation(fields: [agencyId], references: [id])
  realEstateAgent RealEstateAgent @relation(fields: [realEstateAgentId], references: [id])

  @@id([agencyId, realEstateAgentId])
  @@map("r_agencies_to_real_estate_agents")
}

model Entity {
  id                 Int      @id @default(autoincrement())
  commonDbEntitiesId Int      @unique @map("common_db_entities_id")
  commonContractorId Int?     @map("common_contractor_id")
  name               String
  website            String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  agencyContracts         AgencyContract[]
  objects                 Object[]
  entityForbiddenWebsites EntityForbiddenWebsite[]
  entityForbiddenBrands   EntityForbiddenBrand[]

  @@map("entities")
}

model EntityForbiddenWebsite {
  id        Int      @id @default(autoincrement())
  name      String
  entityId  Int      @map("entity_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  entity Entity @relation(fields: [entityId], references: [id])

  @@map("entity_forbidden_websites")
}

model EntityForbiddenBrand {
  id        Int      @id @default(autoincrement())
  name      String
  entityId  Int      @map("entity_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  entity Entity @relation(fields: [entityId], references: [id])

  @@map("entity_forbidden_brands")
}

model Bank {
  id        Int      @id @default(autoincrement())
  name      String
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clientContracts ClientContract[]

  @@map("banks")
}

enum EscrowAccountStatus {
  OPENED
  CLOSED
}

model EscrowAccountHistory {
  id                  Int                 @id @default(autoincrement())
  status              EscrowAccountStatus
  number              String
  openingDate         DateTime            @map("opening_date") @db.Date
  depositedAmount     Decimal             @map("deposited_amount") @db.Decimal(15, 2)
  incomingBalance     Decimal             @map("incoming_balance") @db.Decimal(15, 2)
  dateOfTransaction   DateTime            @map("date_of_transaction") @db.Date
  transactionAmount   Decimal             @map("transaction_amount") @db.Decimal(15, 2)
  outgoingBalance     Decimal             @map("outgoing_balance") @db.Decimal(15, 2)
  expirationDate      DateTime            @map("expiration_date") @db.Date
  depositor           String
  depositorInn        String?             @map("depositor_inn")
  dduNumber           String              @map("ddu_number")
  dduDate             DateTime            @map("ddu_date") @db.Date
  loanAgreementNumber String?             @map("loan_agreement_number")
  loanAgreementDate   DateTime?           @map("loan_agreement_date") @db.Date
  closingDate         DateTime?           @map("closing_date") @db.Date
  builderInn          String              @map("builder_inn")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")

  @@map("escrow_accounts_history")
}

model RealEstateAgencyAct {
  id               Int      @id @default(autoincrement())
  number           String
  date             DateTime @db.Date
  amount           Decimal  @db.Decimal(15, 2)
  retention        Decimal? @db.Decimal(15, 2)
  note             String?
  link             String?
  clientContractId Int      @map("client_contract_id")
  agencyId         Int      @map("agency_id")
  agencyContractId Int      @map("agency_contract_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  clientContract ClientContract @relation(fields: [clientContractId], references: [id])
  agency         Agency         @relation(fields: [agencyId], references: [id])
  agencyContract AgencyContract @relation(fields: [agencyContractId], references: [id])

  @@map("real_estate_agency_acts")
}

model Subsidy {
  id        Int      @id @default(autoincrement())
  name      String
  isVisible Boolean  @default(true) @map("is_visible")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  clientContracts ClientContract[]

  @@map("subsidies")
}

model Assignment {
  id               Int      @id @default(autoincrement())
  order            Int
  clientContractId Int      @map("client_contract_id")
  clientId         Int      @map("client_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  clientContract ClientContract @relation(fields: [clientContractId], references: [id])
  client         Client         @relation(fields: [clientId], references: [id])

  @@map("assignments")
}

model TransferAct {
  id               Int      @id @default(autoincrement())
  number           String
  date             DateTime @db.Date
  link             String?
  clientContractId Int      @unique @map("client_contract_id")
  objectId         Int      @map("object_id")
  productId        Int      @unique @map("product_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  clientContract                ClientContract                @relation(fields: [clientContractId], references: [id])
  object                        Object                        @relation(fields: [objectId], references: [id])
  product                       Product                       @relation(fields: [productId], references: [id])
  transferActsToRepresentatives TransferActToRepresentative[]

  @@map("transfer_acts")
}

model Representative {
  id             Int       @id @default(autoincrement())
  fullName       String    @map("full_name")
  attorneyNumber String?   @map("attorney_number")
  attorneyDate   DateTime? @map("attorney_date") @db.Date
  authorizedBy   String?   @map("authorized_by")
  authorizedRole String?   @map("authorized_role")
  clientId       Int       @map("client_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  client                        Client                        @relation(fields: [clientId], references: [id])
  transferActsToRepresentatives TransferActToRepresentative[]

  @@map("representatives")
}

model TransferActToRepresentative {
  transferActId    Int      @map("transfer_act_id")
  representativeId Int      @map("representative_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  transferAct    TransferAct    @relation(fields: [transferActId], references: [id])
  representative Representative @relation(fields: [representativeId], references: [id])

  @@id([transferActId, representativeId])
  @@map("r_transfer_acts_to_representatives")
}
